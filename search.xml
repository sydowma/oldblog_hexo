<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Pywinauto使用——简单控制旺旺吧上网管理软件]]></title>
      <url>2017%2F06%2F24%2FREADME%2F</url>
      <content type="text"><![CDATA[Pywinauto使用——简单控制旺旺吧上网管理软件介绍利用Python的库──pywinauto对Windows软件进行模拟人工的操作 目标对网吧内的相关人员进行快速下机处理 说明了解到用户的需求之后我想到了两种方式，一种是破解这个软件，直接控制，但这种不现实，本人技术能力有限。第二种是模拟人工的操作，脚本运行起来肯定比人快，所以我选择第二种方式解决这个问题。 首先进行调研，我首先想到的是自动化的工具，可是很多适合自动化的工具并没有用，很多适用于移动平台，比如Appium这种。 接着我尝试找一些模拟人工操作的软件，有Autoit，按键精灵等，但这些软件有一个问题，我还需要一个学习成本，还要去学对应的语言，这对我而言，太不爽了，我突然想到，Python的库这么多，会不会有Python对应的操作Windows软件的库呢，Google了一下，果然是有的，就是今天的主角──pywinauto pywinauto的操作本质pywinauto本质是对Windows句柄的操作需要先用spy++这种工具，利用Finder Tool查看当前窗口或控件的属性，根据Title、Class或者Handle进行识别的操作，得益于Python的便捷语法，写起来顺畅无比。 实际操作中，Handle的值每次打开都不一样，我又怕中文的支持不好，所以一般用Class定位操作窗口和控件，用Title识别程序。 需求分析用户的需求是「快速下机」，针对这个需求，我看了一下软件的操作步骤，得出以下操作步骤 在快速通道的输入框中输入相关人员的身份证号末尾或者机器号，以便搜索出对应的机器 敲回车键，搜索 双击搜索出来的第一个机器，弹出下机提示框 点击下机 整个流程就是这样，在写代码的过程中，对于pywinauto库的API大致浏览和查看，写到第三个步骤处卡住了，需要在搜索位置处双击，但是这个地方失败了，使用了相关的双击API传入坐标还是不行，这时我突然发现按下Enter键也可以，这样我就发送一个Enter键的指令就可以，接下来我也发现点击下机这个按钮也可以发送Enter 问题及处理：遇到脏数据的处理： 这个问题是在实际运行中遇到的，比如我输入了一个身份证号，但是这个人已经下机走了，所以我根本搜索不到，也就不会弹出下机提示框，这个时候程序就一直在等待，大概有5~6秒，这对于实际使用是不可接受的，我查看API之后，有一个方法引起了我的注意isVisible，这应当是判断是否可见的方法，我用这个方法来判断这个弹出框是否可见，如果不可见就直接pass，进行下一步骤。 数据和代码分离： 为了防止使用的人操作代码，防止误操作，将数据存储在一个txt文件中，换行分隔，这里代码在读取数据的时候要注意去掉\n 脚本运行时相关程序必须前置： 目前还无法解决]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Django使用]]></title>
      <url>2017%2F06%2F07%2F40.%20Django%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[Django使用 创建 django-admin startproject firstsite# 创建名字为firstsite的django站点 更改manage.py 文件上面使用的python版本 python3 manage.py startapp firstapp#创建app 在settings的INSTALLED_APPS中添加刚刚创建的App 执行 python3 manage.py migrate 创建model # 每个类继承子Modelclass People(models.Model): # 字符 # 数据库中暂时没有这个数据没有关系, 名字可以为空, 名字最长200 name=models.CharField(null=True, blank=True, max_length=200) job=models.CharField(null=True, blank=True, max_length=200) 创建策略 python3 manage.py makemigrations 执行migrate python3 manage.py migrate ​ 在View中找到model中的数据 from django.shortcuts import render"引入"from firstapp.models import Peoplefrom django.template import Context, Templateimport HttpResponse# Create your views here.def first_try(request): person = People(name='Spock', job='officer') html_string = ''' &lt;html&gt; &lt;head&gt; &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.10/components/accordion.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class="ui center aligned icon header"&gt; &lt;i class="hand spock icon"&gt;&lt;/i&gt; Hello, &#123;&#123; person.name &#125;&#125; &lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; ''' # 模板 t = Template(html_string) # 上下文 c = Context&#123;&#123;'person': person&#125;&#125; # 渲染 web_page = t.render(c) # 编程http的对象 return HttpResponse(web_page) urls from firstapp.views import first_tryurlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^first_try/', first_try)] ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[macOS 下的Appium安装与配置]]></title>
      <url>2017%2F03%2F22%2F39.%20Appium%20Installation%20%26%20Setup%20With%20macOS%2F</url>
      <content type="text"><![CDATA[macOS 下的Appium安装与配置 Appium Installation &amp; Setup With macOSiOS系统要求及说明： macOS 10.11 或更高 brew需要最新版本的 Xcode 或Xcode Command Line 介绍iOS9.3及以下使用 Automation 作为底层技术，在iOS9.3出现了XCUITest，并且在iOS10时抛弃了 Automation ，所以Appium在iOS9.3及以下和iOS10的配置方法不同。 安装Appium如果已安装过部分依赖，可直接跳过 安装Homebrew强烈推荐所有macOS上的软件使用Homebrew进行安装，使用brew安装过的软件，不再需要sudo命令。 打开终端，运行： /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; brew的使用非常简单，安装一个软件使用 brew install #&lt;package name&gt; 如果brew提示Xcode版本过低，需要安装新版本的Xcode（安装时保存两个版本即可） 下载地址：https://developer.apple.com/download/more/ 安装Nodejsbrew install node 检查是否安装成功 node -v# v6.9.1 npm -v# 3.10.8 安装cnpm由于npm源在国外，我们使用npm安装库时会比较慢，可以使用taobao的镜像源 npm install -g cnpm --registry=https://registry.npm.taobao.org 检查安装是否成功 cnpm -v# 4.4.0 以后均使用cnpm 命令代替npm 安装appium使用Node.jsappium本质上就是一个Nodejs应用，我们可以使用npm对其进行安装，安装完毕后就可以使用命令行启动 cnpm install -g appium 可以使用appium-doctor来确认安装环境是否完成 cnpm install -g appium-doctor appium-doctor 下载App使用软件比较简单，拥有图形化界面，并且有Inspector工具，帮助检测界面元素 下载地址：https://github.com/appium/appium-desktop/releases 设置Appium安装CarthageCarthage 是一个管理 iOS 开发库依赖的包 brew install carthage 安装语言依赖python安装Python3（使用Python2跳过）brew install python3 检测安装成功 python3 -V# Python 3.6.0 pip3 -V# pip 9.0.1 from /usr/local/lib/python3.6/site-packages (python 3.6) 出现相应代码即成功 macOS自带有Python2版本，默认情况下输入python调用的就是系统的python2和pip 此外，如果系统版本之前安装过python3导致安装后输入python3没有找到命令，可以尝试brew link --overwrite python3重新链接 使用 pip 安装pip3 install Appium-Python-Client# python3 -&gt; pip3# python -&gt; pip 详细信息：https://github.com/appium/python-client Java安装JDK brew updatebrew cask install java 使用Maven进行依赖 &lt;dependency&gt; &lt;groupId&gt;io.appium&lt;/groupId&gt; &lt;artifactId&gt;java-client&lt;/artifactId&gt; &lt;version&gt;5.0.0-BETA7&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 详细信息：https://github.com/appium/java-client 安装相关依赖包含了记录日志的idevicesyslog和端口转发的iProxy、usbmuxd brew install libimobiledevice --HEAD #和iOS手机通讯使用 brew install ideviceinstaller # 安装app使用 在iOS10需要使用 ios-deploy cnpm install -g ios-deploy 对真机需要xcpretty gem install xcpretty gem 安装速度慢可以更换镜像源 gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/ 第一次运行配置不配置会出现xcodebuild exited with code &#39;65&#39; and signal &#39;null&#39;错误 开发者账号：AppiumDesktop中加入 xcodeOrgId 和 xcodeSigningId 字段 TeamID 在 https://developer.apple.com/account/ 里左侧的 Member ship 中找到 需要 xcodeOrgId 和 xcodeSigningId 写在desired capabilities 中 &#123; &quot;xcodeOrgId&quot;: &quot;&lt;Team ID&gt;&quot;, &quot;xcodeSigningId&quot;: &quot;iPhone Developer&quot; &#125; Team ID 在 https://github.com/developer.apple.com/account 中的Membership 免费AppleID帐号 在appium的出错日志中找到WebDriverAgent的位置，打开进行签名 [XCUITest] Using WDA path: &apos;/usr/local/lib/node_modules/appium/node_modules/.2.23.1@appium-xcuitest-driver/WebDriverAgent&apos; 更改 WebDriverAgent 的BundleID ，原来是com.facebook.WebDriverAgentLib，我建议把facebook改为你的名字或公司的名字，这里还有个坑，改完这个之后发现还是提示有错误，最后在Build Settings里的Product Bundle Identifier里再修改一下。 ​ 点击上面菜单栏的Product -&gt; Test 运行第一次运行会提示没有权限，打开真机上的设置App，通用 -&gt; 描述文件与设备管理，找到你的邮箱，选择信任，再继续执行test，成功启动后就说明可以了，执行完毕后点击停止。 没有了，打开appium测试吧 查看界面元素 使用WebDriverAgent 从 https://github.com/facebook/WebDriverAgent 克隆, 执行 ./Scripts/bootstrap.sh 命令, 然后打开项目进行签名, 执行方式1. 接着点击上面菜单栏的Product --&gt; test2. xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination id=&apos;udid&apos; test# udid 可以使用命令 idevice_id -l 使用AppiumDesktop app-inspector # macaca-clinpm install macaca-cli -g# macaca doctormacaca doctor# app-inspectornpm install app-inspector -g# 使用app-inspector -u &apos;udid&apos; ​ 253错误如果你运行官方的TestApp示例，可能会爆出253错误，这时需要对测试App重新build（需要源代码） xcodebuild 命令project xcodebuild [-project projectname] [-target targetname ...] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [buildaction ...] [setting=value ...] [-userdefault=value ...] workspace xcodebuild -workspace workspacename -scheme schemename [-destination destinationspecifier] [-destination-timeout value] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [buildaction ...] [setting=value ...] [-userdefault=value ...] 示例 # xcodebuild -project RobotCalibration.xcodeproj -target RobotCalibration -sdk iphoneos -configuration development DesiredCapabilities 配置信息 确定 platformVersion 确定 bundleId 一台设备 udid 可以设置为 auto 不提供 app 属性也可以调起 App，但需要设置 bundleId 测试 iOS 9.3以下时，需要设置 automationName 为 Automation ，其它为 XCUITest 常用命令切换Xcode版本 sudo xcode-select -s #path /Applications/Xcode.app/ 查看设备udid idevice_id -l# 或者使用 ideviceinfo 可以在返回的数据中找到 udid Automation （iOS 10以下）推荐使用：Xcode7.3.1 注意：iOS8 中需要确定设置中的开发者选项里的UIAutomation 为打开状态 有开发者帐号 — &gt; 打开Xcode — &gt; 对设备注册免费帐号 ─&gt; 打开项目 — &gt; 修改 bundleID —&gt; 登录帐号进行签名测试前查看设定的App目录是否正确 接着就可以打开Appium，和测试用例了 如果不牵扯自动安装和卸载App，可以先手动安装App到目标设备，再进行测试 前提需要 ideviceinstaller ideviceinstaller -u &lt;UDID of device&gt; -i &lt;path of .app/.ipa&gt; Instruments exited with code: 253[Instruments] Error launching instruments: Instruments crashed on startup 可能是App路径不正确 授权iOS模拟器需要测试模拟器进行此项，使用npm安装 cnpm install -g authorize-ios 安装完毕后运行 sudo authorize-ios 注意：需要在安装完新的 Xcode 后再次执行 通过 Jenkins 运行 iOS 测试（未测试）确认之前authorize-ios运行成功 下载 jenkins wget https://jenkins.ci.cloudbees.com/jnlpJars/jenkins-cli.jar 接下来定义一个 Jenkins 的 LaunchAgent来自动登录，请确保其不包含SessionCreate 或 Userkey 防止测试运行 java -jar jenkins-cli.jar \ -s https://team-appium.ci.cloudbees.com \ -i ~/.ssh/id_rsa \ on-premise-executor \ -fsroot ~/jenkins \ -labels osx \ -name mac_appium 最后设置并启动 sudo nano /Library/LaunchAgents/com.jenkins.ci.plist&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;com.jenkins.ci&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;java&lt;/string&gt; &lt;string&gt;-Djava.awt.headless=true&lt;/string&gt; &lt;string&gt;-jar&lt;/string&gt; &lt;string&gt;/Users/appium/jenkins/jenkins-cli.jar&lt;/string&gt; &lt;string&gt;-s&lt;/string&gt; &lt;string&gt;https://instructure.ci.cloudbees.com&lt;/string&gt; &lt;string&gt;on-premise-executor&lt;/string&gt; &lt;string&gt;-fsroot&lt;/string&gt; &lt;string&gt;/Users/appium/jenkins&lt;/string&gt; &lt;string&gt;-executors&lt;/string&gt; &lt;string&gt;1&lt;/string&gt; &lt;string&gt;-labels&lt;/string&gt; &lt;string&gt;mac&lt;/string&gt; &lt;string&gt;-name&lt;/string&gt; &lt;string&gt;mac_appium&lt;/string&gt; &lt;string&gt;-persistent&lt;/string&gt; &lt;/array&gt; &lt;key&gt;KeepAlive&lt;/key&gt; &lt;true/&gt; &lt;key&gt;StandardOutPath&lt;/key&gt; &lt;string&gt;/Users/appium/jenkins/stdout.log&lt;/string&gt; &lt;key&gt;StandardErrorPath&lt;/key&gt; &lt;string&gt;/Users/appium/jenkins/error.log&lt;/string&gt;&lt;/dict&gt;&lt;/plist&gt; Finally set the owner, permissions, and then start the agent. sudo chown root:wheel /Library/LaunchAgents/com.jenkins.ci.plistsudo chmod 644 /Library/LaunchAgents/com.jenkins.ci.plistlaunchctl load /Library/LaunchAgents/com.jenkins.ci.plistlaunchctl start com.jenkins.ci 清理文件（可选）$HOME/Library/Logs/CoreSimulator/ /Library/Caches/com.apple.dt.instruments/ $HOME/Library/Developer/Xcode/DerivedData/ 以上目录下的所有文件 Android安装mavenbrew install maven 额外的设置 下载 JDK 通过 Android Studio 下载 Android SDK，并设置目录 macOS 设置 JavaHome和 Android SDK 目录，将下列代码放置到用户目录下的 .bashrc 或 .zshrc 中 # 使用Android Studio安装后的路径# android sdkexport ANDROID_HOME=~/Library/Android/sdkexport PATH=&quot;$HOME/.yarn/bin:$PATH&quot;# java_homeexport JAVA_HOME=$(/usr/libexec/java_home)export PATH=$JAVA_HOME/bin:$PATHexport CLASS_PATH=$JAVA_HOME/lib# adb等 export PATH=$&#123;PATH&#125;:$ANDROID_HOME/tools:$ANDROID_HOME/platform-toolsexport PATH=$&#123;PATH&#125;:$ANDROID_HOME/tools/bin 最后，可以使用 appium-doctor 来检查配置环境 appium-doctor 在capabilities写清楚 确定 platformVersion 确定 appPackage 确定 appActivity ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[软件测试工具]]></title>
      <url>2017%2F03%2F03%2F38.%20%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[推荐实际使用的工具 XMind Selenium JMeter Web调试工具 Firefox Firebug Chrome 移动自动化测试UI自动化框架 Appium,Calabash,Espresso,uiautomator,Robotium Appium 免费 开源 支持Android、iOS 无需修改被测应用 移动自动化接口统一 支持多个开发语言 性能测试工具Apache Jmeter , Gatling, Tsung, HP LoadRunner Apache Jmeter 免费 开源 跨平台 简单易用 多协议支持 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用学生身份申请价值50美元的Digitalocean服务器]]></title>
      <url>2017%2F02%2F27%2F37.%20%E7%94%A8%E5%AD%A6%E7%94%9F%E8%BA%AB%E4%BB%BD%E7%94%B3%E8%AF%B7%E4%BB%B7%E5%80%BC50%E7%BE%8E%E5%85%83%E7%9A%84Digitalocean%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
      <content type="text"><![CDATA[众所周知，各大公司针对学生有很多的福利，国内的阿里云和腾讯云针对学生都有特价，而国外的公司更阔绰，比如Digitalocean和AWS都会直接送相关的金额，你可以自行去选择服务器，更加灵活、自由。这次我申请的是Digitalocean的服务器，下面是申请的步骤。 说明： Digitalocean和GitHub有合作，学生资格的认证是由GitHub来完成的，Digitalocean其实被包含在GitHub Education当中的Student Developer Pack里面，所以我们首先申请GitHub的Student Developer Pack 要求： 学生邮箱，没有学生邮箱需要提供学生证照片（需审核） 信用卡，没有信用卡需要PayPal帐号支付5美元（可以使用银联卡） 打开网址 https://education.github.com/pack ，点击Get your pack 根据提示，登录/注册 你的GitHub帐号 接下来会提示你输入详细信息， 根据提示进行选择，这里我选择的是学生和个人 Tell us about you，接下来认定你的学生身份，需要提供你的姓名，学生邮箱，学校姓名，毕业年份，申请原因。 如果有学生邮箱，但是在Select your school-issued email address: 里面没有显示，需要你先去GitHub帐号里面将你学生邮箱添加上去。 如果没有学生邮箱，需要提供你的学生证明，比如，带学生证号的学生证，成绩单等，要求必须资质上必须有日期。 这是我写的范例（没有学生邮箱），仅供参考 接下来等待审核，通过或者拒绝后邮箱会收到响应的邮件 通过审核之后，在邮箱里打开链接，或者再次打开 https://education.github.com/pack ，点击Get your Pack，这时已经可以看到许多服务都有相关的提示了。 找到DigitalOcean，复制你的Code，点击 DigitalOcean website 进行跳转 创建DigitalOcean帐号 验证邮箱之后，需要输入信用卡对账户进行确认。在输入前，点击 Have a Promo Code? 根据提示粘贴刚刚复制好的Code 输入Promo Code 如果没有信用卡，点击PayPal，最少需要支付5美元，点击继续跳转，就用银联卡支付5美元。 创建成功后，确认账户余额。点击digitalocean网页右上角的头像，选择Settings。再点击左边的Billing 接下来点击右上角的按钮 Create Droplet 创建 选择服务器配置。另外据我测试，San Francisco的服务器大多数已经被封了，会导致连接不上 测试 IP 在终端输入 ping 你的IP 通的话会返回，time数值越少越好 64 bytes from 104.16.xx.x: icmp_seq=0 ttl=51 time=221.834 ms64 bytes from 104.16.xx.x: icmp_seq=1 ttl=51 time=221.976 ms64 bytes from 104.16.xx.x: icmp_seq=2 ttl=51 time=219.906 ms 不通会返回 Request timeout for icmp_seq 0Request timeout for icmp_seq 1Request timeout for icmp_seq 2 如果不通则需要返回重新创建，记得把原来的关闭。 选择好之后点创建就可以了。如果对IP不满意，建议在 How many Droplets? 这里一次性多创建几个实例，创建好之后再进行选择。 完毕 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS面试题]]></title>
      <url>2017%2F01%2F22%2F35.%20iOS%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
      <content type="text"><![CDATA[iOS面试题 强引用循环的场景 Block循环引用 列出几个主要的线程锁 解释runtime，和常用使用场景 解释Runloop ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[部署Django]]></title>
      <url>2017%2F01%2F21%2F34.%20%E9%83%A8%E7%BD%B2Django%2F</url>
      <content type="text"><![CDATA[账户不在 sudoers 文件中 1、切换到root用户权限 [user@Compile ~]$ su root 密码： 2、查看/etc/sudoers文件权限，如果只读权限，修改为可写权限 [root@Compile user]# ls -l /etc/sudoers -r–r—–. 1 root root 4030 9月 25 00:57 /etc/sudoers [root@Compile user]# chmod 777 /etc/sudoers 保存退出，并恢复/etc/sudoers的访问权限为440 [root@Compile user]# chmod 440 /etc/sudoers python升级带来的yum异常python升级后，发现yum无法使用了 原因：这是因为yum采用python作为命令解释器，这可以从/usr/bin/yum文件中第一行#!/usr/bin/python发现。而python版本之间兼容性不太好，使得2.X版本与3.0版本之间存在语法不一致问题。而CentOS 5自带的yum采用的是python2.4，当系统将python升级到2.6或3.0后，出现语法解释错误。 解决办法： 很简单，一是升级yum，一是修改yum的解释器为旧版本python2.4（如果你没有采用覆盖升级的话） 升级yum的作法就不详述了； 修改yum的解释器为旧版本python2.4： vi /usr/bin/yum 将第一行”#!/usr/bin/python” 改为 “#!/usr/bin/python2.4”即可 ####Loaded plugins: fastestmirror, langpacks问题 Loaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * epel: mirrors.neusoft.edu.cn File "/usr/libexec/urlgrabber-ext-down", line 28 except OSError, e: ^SyntaxError: invalid syntaxExiting on user cancel 查看发现这个文件也依赖Python版本，修改为相同即可。修改如下： vim /usr/libexec/urlgrabber-ext-down#! /usr/bin/python2.7 Apache2服务器的默认Log路径/var/log/apache2/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux安装Python3]]></title>
      <url>2017%2F01%2F18%2F33.%20Linux%E5%AE%89%E8%A3%85Python3%2F</url>
      <content type="text"><![CDATA[Linux安装Python3 安装依赖库和编译器： # yum install gcc -y # yum install openssl-devel 如果没有安装openssl-devel，在安装过程中pip无法安装 Step 2:下载对应版本的Python # wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tar.xz # xz -d Python-3.5.1.tar.xz # tar -xvf Python-3.5.1.tar Step 3:编译和安装Python3.5 # cd Python-3.5.1 # ./configure&amp;&amp; make &amp;&amp; make install 将 python3.5 链接到python3命令 大部分情况下到step3 后就大功告成了，如果你前面没有安装openssl-devel库，这时你就需要将python3.5链接到python3命令 1. 找到Python3.5安装的目录 # whereis python 会输出所有Python的目录 python: /usr/bin/python /usr/bin/python2.6 /usr/lib/python2.6 /usr/local/bin/python3.5m-config /usr/local/bin/python3.5-config /usr/local/bin/python3.5 /usr/local/bin/python3.5m /usr/local/lib/python3.5 /usr/include/python2.6 /usr/share/man/man1/python.1.gz 明显安装在了/usr/local/bin/python3.5 目录，执行 # sudo ln -s /usr/local/bin/python3.5 /usr/bin/python3 Ubuntu Server 16.04 ubuntu@VM-82-221-ubuntu:/etc$ pip3 install virtualenvTraceback (most recent call last): File "/usr/bin/pip3", line 11, in &lt;module&gt; sys.exit(main()) File "/usr/lib/python3/dist-packages/pip/__init__.py", line 215, in main locale.setlocale(locale.LC_ALL, '') File "/usr/lib/python3.5/locale.py", line 594, in setlocale return _setlocale(category, locale)locale.Error: unsupported locale setting 解决： export LANGUAGE=en_US.UTF-8export LANG=en_US.UTF-8export LC_ALL=en_US.UTF-8locale-gen en_US.UTF-8sudo dpkg-reconfigure locales 创建虚拟环境 # pip3 install virtualenv virtualenv --python=`which python3` ~/.virtualenvs/djangodev$ source ~/.virtualenvs/djangodev/bin/activate activate script $ source bin/activate 安装Django # pip3 install Django]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[TableView和CollectionView整体上移64pt问题]]></title>
      <url>2017%2F01%2F16%2F32.%20TableView%E5%92%8CCollectionView%E6%95%B4%E4%BD%93%E4%B8%8A%E7%A7%BB64pt%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[两个解决方案 self.automaticallyAdjustsScrollViewInsets = NO 这个是有效的，但是会影响其他页面 在切换视图的ViewController中，切换完视图就更改响应ViewController的frame 最后的解决方法是修改了所有子View的Y值]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS－当遇到tableView整体上移时的解决方案]]></title>
      <url>2017%2F01%2F15%2F31.%20iOS%EF%BC%8D%E5%BD%93%E9%81%87%E5%88%B0tableView%E6%95%B4%E4%BD%93%E4%B8%8A%E7%A7%BB%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
      <content type="text"><![CDATA[iOS－当遇到tableView整体上移时的解决方案方案一 在使用了navigationController后，当界面进行跳转往返后，时而会出现tableView或collectionView上移的情况，通常会自动上移64个像素，那么这种情况，我们可以关闭tableView的自动适配布局。 self.automaticallyAdjustsScrollViewInsets = NO;// 默认是YES 方案二： 当出现tableView整体上移时，你当然可以在 Xcode 中修改每个 View,将他们下移20个像素（状态栏高度）或者64个像素（状态栏+导航栏高度）。 但是苹果显然已经考虑到这个问题，他们早在 iOS 7 SDK 中为 ViewController 提供了一个 edgesForExtendedLayout 新属性。如果你将这个属性设置为UIRectEdgeNone，则 viewController 的所有子视图都会自动调整。 目前暂时也适用于不同系统版本代码更迭出现状况时使用。 self.edgesForExtendedLayout = UIRectEdgeNone;// 推荐使用 方案三 我曾经遇到过当我点击图片放大时，然后再返回，就会出现tableView整体上移20像素， 后来我发现是 MJPhotoBrowser 第三方框架的问题，然后我请教了我们组长，他后来在 MJPhotoBrowser.m 的控制器里添加了几句话]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用TFHpple处理数据的请求遇到的坑]]></title>
      <url>2017%2F01%2F02%2F30.%20%E4%BD%BF%E7%94%A8TFHpple%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AF%B7%E6%B1%82%2F</url>
      <content type="text"><![CDATA[使用TFHpple处理数据的请求遇到的坑由于App中需要抓取网页数据，也没有做后台，就在iOS App里手动检索HTML信息进行抓取，这个过程中使用到了TFHpple框架，不过我看了一些范例都是直接使用NSData来直接获取网页的Data，这样做肯定会阻塞主线程，我一直在尝试使用其他方法，但都没有成功，困扰了我很久，直到昨天看到一篇网易公开课的文章提到了（http://www.itgo.me/a/2968793659999962488/TFHpple-XPath）。 - (void)wangyi &#123;// 网易公开课地址NSString *str=[NSString stringWithFormat:@"http://open.163.com/"];NSURL *url = [NSURL URLWithString:[str stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];// UTF－8NSURLRequest *request = [NSURLRequest requestWithURL:url];AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc]initWithRequest:request];// 请求数据，设置成功与失败的回调函数[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) &#123;// 请求下来的整个网页数据NSString *html = operation.responseString;// 网页有gbk编码有utf8编码，全部换成utf8NSString *utf8HtmlStr = [html stringByReplacingOccurrencesOfString:@"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=GBK\"&gt;" withString:@"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;"];// TFHpple解析的是data，转换成dataNSData *htmlDataUTF8 = [utf8HtmlStr dataUsingEncoding:NSUTF8StringEncoding];// 开始解析TFHpple *xpathParser = [[TFHpple alloc] initWithHTMLData:htmlDataUTF8];// 查找所有的 &lt;div class="g-cell1"// 因为首页的“小编推荐”是使用该class标示的，所以主要获取的是该种形式的小课程节目NSArray *elements= [xpathParser searchWithXPathQuery:@"//div[@class='g-cell1']"];// 不存在则不继续执行if ([elements count] &lt;= 0) &#123;return;&#125;// 以下只是示例解析第一个课程，循环即可全部解析TFHppleElement *first = [elements firstObject];// 完整写法NSArray *arr = [first searchWithXPathQuery:@"//a[1]/@href"];TFHppleElement *ele = [arr firstObject];NSLog(@"网址链接：%@",[ele text]);// 合并的写法NSLog(@"图片链接：%@",[[[first searchWithXPathQuery:@"//img/@src"] firstObject] text]);NSLog(@"标题：%@",[[[first searchWithXPathQuery:@"//h5"] firstObject] text]);NSLog(@"副标题：%@",[[[first searchWithXPathQuery:@"//p"] firstObject] text]);&#125;failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;NSLog(@"发生错误！%@",error);&#125;];// 加入队列 开始执行NSOperationQueue *queue = [[NSOperationQueue alloc] init];[queue addOperation:operation];&#125; 这个代码使用的是AFNetworking 2x的版本，不过网页已经更改了，所以这个解析已经失效了。 我把代码使用了之后，可以使用 接着我尝试把TFHpple处理HTML的这部份放到子线程去执行，参考代码http://www.jianshu.com/p/943dcb9ad632 然后分别计算时间对比一下这三种方式。 我预想的结果是把处理HTML的这部份放到子线程这样处理会更快，但结果是并没有。 结果是，直接使用AFNetwoking，并且在里面对数据进行处理是最快的，当然，我只用真机测试了5次，可能会有偏差 设备: iPhone5c , iOS10.2 代码地址: https://github.com/magaofei/iOS_Apprentice/tree/master/NSURLSessionBackgroundData 后续： 然而事情还远没有结束。当我把代码改动了之后，发现还有其他问题在等着我。 如果使用AFNetworking请求数据，在GET方法中，我在收到了Data之后用TFHpple解析HTML，将处理后的数据保存到一个NSMutableArray中并返回，但并没有成功返回。我尝试使用__block修饰也不行，无奈放弃了这个方案。 接着我换了另外一个方案使用dispatch_semaphore和dispatch_group 来做，但也遇到了挫折，的代码处理逻辑是 从网络抓取，进入loadTutorialsWithUrlString方法 在这个方法中创建group，异步执行group，创建信号量，在里面发起GET 收到GET回来的数据后，在notifiy里对数据进行处理，然后返回 但问题是，我在进入loadTutorialsWithUrlString之后就是异步的方法，其实我的网络请求处理数据这些会慢于其他动作，所以这个逻辑是失败的。 我尝试更改它 创建group，异步执行loadTutorialsWithUrlString 在方法中，先创建信号量，接着发起GET，方法最后发起等待信号量 在方法执行完毕后，在notify里写入文件 &#123; _group = dispatch_group_create(); dispatch_group_async(_group, dispatch_get_global_queue(0, 0), ^&#123; [self loadTutorialsWithUrlString:urlString]; &#125;); dispatch_group_notify(_group, dispatch_get_global_queue(0, 0), ^&#123; //放到缓存中 //Cache目录 NSString *path = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject]; //根据传入的文件名调用相关的文件，默认为安工要闻 NSString *filePath = [path stringByAppendingPathComponent:plistName];// ayitNewsArray = _news; BOOL WriteToFileBOOL = [NSKeyedArchiver archiveRootObject:_ayitNewsArray toFile:filePath]; if (WriteToFileBOOL) &#123; //写入成功 NSLog(@"写入成功"); NSLog(@"%@", filePath); &#125; else &#123; //写入失败 NSLog(@"写入失败"); &#125; &#125;);&#125; return _ayitNewsArray;&#125;#pragma mark - 格式化数据- (void)loadTutorialsWithUrlString:(NSString *)urlString&#123; NSLock *lock = [[NSLock alloc] init]; [lock lock]; // 怀疑这里因为全局并发所以产生资源共享，所以这里lock _semaphore = dispatch_semaphore_create(0); [lock unlock]; AFAppDotNetAPIClient *manager = [AFAppDotNetAPIClient manager]; manager.requestSerializer = [AFHTTPRequestSerializer serializer]; manager.responseSerializer = [AFHTTPResponseSerializer serializer]; [manager GET:urlString parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) &#123; &#125; success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; _data = responseObject; NSMutableArray *newsGroup = [NSMutableArray array]; TFHpple *hpple = [[TFHpple alloc] initWithHTMLData:_data]; NSString *pathQueryString = @"//div[@class='newslist l']/ul/li/a"; // NSArray *Nodes = [hpple searchWithXPathQuery:pathQueryString]; for (TFHppleElement *element in Nodes) &#123; MKNewsItem *newsItem = [[MKNewsItem alloc] init]; [newsGroup addObject:newsItem]; // 6 // tutorial.title = [[element firstChild] content]; newsItem.title = [element text]; newsItem.time = [[element firstChildWithTagName:@"span"] content]; NSMutableString *tempTime = [NSMutableString stringWithFormat:@"%@", newsItem.time]; //删除时间前后的[]字符 [tempTime replaceCharactersInRange:NSMakeRange(0, 1) withString:@""]; [tempTime replaceCharactersInRange:NSMakeRange(10, 1) withString:@""]; newsItem.time = tempTime; newsItem.url = [NSURL URLWithString:[element objectForKey:@"href"]]; NSMutableString *tempUrl = [NSMutableString stringWithFormat:@"http://www.ayit.edu.cn%@",newsItem.url.absoluteString]; [tempUrl deleteCharactersInRange:NSMakeRange(22, 2)]; //删除那两个.. newsItem.url = [NSURL URLWithString:tempUrl]; &#125; // NSLog(@"%@", newsGroup); _ayitNewsArray = newsGroup; dispatch_semaphore_signal(_semaphore); newsGroup = nil; [manager invalidateSessionCancelingTasks:YES]; NSLog(@"thread = %@", [NSThread currentThread]); &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; NSLog(@"发生错误！%@",error); dispatch_semaphore_signal(_semaphore); &#125;]; // 在网络请求成功之前 信号量等待中 dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER);&#125; 但又发生了两个问题，我打开Leaks测试的时候，发现了内存泄露，排查了一下，发现居然是AFNetworking，想着这不可能啊，这么多人使用的框架怎么会有这种问题呢？接着我GOOGLE和很多次，最终在作者的提示下 https://github.com/AFNetworking/AFNetworking/issues/2149 在数据处理完毕后，调用[manager invalidateSessionCancelingTasks:YES];结束Session的请求，不然的话，我每一次发出请求之后，之前的请求还一直在，这就是为什么产生内存泄露的原因。然后依照网上的说话，继承了AFHTTPSessionManager，将其设置为单例，这样每次请求的manager只有一个。 接着还有个多线程的问题，我在创建信号量的时候有小概率会出现 EXC_BAD_INSTRUCTION 错误。我怀疑是因为异步并发执行导致的资源共享，所以我用NSLock给它上锁，目前看来是解决了问题。 才疏学浅，目前只能写到这里了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[sqlite for iOS犯的错2016年12月21日]]></title>
      <url>2016%2F12%2F21%2F29.%20sqlite-for-iOS%E7%8A%AF%E7%9A%84%E9%94%992016%E5%B9%B412%E6%9C%8821%E6%97%A5%2F</url>
      <content type="text"><![CDATA[Sql语句里的values少了s 使用了NSLog(@&quot;%s&quot;, sqlite3_errmsg(_db));才发现错误, 原因是NSLog(@&quot;%s&quot;, sqlite3_errmsg(_db)); sqlite3_column_text写成sqlite3_column_int64 NSMutableArray延迟加载写的不对 - (instancetype)init &#123; if (self = [super init]) &#123; _students = [NSMutableArray array]; &#125; return self;&#125;// 这样是老师写的, 但是它是纯代码做的, 所以控制器有alloc和init 但我使用storyboard, 所以就跳过了这一步, 通过debugging 发现数组是nil, 就说明没有成功alloc和init]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于 iPhone App 设计的几点看法和总结]]></title>
      <url>2016%2F12%2F20%2F28.%20%E5%85%B3%E4%BA%8E-iPhone-App-%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%87%A0%E7%82%B9%E7%9C%8B%E6%B3%95%E5%92%8C%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[关于 iPhone App 设计的几点看法和总结有几个原则 比如不要使用高优先级的东西, 比如提示用户时, 用一个HUD显示就比Alert强制用户观看的体验要好, 同理, 你在微信朋友圈点击那个评论图标时, 不是使用的弹窗, 而是在原来区域做的改变, 这点影响就有了良好的用户体验, 不警示用户, 优秀的设计就是这样, 粗略的设计就是将信息粗暴的反馈给用户, 而不管合不合理, 我们应当将反馈分级别的呈现, 而不是一以贯之. 一贯性的图标 图标是用户每天接触App最多的东西, 极大的影响和吸引用户, 正因为如此, 有不少App愿意把活动呈现在此, 比如阿里系的App, 这很明显是为了运营, 但这影响到了用户体验, 就不应该去做, 如果阿里真的把用户放在第一位, 就不应该干这样的事 遵循官方推荐的设计 一个平台有着自己的设计理念,在这个平台中的产品最好能做到一致, 这样用户在使用就能够方便的上手, 让用户方便上手, 自然也能够留住用户 不要大的改变, 只需要增增补补 一款产品忌讳频繁的改变, 我举个支付宝的例子, 最早只是一款钱包App, 后来越来越重, 沉重的同时也频繁改版, 直到现在你也不知道他会改到哪里去, 但有一点是肯定的, 就是需求是不断变化的, 呵呵. 不断改版的同时也意味着, 没想清楚. 每一次改版都加大了老用户的上手程度和管理的混乱, 导致用户对升级新的版本没有兴趣 多用原生 现在有跨平台开发解决方案, 但还不够成熟, 关键是体验不太好, 建议多用原生 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS面试题总结]]></title>
      <url>2016%2F12%2F15%2F27.%20iOS%E9%9D%A2%E8%AF%95%2F</url>
      <content type="text"><![CDATA[copy关键字的作用常用于NSString、NSArray、NSDictionary，防止用可变类型来作为子类，如果子类是一个可变类型，则会返回一个不可变类型给他，保护了 循环引用的场景父子关系时 事件的传递UIApplication UIWindow 遍历 事件的响应 图片切圆角]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[data转NSString的Encoding问题]]></title>
      <url>2016%2F12%2F14%2F26.%20data%E8%BD%ACNSString%E7%9A%84Encoding%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[data转NSString的Encoding问题在做安工助手这款App的时候需要抓取网页HTML，我想把抓取放到后台来进行，于是使用NSURLSessionDataTask，却发现了一个BUG，死活获取不到数据，不知道为什么。今天一步步排查，终于找到原因了，因为Encoding的问题 不完整代码： NSURLSessionDataTask *task = [_session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123; NSLog(@"task = %@", [NSThread currentThread]); NSString *str = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]; NSLog(@"str = %@", str); dispatch_async(dispatch_get_main_queue(), ^&#123; _dataTextView.text = str; NSLog(@"_dataTextView %@", [NSThread currentThread]); &#125;); &#125;]; 设置断点后的结果是，data是有数据的，但str是没数据的，这我就很纳闷了，不可能啊，试了其他代码之后，终于想到，难道是encoding的问题？我果断把请求的URL换成百度，成功了…这真是个坑，我们在将网页的NSData转换为NSString，一定要看好网页原来是什么格式的 例如我这个网页的编码是GB2312 那么就应该需要响应的编码 NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);NSString *str = [[NSString alloc] initWithData:data encoding:enc]; 运行以后，正常。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ruby on rails学习]]></title>
      <url>2016%2F12%2F09%2F25.%20ruby%20on%20rails%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[ruby on rails学习（档案／资料夹 ：用途 ） app/ ： 包含你应用程式的 controllers、models、views。你要改的东西大多是这些。 config/ ： 设定应用程式的执行阶段规则、路由设定（routes）、资料库等等。 db/ ：显示你目前资料库的 schema（结构定义），以及资料库的 migrations。 public/ ：这是唯一一个资料夹会是放什么就出现什么的。如果你把档案放里面，server 会直接回传，不会经过 Rails 的处理。 app/assets/ ：你会要把图片、JavaScript、stylesheets (CSS) 还有其他静态档案放在里面。现代的 Rails 应用程式使用一种叫做 Assets Pipeline 的东西，把在这资料夹里面的所有 JavaScript 和 CSS 档合并成一个档案来加速。 rails new 还建立了其他很多东西。大概可以写一本书来讲，所以我们现在先无视它们。 new topics这些网页到底怎么建出来，又是如何连在一起的呢？Rails 的 scaffold 帮你处理好了。 我们来仔细瞧瞧 rails 帮我们建立的档案： app/models/topic.rb 这个档案里面有我们的 topic model 的程式码。如果你仔细看，他其实几乎是空白的。 对资料的新增、读取、更新、删除操作在 Rails 是内建的。 app/views/topics 这个资料夹里面有我们的 topics model 的 view 的程式码。 你刚刚使用的表单的程式码就放在这里面。Rails 会帮你建好这些档案作为 scaffold 的一部分。 如果你以前写过 HTML，这些程式你应该不陌生。 Rails 的 view 只是 HTML 加上一些用来显示资料库来的资料的程式。 app/views/topics/index.html.erb 这个程式是用在列出所有 topics 的页面。 index 是用来表示一个网站或网站的一部分的“预设”页面。当你打开 http://localhost:3000/topics 的时候，topics 的 index 页面会传送到你的电脑上。 app/views/topics/show.html.erb 是当你在 Listing topics 按一下 show 时会看到的页面。 app/views/topics/new.html.erb 是当你按一下 New Topic 时会看到的页面。 app/views/topics/edit.html.erb 是当你按一下 Edit 时会看到的页面。 app/views/topics/_form.html.erb 你或许注意到了，新增 topic 和编辑 topics 的页面长得很像。这是因为他们都使用了这个档案来显示表单。 这种档案称作 partial，因为他只有网页里面一部分的内容。Partial 的档名一定是底线开头的。 挑战题：你可以找到 partial 是在 new.html.erb 和 edit.html.erb 的哪一行程式被引用的吗？ app/controllers/topics_controller.rb 这称为 controller 档，Rails 自动透过 scaffold 产生的。 如果你打开来看，你会看到每一个 view ，除了 _form.html.erb 之外都对应到一个 method（开头是 def）。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mongod 使用]]></title>
      <url>2016%2F12%2F08%2F24.%20mongod-%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[mongod 使用进入Shell mongo 启动 mongod]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[autoLayout]]></title>
      <url>2016%2F12%2F07%2F23.%20autoLayoutAndFrame%2F</url>
      <content type="text"><![CDATA[autoLayout(void)setNeedsUpdateConstraints- (void)updateConstraintsIfNeeded frame- (void)setNeedsLayout- (void)layoutIfNeeded - (void)layoutSubviews // 更改子view的布局]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[retainCount并不能返回正确的数值]]></title>
      <url>2016%2F12%2F07%2F22.%20retainCount%E5%B9%B6%E4%B8%8D%E8%83%BD%E8%BF%94%E5%9B%9E%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%95%B0%E5%80%BC%2F</url>
      <content type="text"><![CDATA[retainCount并不能返回正确的数值我想通过retainCount来理解引用计数，在网上搜了搜，看到了这个方法 相同意思的两行代码，却返回了不同的结果 NSDate *now = [NSDate date]; NSDate *nowinit = [[NSDate alloc] init]; NSLog(@"now = %@, retain count = %ld", now, CFGetRetainCount((__bridge CFTypeRef)(now))); NSLog(@"nowinit = %@, retain count = %ld", nowinit, CFGetRetainCount((__bridge CFTypeRef)(nowinit))); retainCount的值 [NSDate date]输出的结果是2 [[NSDate alloc] init]输出的结果是1 这让我大为不解，从结果来看，他们是完全相同的，不应该会是这样，如果不同的话，其他人也应该会指出的，但我没发现有人说出来。 我尝试Google了一下，Google上第一个就是 Cocoa中retainCount返回值不准的原因这个，看了之后我才发现，Apple也说了，这个东西不准，我干，既然不准，这个方法还存在干嘛。我有看到StackOverFlow上面的回答，他劝我们使用 Instruments 中的 Leaks 和 Zombies 来检测泄露的内存和僵尸对象。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Genymotion Android模拟器]]></title>
      <url>2016%2F11%2F28%2F21.%20Genymotion%20Android%E6%A8%A1%E6%8B%9F%E5%99%A8%2F</url>
      <content type="text"><![CDATA[Genymotion Android模拟器想试试用Charles对AndroidApp 抓包，谁知道模拟器这么难调试 记录一下 Genymotion网络为(NAT) 用模拟器访问本机地址为 10.0.3.2 我的Charles代理端口为7777，所以就设置上了 Mac 上启用 Surge 后，虚拟机的「网络设置-代理」里填上对应的 IP 地址就可以让虚拟机也能走代理，如下图所示假定 Mac 里的代理设置是 127.0.0.1:6152，通过查看虚拟机的 IP 可以推断出 Mac 作为主机的 IP 是 10.211.55.2，代理设置里填写 10.211.55.2:6152 即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[算法学习第一节]]></title>
      <url>2016%2F11%2F26%2F20.%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E8%8A%82%2F</url>
      <content type="text"><![CDATA[Dynamic Connectivity(动态连通性)Question： How many connected components result after performing the following sequence of union operations on a set of 10 items? 1-2 3-4 5-6 7-8 7-9 2-8 0-5 1-9 Answer: 3 个人见解：这个问题是说，有几个连通的集合，比如1-2，说明1和2之间是连接的，那么1-2 和 2-8 说明1到8之间是连通状态，那么他们三个是一个集合，由此计算，总共有3个集合 Quick Find（快速查找、贪心算法）code: public class QuickFindUF &#123; private int[] id; public QuickFindUF(int N) &#123; id = new int[N]; for (int i = 0; i &lt; N; i++) // set id of each object to itself id[i] = i; &#125; public boolean connected(int p, int q) &#123; //check whether p and q are in the same component return id[p] == id[q]; &#125; public void union(int p, int q) &#123; // change all entries with id[p] to id[q] int pid = id[p]; int qid = id[q]; for (int i = 0; i &lt; id.length; i++) if (id[i] == pid) id[i] = qid; &#125;&#125; 将连接到的数字更改为相同数字 相同的数组元素就意味着连通 时间复杂度 缺点 时间复杂度太大 Quick Union把数组看作一组树，数组中每一项是它在树中的父节点 Question: Suppose that in a quick-union data structure on 10 elements that the id[] array is 0 9 6 5 4 2 61 0 5 What are the roots of 3 and 7, respectively? Answer: 6 and 6 The root of 3 is 6: 3-&gt;5-&gt;2-&gt;6 The root of 7 is 6: 7-&gt;1-&gt;9-&gt;5-&gt;2-&gt;6 和Quick Find的区别在于，是用相同根节点来表示数组中相同的元素，并且有利于合并。在合并树的时候，只需要改变一个值，比如把p这个树合并到q中，只需要更改id[9]的值为6即可，这就意味着9这个结点的根节点是6，这样其他值就无需更改，减少了操作 code: public class QuickUnionUF &#123; private int[] id; public QuickUnionUF(int N) &#123; id = new int[N]; for (int i = 0; i &lt; N; i++) id[i] = i; //set id of each to itself &#125; private int root(int i) &#123; // chase parent pointers until reach root while (i != id[i]) i = id[i]; return i; &#125; public boolean cinnected(int p, int q) &#123; //check if p and q have same root return root(p) == root(q); &#125; public void union(int p, int q) &#123; // change root of p to point to root of q int i = root(p); int j = root(q); id[j] = j; &#125;&#125; algorithm initialize union find quick-find N N 1 quick-union N N N to slow 在查找一个高度很高的树时，每一次都需要回溯整棵树，浪费时间，每一次查找都是对数组的一次遍历 Quick-Union Improvements在实现quick-union的时候执行一些操作避免得到很高的树，如果一个大树和小树合并，避免将大树放在下面，那将会导致更高的树 在带权算法中，总是将小的树放在下面]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[为什么要把插座变量声明为弱引用？]]></title>
      <url>2016%2F11%2F25%2F19.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8A%8A%E6%8F%92%E5%BA%A7%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E4%B8%BA%E5%BC%B1%E5%BC%95%E7%94%A8%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[iOS上强引用循环的几处场景为什么要把插座变量声明为弱引用？将插座变量声明为弱引用是一个编程约定，当系统的可用内存偏少时，视图控制器会自动释放其视图并在之后需要显示时再创建。因此，视图控制器应该使用弱引用特性的插座变量指向view的子视图，以便在释放view时同时释放view的所有子视图 来自《iOSProgramming》4th edition 委托弱引用对象及其委托之间产生强引用循环。例如BNRHypnosisViewController是UITextfield对象的委托，而且UITextfield对象是BNRHypnosisViewController的强引用属性，如果UITextfield对象再对其委托保持强引用，就会在两者之间产生强引用循环，很容易造成内存泄露]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Objective-C属性声明的关键字]]></title>
      <url>2016%2F11%2F23%2F18.%20%E5%B1%9E%E6%80%A7%E5%A3%B0%E6%98%8E%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
      <content type="text"><![CDATA[Objective-C声明属性的关键字介绍readonly和readwritereadonly只有getter方法，没有setter方法，杜绝了从外部访问属性的可能，但是在本身也无法使用self调用方法 解决方法：把属性的声明写在.m文件中，可以避免外界的访问，也可以在本身使用self调用方法 默认是readwrite strong vs weak不同 引用计数+1 strong是强引用，属性声明时默认就是强引用 注意：强引用循环/循环引用现象说明：循环引用是指，两个对象之间相互强引用，导致无法被释放，造成内存泄露。一般是存在父子关系的时候容易发生这种现象，比如两个包类，其中背包里面拥有钱包。 // 来自《iOS编程》第四版// BNRItem.h@property (nonatomic, strong) BNRItem *containedItem;@property (nonatomic, strong) BNRItem *container;// BNRItem.m- (void)setContainedItem:(BNRItem *)containedItem &#123; _containedItem = containedItem; // 将item加入容纳它的BNRItem对象时， // 会将它的container实例变量指向容纳它的对象 self.containedItem.container = self;&#125;- (void)dealloc &#123; NSLog(@"Destroyed %@", self);&#125;// main.m#import &lt;Foundation/Foundation.h&gt;#import "BNRItem.h"#import "Person.h"int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; // 创建一个NSMutableArray对象，并用items变量保存该对象的地址 NSMutableArray *items = [[NSMutableArray alloc] init]; BNRItem *backpack = [[BNRItem alloc] initWithItemName:@"Backpack"]; [items addObject:backpack]; BNRItem *calculator = [[BNRItem alloc] initWithItemName:@"Calculator"]; [items addObject:calculator]; backpack.containedItem = calculator; backpack = nil; calculator = nil; for (BNRItem *item in items) &#123; NSLog(@"%@", item); &#125; NSLog(@"Setting items to nil...."); items = nil; &#125; //此时输出结果是 /* 2016-11-24 13:50:44.023481 RandomItems[36837:2040846] Backpack () :Worth $0, recorded on 2016-11-24 05:50:44 +00002016-11-24 13:50:44.023586 RandomItems[36837:2040846] Calculator () :Worth $0, recorded on 2016-11-24 05:50:44 +00002016-11-24 13:50:44.023605 RandomItems[36837:2040846] Setting items to nil....Program ended with exit code: 0 */ 由于我们重写了dealloc方法，在对象即将被释放时，应该调用dealloc方法，这里并没有调用，说明这两个对象并没有正常释放。 首先确定父子关系，确定之后，让父对象拥有子对象，子对象不能拥有父对象，比如backpack是父对象，calculator是子对象，根据这个规则名，将backpack指向calculator(_containedItem)的指针保留为强引用，将calculator指向backpack(_container)的指针保留为弱引用。 @property (nonatomic, weak) BNRItem *container;//输出/* 2016-11-24 14:10:18.675480 RandomItems[37054:2053319] Backpack () :Worth $0, recorded on 2016-11-24 06:10:18 +00002016-11-24 14:10:18.675578 RandomItems[37054:2053319] Calculator () :Worth $0, recorded on 2016-11-24 06:10:18 +00002016-11-24 14:10:18.675595 RandomItems[37054:2053319] Setting items to nil....2016-11-24 14:10:18.675635 RandomItems[37054:2053319] Destroyed Backpack () :Worth $0, recorded on 2016-11-24 06:10:18 +00002016-11-24 14:10:18.675929 RandomItems[37054:2053319] Destroyed Calculator () :Worth $0, recorded on */ 比如背包和钱包是同一品牌的产品，我们用一个类来代替，类中有两个属性，(containedItem)一个是里面放了什么东西，(container)一个是被什么东西包含了，在把钱包放入背包后，背包的containedItem指向了钱包，而钱包的container指向了背包，就造成了循环引用，解决方法是，把钱包的指向改为弱引用。 strong vs assign不同 strong修饰OC对象 strong强引用，引用计数+1 assign修饰非OC对象 assign拷贝值，不做引用计数 assign可以用在非OC对象上吗？ 可以，但不会做引用计数+1 weak vs assign相同 可以修饰OC对象 不做强引用，引用计数不加1 不同 weak在对象释放时自动置为nil assign保留原始值，释放对象时不会置为nil（不安全）(unsafe_unretained) 场景：在对象被释放之后，weak会将对象置为nil，准确的说是对象的地址置为nil，而assign则不会，所以就有可能发生一种现象，如果对象被释放了，而assign修饰的对象的指针还在指向着那块内存地址，当其他对象使用了这块内存地址时，就容易发生冲突，基础类型不会发生这种情况，所以我们应该使用weak来修饰对象，用assign来修饰基础类型。 copy使用copy关键字声明属性，在使用过程中，内部会调用copyWithZone方法，重新生成一个新的不可变的类型并赋值返回，这样做的好处是，当拥有一个可变类型的子类来使用时，就可以避免可变类型的子类对象进行的反复修改，避免导致不可控现象。 举例说明 // main.m#import &lt;Foundation/Foundation.h&gt;#import "Person.h"int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; // insert code here... NSMutableString *mutableString = [[NSMutableString alloc] init]; mutableString = [NSMutableString stringWithString:@"1234"]; Person *p1 = [[Person alloc] init]; p1.name = mutableString; NSLog(@"p1.name = %@ --&gt; %p", p1.name, p1.name); NSLog(@"mutableString = %@ --&gt; %p", mutableString, mutableString); NSLog(@"appendString之后"); [mutableString appendString:@"5"]; NSLog(@"p1.name = %@", p1.name); NSLog(@"mutableString = %@", mutableString); &#125; return 0;&#125;// 使用copy关键字声明的name// 输出/*2016-11-24 13:25:12.320037 copy[36455:2025654] p1.name = 1234 --&gt; 0x34333231452016-11-24 13:25:12.321110 copy[36455:2025654] mutableString = 1234 --&gt; 0x1003065a02016-11-24 13:25:12.321189 copy[36455:2025654] appendString之后2016-11-24 13:25:12.321433 copy[36455:2025654] p1.name = 12342016-11-24 13:25:12.321475 copy[36455:2025654] mutableString = 12345*/ 可以看到，在执行完毕p1.name = mutableString;之后，两个指针的地址就不同了，这就是因为重新生成了一个地址来指向p1.name，并且是不可变类型的。而mutableString还在那里。 缺点：频繁使用会造成内存的浪费，所以我们只在必要时使用 nonatomic vs atomic在iOS上我们用nonatomic，默认时atomic，所以我们要将其声明 说明，两者的区别是使用时保证线程安全，在多线程中调用属性可能会发生线程锁的问题，不过苹果声明，在iOS上不必考虑这个问题，缺点是会影响性能。 getter vs setter可以用来指定getter和setter的方法名，常用于BOOL中 如有错误，欢迎指正]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[指针变量的写法]]></title>
      <url>2016%2F11%2F23%2F17.%20%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%99%E6%B3%95%2F</url>
      <content type="text"><![CDATA[指针变量的写法在刚学习C语言的时候，我对于指针很畏惧，很大程度上是因为它那个恶心的*，后来接触到了以后，发现确实挺恶心的 关于指针变量的写法不外乎这几种 int *foo;int * foo;int* foo; 第一种最流行，它写在了变量名前面，能够很清晰的表明这是个指针变量，但我觉得也有问题，为什么？先举个例子 int a = 0;foo = &amp;a;*foo = 100; 注意到了吗？ 在使用指针变量的时候，我们不会把那个*再写出来了，反而，如果你写出来的话，代表的意思就不是指针变量了，而是指针变量所指向变量。 如果我写了 int *foo;foo = &amp;a; 我会感觉到这样的代码，让我有一点歧义，明明上面的foo变量在声明时带上了*表明它是一个指针变量，而下面的带上了就成了另外一种意思，所以我有点讨厌这样的写法。 第二种写法，很清晰，但也很分散，这样的代码估计很少有人写，另外也有一点歧义，太像乘*了 第三种写法，直接写在类型的后面，写的人比第二种多一些，我觉得不错，避免了第一种的歧义。 不管你怎么写，在实际当中肯定还是要遵守团队的规范]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iOS界面开发（基础篇）主观题考试]]></title>
      <url>2016%2F11%2F21%2F16.%20iOS%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89%E4%B8%BB%E8%A7%82%E9%A2%98%E8%80%83%E8%AF%95%2F</url>
      <content type="text"><![CDATA[iOS界面开发（基础篇）主观题考试 要求： 使用导航栏和UITableViewController构造一个和上面截图基本类似界面 界面只要求布局方位一致即可，不要求位置间距完全一致。每个商品Cell的 粉色字体 部分（限时购、特价、限购X件），不需要实现，也不用占位置 ​ 导航栏中间Title为 购物车（商品种类数量），例如上图是三类商品，那就是 购物车(3)，如果删除了一个商品，需要同步变成 购物车(2) 导航栏右侧的编辑和图标，可以不响应动作，但是需要显示出来 购物车里面的所有商品按照仓库分组，也就是说数据结构是： [ 仓库1 : [商品1, 商品2, …], 仓库2 : [商品1, 商品2, 商品3, …] ] 每个仓库的Section由：仓库名称、商品列表、仓库结算信息组成 仓库名称左侧选择按钮： a. 点击选中，该Section下的所有商品列表需要选中 b. 取消选中，该Section下的所有商品列表需要取消选中 c. 如果该Section下的所有商品列表只有部分选中，其应该为未选中： 仓库结算信息，只需要包括 本仓总计（不含税）** **这一项，该项的数值是：该Section下的被选中的商品列表价格之和；其他结算信息项不用实现。 仓库和仓库Section间需要有大约10dp的灰色间隔 每个商品Cell需要支持右侧的滑动删除： 当点击删除时，该商品需要被删除，导航栏的数目、仓库的左侧选中状态、仓库结算信息需要更新。 税费点击展开，其中点击展开需要有高度变化动画（效果参考考拉海购APP）： 每个商品的文字描述最多为两行，超过显示… 。 这里要求实现：a. 一行商品标题显示效果 b. 商品标题过长导致两行并跟随… 的显示效果。 每个商品Cell需要执行左侧的选择框的选中和取消选中，选中状态改变时，仓库的左侧选中状态、仓库结算信息需要更新。 整个页面底部的全部结算界面，其展示信息不需要变化，固定写死即可，也不用响应动作；只需要固定悬浮在屏幕的底部，不随滚动条滚动。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python爬虫四周课程]]></title>
      <url>2016%2F11%2F21%2F15.%20Python%E7%88%AC%E8%99%AB%E5%9B%9B%E5%91%A8%E8%AF%BE%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[Python爬虫四周课程 课程相关 答疑时间: 14:00 - 17:00 直播时间: 另行通知 其他 课程简介: 爬、存、查、现 爬虫 分为定向和非定向(Google、Baidu) 我们爬取的是指定网站的爬虫， 我们只需要使用一个数据库存储，百度是分层集群存储 哈希表存储线性结构 爬虫 = 数据请求(HTTP) + 数据解析(html/json) Debug:]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[让你的 alfred 支持拼音搜索]]></title>
      <url>2016%2F11%2F13%2F14.%20%E8%AE%A9%E4%BD%A0%E7%9A%84alfred%E6%94%AF%E6%8C%81%E6%8B%BC%E9%9F%B3%E6%90%9C%E7%B4%A2%2F</url>
      <content type="text"><![CDATA[让你的 Alfred 支持拼音搜索来源：https://gist.github.com/tiann/35fb758c18036d7f8640 | https://www.v2ex.com/t/248284 安装 pypinyin 这个库（可能需要sudo） pip install pypinyin 执行alfred-pinyin.py python Path/filename.py#python为命令名称，这里是python2， 后面的是文件的路径和名称 下载地址 https://gist.github.com/tiann/35fb758c18036d7f8640]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[西单大悦城Apple Store体验]]></title>
      <url>2016%2F11%2F12%2F13.%20%E8%A5%BF%E5%8D%95%E5%A4%A7%E6%82%A6%E5%9F%8EApple%20Store%E4%BD%93%E9%AA%8C%2F</url>
      <content type="text"><![CDATA[西单大悦城Apple Store体验昨天去了北京的西单，路过Apple Store，焉能不进去看看？ 懒得去周边的商场，就一直呆了很久，对几个东西有点感触： iPhone7 Bose降噪耳机 全新的MacBook Pro iPhone7玩了玩iPhone7 和 iPhone7 Plus，发现大屏的体验还是不错的，改变了我对大屏手机的看法，也看了景深人像的功能，不过觉得没那么重要，Plus的作用还是大，这样的话可以接收更多的信息。 把玩了许久iPhone7，又去体验体验iPhone6s，因为有不同，才能够更深刻的体验到变化。iPhone7的震动反馈做的更好，代替了原来单一的震动模式，增加了很多新的种类，结合着全新的Home Button，有了一个全新的反馈体验。 对于新的Home Button，总结来说，已经不是实体按键了，看来Apple也放弃了实体键，最终转向了虚拟按键，本来还不是很适应，但当我把玩了一段时间的iPhone7之后，我再去用iPhone6s时，顿时感受手更累了，想回到iPhone7上面去。 Bose降噪耳机以前就听过降噪耳机的用武之地，以前不觉得有什么，果然有些东西你不体会、不体验是不会知道的，当我戴上耳机的那一刹那，真是觉得置身事外，摘下耳机又回到了这个世界。倘若戴上这个耳机，走入地铁早高峰的洪流之中，至少耳朵是干净的。 全新的Macbook Pro没有带TouchBar的13寸的Macbook Pro，机身轻盈了不少，但13寸的好像只有2个USB-C接口，背面的ＬＯＧＯ也不亮了，这些都可以，唯一不能让人接受的就是键盘了，键盘为了配合机身，变得更薄了，但失去了触感，按下去好像没有按一样，官方声称这是第二代蝶式键盘，可我觉得和第一代没有什么改进，真是让人悲伤，或许以后会改变罢。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[导航控制器的按钮设置(Storyboard)]]></title>
      <url>2016%2F11%2F11%2F12.%20%E5%AF%BC%E8%88%AA%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E6%8C%89%E9%92%AE%E8%AE%BE%E7%BD%AE(Storyboard)%2F</url>
      <content type="text"><![CDATA[导航控制器的按钮设置(Storyboard)效果图: 新建UIView, 放入 ViewController 中 设置 UIView 的布局上左右都为0, 高度为44 更新Frame 放入3个 Button 到 UIView 中 设置第一个 Button 的布局, 上下左右都为0 设置第二个 Button 的布局, 右和下为0 在上一步的基础上, 设置第二个 Button 和第一个 Button 相同宽度和高度, 按住 Control 键, 拖拽第二个 Button 到第一个 Button 松手 按住 Shift 键, 选中 Equal Widths 和 Equal Heights 最后点击 Add Constraints 设置第三个 Button 的布局, 右和下为0 (同第6步) 在上一步的基础上, 设置第三个 Button 和第二个 Button 相同宽度和高度 (同第7步) 选中三个 Button 同时按下option + Command + = 更新 Frame]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[熟悉Django的模板语言——Python第四周第二节]]></title>
      <url>2016%2F11%2F09%2F11.%20%E7%86%9F%E6%82%89Django%E7%9A%84%E6%A8%A1%E6%9D%BF%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94Python%E7%AC%AC%E5%9B%9B%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82%2F</url>
      <content type="text"><![CDATA[熟悉Django的模板语言新建一个站点apppython3 manage.py startapp django_web 目录 templates站点资源views.py 负责去取数据和取templatesmodels.py 负责去数据库取数据settings.py 默认设置，安全设置 添加app到INSTALLED_APPS添加视图函数def index(request): # 定向到index页面 return render(request, 'index.html') 添加URLfrom django_web.views import index# app的视图函数中引入# 分配一个url 网址urlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^index/', index) #正则 ^匹配index前缀的站点 ，调用index函数] 运行 python3 manage.py runserver 发现CSS失效 引入资源文件将CSS和资源目录打包为static文件夹，将其放置在项目根目录下 django模板语言 &#123;% load static %&#125; #获取所有static路径&lt;link rel="stylesheet" type="text/css" href="&#123;% static 'css/new_blah.css' %&#125;"&gt; 设置static在settings.py中设置static STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),) request步骤 经过Url 指向于对应的View View和templates去找网页和数据 You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.Run 'python manage.py migrate' to apply them.#暂时不管 分页功能 理解上下文 使用模板语言 只做分页器 render()：渲染render(request,'html',context) 接收三个函数 request 用户点击的request x.html 我们指定模板的名称 context 上下文 ContextThere’s a Starman waiting in the sky 替换掉选中的文字其他部分不变 使用Context替换 设置context def index(request): # 定向到index页面 context = &#123; 'title': 'Just a title', 'des': 'Just a description', 'score': '1.0' &#125; return render(request, 'index.html', context) 在html中替换，对应响应的context &lt;h3&gt;&lt;a href="#"&gt;&#123;&#123; title &#125;&#125;&lt;/a&gt;&lt;/h3&gt;&lt;p class="description"&gt;&#123;&#123; des &#125;&#125;&lt;/p&gt; ​ context的值从数据库中取，Model连接数据库 Model设置django自带的是sqlite，我们自己使用的是mongodb， 在settings里引入 from mongoengine import connectconnect('zhuanzhuan', host='127.0.0.1', port=27017) 之所以在settings里引入，是因为django在运行的过程中，是先从settings中读取数据进行加载 在Model层引入 from mongoengine import * class ArtInfo(Document): # 数据库中的必须全部取出 title = StringField() img = StringField() area = StringField() price = StringField() look_time = StringField() meta = &#123; 'collection': 'item_info' # 寻找地方 &#125;for i in ArtInfo.objects[:2]: #[:2] 相当于mongo中的limit功能 print(i.title, i.img, i.price) 在View层中实例化 def index(request): # 实例化 item_info = ArtInfo.objects[:1] # 定向到index页面 context = &#123; 'title': item_info[0].title, 'des': item_info[0].area, 'score': item_info[0].price &#125; return render(request, 'index.html', context) 使用分页函数 # 调用templates视图函数def index(request): limit = 4 # 实例化 item_info = ArtInfo.objects[:1] paginatior = Paginator(item_info, limit) #每4个一页 page = request.GET.get('page', 1) # 把request变成了页码 Loaded = paginatior.page(page) # 定向到index页面 context = &#123; 'ArtInfo': Loaded &#125; return render(request, 'index.html', context) 设置HTML &#123;# 开始循环 #&#125; &#123;% for item in ArtInfo %&#125; &lt;li&gt; &lt;img src="&#123;&#123; item.img &#125;&#125;" width="100" height="91"&gt; &lt;div class="article-info"&gt; &lt;h3&gt;&lt;a href="#"&gt;&#123;&#123; item.title &#125;&#125;&lt;/a&gt;&lt;/h3&gt; &lt;p class="meta-info"&gt; &lt;span class="meta-cate"&gt;fun&lt;/span&gt; &lt;span class="meta-cate"&gt;Wow&lt;/span&gt; &lt;/p&gt; &lt;p class="description"&gt;&#123;&#123; item.area &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;div class="rate"&gt; &lt;span class="rate-score"&gt;&#123;&#123; item.price &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;div class = "main-content-pagitor"&gt;&#123;# &lt; pre 1 of 2 next&gt;#&#125; &#123;% if ArtInfo.has_previous %&#125; &lt;a href="?page=&#123;&#123; ArtInfo.previous_page_number &#125;&#125;"&gt;&lt; Pre&lt;/a&gt; &#123;% endif %&#125; &lt;span&gt; &#123;&#123; ArtInfo.number &#125;&#125; of &#123;&#123; ArtInfo.paginator.num_pages &#125;&#125;&lt;/span&gt; &#123;% if ArtInfo.has_next %&#125; &#123;% comment %&#125;如果有下一页，就显示这个连接, next_page_number &#123;% endcomment %&#125; &lt;a href="?page=&#123;&#123; ArtInfo.next_page_number &#125;&#125;"&gt;Next &gt;&lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[饿了么网上订餐流程]]></title>
      <url>2016%2F11%2F09%2F10.%20%E9%A5%BF%E4%BA%86%E4%B9%88%E7%BD%91%E4%B8%8A%E8%AE%A2%E9%A4%90%E6%B5%81%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[饿了么网上订餐流程毕业设计——网上订餐系统技术调研 检测地理位置（可以省略或简化，比如直接选择地点，因为后边会填写详细地点，所以这里无需深究） 选择商家（可以按照位置分类） 选择商品（每个商家的商品） 结算（计算） 选择收获地址和支付方式，填写详细信息（） 确定下单 如果在线支付转到支付页面 判断支付是否成功 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Node环境介绍]]></title>
      <url>2016%2F11%2F08%2F8.%20Node%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D%2F</url>
      <content type="text"><![CDATA[Node环境介绍普通的node项目环境主文件 app.js：相关的设置，包含路由的配置和一些其他重要的逻辑。这是我们开启服务后运行的。 路由：所有与页面相关的逻辑和从app.js中抽离出来的它所依赖的基础函数，比如从数据库中获取数据并将其写入HTML中 Node.js项目文件package.json：包依赖和其他元数据 node_modules中的依赖：通过package.json安装的第三方模块 数据库：一个MongoDB和元数据的实例 模板：以.jade结尾的文件 配置文件config.json：与应用安全性无关的设置，比如应用的标题 Expressnode_modules：Express.js和第三方模块的依赖都在这个目录下 views：Jade或者其他模版引擎文件 routes：包含请求处理程序的Node.js模块 db：MongoDB的种子数据和脚本 public：所有前端的静态文件，包括HTML、CSS、浏览器端的Javascript和Stylus或者其他CSS框架文件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python库安装]]></title>
      <url>2016%2F11%2F08%2F9.%20Python%E5%BA%93%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[Python库安装pip 一键安装库 pip3 install requests bs4 pymongo mongoengine jupy Ubuntu16.04问题 root@centos-512mb-nyc3-01:~# pip3 listTraceback (most recent call last): File &quot;/usr/bin/pip3&quot;, line 11, in &lt;module&gt; sys.exit(main()) File &quot;/usr/lib/python3/dist-packages/pip/__init__.py&quot;, line 215, in main locale.setlocale(locale.LC_ALL, &apos;&apos;) File &quot;/usr/lib/python3.5/locale.py&quot;, line 594, in setlocale return _setlocale(category, locale)locale.Error: unsupported locale setting# 换个命令试试root@centos-512mb-nyc3-01:~# python3 -m pip listTraceback (most recent call last): File &quot;/usr/lib/python3.5/runpy.py&quot;, line 184, in _run_module_as_main &quot;__main__&quot;, mod_spec) File &quot;/usr/lib/python3.5/runpy.py&quot;, line 85, in _run_code exec(code, run_globals) File &quot;/usr/lib/python3/dist-packages/pip/__main__.py&quot;, line 19, in &lt;module&gt; sys.exit(pip.main()) File &quot;/usr/lib/python3/dist-packages/pip/__init__.py&quot;, line 215, in main locale.setlocale(locale.LC_ALL, &apos;&apos;) File &quot;/usr/lib/python3.5/locale.py&quot;, line 594, in setlocale return _setlocale(category, locale)locale.Error: unsupported locale setting# 解决export LC_ALL=C Python的在线编译器 jupyter notebook命令会默认开启8888端口，会和surge起冲突 解决： jupyter notebook --port [自定义端口]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[博学谷直播介绍Vue]]></title>
      <url>2016%2F11%2F03%2F7.%20%E5%8D%9A%E5%AD%A6%E8%B0%B7%E7%9B%B4%E6%92%AD%E4%BB%8B%E7%BB%8DVue.js%2F</url>
      <content type="text"><![CDATA[Vue.js 客户端Javascript框架 用于数据驱动的现代web开发 实现了MVVM思想 比如设计一个注册页面传统方式： 找到用户名的文本框，捕捉鼠标偏离的事件，判断文本框的内容进行是否存在的校验 问题： 界面代码重复使用率低 需要的变化大部分是在界面上，而 应用程序的基本逻辑：把数据放到界面上显示 理想状态，界面和数据独立 结论：用数据驱动界面，把界面放置到最后 var app = new Vue(&#123; //业务逻辑抽象 data: &#123; username: &apos;&apos;, email: &apos;&apos;, &#125;&#125;) 如何使用Vue.jsSublime Vue作者建议学习顺序从基础着手 通读javascript基础 操作步骤 找出来页面最核心组成，用数据的方式描述 ​ 根据设计的结构完成ViewModel的编写 ​ &lt;intput class = ""]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu开启root——以腾讯云为例]]></title>
      <url>2016%2F11%2F03%2F6.%20Ubuntu%E5%BC%80%E5%90%AFroot%E2%80%94%E2%80%94%E4%BB%A5%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%BA%E4%BE%8B%2F</url>
      <content type="text"><![CDATA[Ubuntu默认没有启用root账户，这有利于安全，但在实际操作中，我们常常需要访问一些需要root权限才可以访问的目录，需要启动root账户 操作步骤 登陆服务器 ssh ubuntu@yoursiteIP 修改root密码 sudo passwd root 修改ssh配置 sudo vi /etc/ssh/sshd_config 找到 PermitRootLogin 这项 将其改为 yes 退出并重启ssh服务 sudo service ssh restart ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[npm install速度慢的解决方法]]></title>
      <url>2016%2F11%2F02%2F5.%20npm%20install%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[在使用npm安装的时候经常遇到npm install速度慢的情况，这是因为我们的网络和npm的服务器相隔较远，延迟很大造成的，怎么解决呢？ 使用taobao镜像有两种方式，本文中的所有代码都需要在终端中输入 一、在命令后面加参数npm install --registry=https://registry.npm.taobao.org 这代表了我们可以从taobao的服务器中来获取，就解决了速度慢的问题。 二、使用cnpm使用cnpm的目的是可以一劳永逸的代替npm命令，这样的话就方便多了 安装cnpmnpm install -g cnpm --registry=https://registry.npm.taobao.org 验证一下当发现输入命令之后，后面的网址是taobao的时候就说明已经成功了 使用taobao镜像的缺点： 不能使用publish命令 和npm官方镜像源有10分钟的延迟]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[将购买的域名配置到github pages中]]></title>
      <url>2016%2F11%2F01%2F4.%20%E5%B0%86%E8%B4%AD%E4%B9%B0%E7%9A%84%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE%E5%88%B0github%20pages%E4%B8%AD%2F</url>
      <content type="text"><![CDATA[参考 : https://help.github.com/articles/setting-up-an-apex-domain/ 在yourname.github.io的Setting中添加你的自定义域名 在域名解析中添加相应的DNS 103.245.222.133 Github pages设置301重定向购买了域名之后，我们想要让不带www的网址重定向到带www前缀的网址上面 在yourname.github.io目录下新建CNAME文件，内容是你的自定义域名比如www.magaofei.com 在域名解析那里，添加CNAME类型的记录，值为yourname.github.io macOS下查看端口和杀掉端口 Find out the process ID (PID) which is occupying the port number (e.g., 5955) you would like to free sudo lsof -i :5955 Kill the process which is currently using the port using its PID sudo kill -9 PID ##]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[配置环境]]></title>
      <url>2016%2F11%2F01%2F3.%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%2F</url>
      <content type="text"><![CDATA[配置环境使用hexo搭建来自NexT的主题 教程来自http://xiaolai.li/ note： 命令出错可能是前面没有加上sudo 每次只需要把.md文件丢到source目录下，再运行hexo g和hexo d就可以 主题配置网站http://theme-next.iissnan.com/theme-settings.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[测试]]></title>
      <url>2016%2F11%2F01%2F2.%202.4%20%E4%B8%80%E6%97%A6%E5%8F%91%E7%8E%B0%E9%9C%80%E8%A6%81%E9%87%8D%E5%A4%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E2%80%A6%E2%80%A6%2F</url>
      <content type="text"><![CDATA[测试 然后就可以在 Terminal 面板中用 hexo generate生成静态 html 文件，用 hexo server本地查看（在浏览器中用这个地址：localhost:4000），或用 hexo deploy 发布到 yourname.github.io 上去…… 以后你想发表博客文章的时候，无非就是在 source 目录中创建新的 .md 文件，而后 hexo generate，之后再 hexo deploy. 2.4 一旦发现需要重复的工作……—— 就要马上想办法要么 1)自动化，要么 2) 减少工作量。这是工程师的思考行动方式，在工程师的世界里，懒惰有另外一种用处，是积极的用处：它是用来刺激寻找提高效率的手段。普通人懒起来就什么都不干了；工程师懒起来就使劲琢磨： “怎么做才能将来不用做或者起码少做却可以实际上干更多呢？” 注意：“实际上干更多”才是重点！ 反复地敲 hexo generate、hexo server、hexo deploy 好累啊！怎么办？我们可以给命令行里反复输入的命令编制缩写…… 命令行下输入，其实就是用 Atom 打开 ~/.aliases 文件： atom ~/.aliases 在该文件下输入以下内容： alias hgs=&quot;hexo g&amp;&amp;hexo s&quot;alias hgd=&quot;hexo g&amp;&amp;hexo d&quot; 重新启动 Terminal 之后，只要输入 hgs 就是生成内容之后在 localhost:4000 里预览，输入 hgd 就是部署到服务器上……]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>2016%2F11%2F01%2F1.%20hello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new "My New Post" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
