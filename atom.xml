<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-02T04:23:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mamian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用TFHpple处理数据的请求</title>
    <link href="http://yoursite.com/2017/01/02/30.%20%E4%BD%BF%E7%94%A8TFHpple%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2017/01/02/30. 使用TFHpple处理数据的请求/</id>
    <published>2017-01-02T04:07:17.000Z</published>
    <updated>2017-01-02T04:23:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用TFHpple处理数据的请求"><a href="#使用TFHpple处理数据的请求" class="headerlink" title="使用TFHpple处理数据的请求"></a>使用TFHpple处理数据的请求</h1><p>由于App中需要抓取网页数据，也没有做后台，就在iOS App里手动检索HTML信息进行抓取，这个过程中使用到了TFHpple框架，不过我看了一些范例都是直接使用NSData来直接获取网页的Data，这样做肯定会阻塞主线程，我一直在尝试使用其他方法，但都没有成功，困扰了我很久，直到昨天看到一篇网易公开课的文章提到了（<a href="http://www.itgo.me/a/2968793659999962488/TFHpple-XPath）。" target="_blank" rel="external">http://www.itgo.me/a/2968793659999962488/TFHpple-XPath）。</a></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)wangyi &#123;</div><div class="line"><span class="comment">// 网易公开课地址</span></div><div class="line"><span class="built_in">NSString</span> *str=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://open.163.com/"</span>];</div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:[str stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</div><div class="line"><span class="comment">// UTF－8</span></div><div class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</div><div class="line">AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc]initWithRequest:request];</div><div class="line"><span class="comment">// 请求数据，设置成功与失败的回调函数</span></div><div class="line">[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, <span class="keyword">id</span> responseObject) &#123;</div><div class="line"><span class="comment">// 请求下来的整个网页数据</span></div><div class="line"><span class="built_in">NSString</span> *html = operation.responseString;</div><div class="line"><span class="comment">// 网页有gbk编码有utf8编码，全部换成utf8</span></div><div class="line"><span class="built_in">NSString</span> *utf8HtmlStr = [html stringByReplacingOccurrencesOfString:<span class="string">@"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=GBK\"&gt;"</span> withString:<span class="string">@"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;"</span>];</div><div class="line"><span class="comment">// TFHpple解析的是data，转换成data</span></div><div class="line"><span class="built_in">NSData</span> *htmlDataUTF8 = [utf8HtmlStr dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"><span class="comment">// 开始解析</span></div><div class="line">TFHpple *xpathParser = [[TFHpple alloc] initWithHTMLData:htmlDataUTF8];</div><div class="line"><span class="comment">// 查找所有的 &lt;div class="g-cell1"</span></div><div class="line"><span class="comment">// 因为首页的“小编推荐”是使用该class标示的，所以主要获取的是该种形式的小课程节目</span></div><div class="line"><span class="built_in">NSArray</span> *elements</div><div class="line">= [xpathParser searchWithXPathQuery:<span class="string">@"//div[@class='g-cell1']"</span>];</div><div class="line"><span class="comment">// 不存在则不继续执行</span></div><div class="line"><span class="keyword">if</span> ([elements count] &lt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 以下只是示例解析第一个课程，循环即可全部解析</span></div><div class="line">TFHppleElement *first = [elements firstObject];</div><div class="line"><span class="comment">// 完整写法</span></div><div class="line"><span class="built_in">NSArray</span> *arr = [first searchWithXPathQuery:<span class="string">@"//a[1]/@href"</span>];</div><div class="line">TFHppleElement *ele = [arr firstObject];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"网址链接：%@"</span>,[ele text]);</div><div class="line"><span class="comment">// 合并的写法</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"图片链接：%@"</span>,[[[first searchWithXPathQuery:<span class="string">@"//img/@src"</span>] firstObject] text]);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"标题：%@"</span>,[[[first searchWithXPathQuery:<span class="string">@"//h5"</span>] firstObject] text]);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"副标题：%@"</span>,[[[first searchWithXPathQuery:<span class="string">@"//p"</span>] firstObject] text]);</div><div class="line">&#125;failure:^(AFHTTPRequestOperation *operation, <span class="built_in">NSError</span> *error) &#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"发生错误！%@"</span>,error);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 加入队列 开始执行</span></div><div class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">[queue addOperation:operation];&#125;</div></pre></td></tr></table></figure>
<p>这个代码使用的是AFNetworking 2x的版本，不过网页已经更改了，所以这个解析已经失效了。</p>
<p>我把代码使用了之后，可以使用</p>
<p>接着我尝试把TFHpple处理HTML的这部份放到子线程去执行，参考代码<a href="http://www.jianshu.com/p/943dcb9ad632" target="_blank" rel="external">http://www.jianshu.com/p/943dcb9ad632</a></p>
<p>然后分别计算时间对比一下这三种方式。</p>
<p>我预想的结果是把处理HTML的这部份放到子线程这样处理会更快，但结果是并没有。</p>
<p><img src="/images/NSData_TFHpple_AFNetwoking对比.png" alt=""></p>
<p>结果是，直接使用AFNetwoking，并且在里面对数据进行处理是最快的，当然，我只用真机测试了5次，可能会有偏差</p>
<p>设备: iPhone5c , iOS10.2</p>
<p>代码地址: <a href="https://github.com/magaofei/iOS_Apprentice/tree/master/NSURLSessionBackgroundData" target="_blank" rel="external">https://github.com/magaofei/iOS_Apprentice/tree/master/NSURLSessionBackgroundData</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用TFHpple处理数据的请求&quot;&gt;&lt;a href=&quot;#使用TFHpple处理数据的请求&quot; class=&quot;headerlink&quot; title=&quot;使用TFHpple处理数据的请求&quot;&gt;&lt;/a&gt;使用TFHpple处理数据的请求&lt;/h1&gt;&lt;p&gt;由于App中需要抓取网页数据
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>sqlite for iOS犯的错2016年12月21日</title>
    <link href="http://yoursite.com/2016/12/21/29.%20sqlite-for-iOS%E7%8A%AF%E7%9A%84%E9%94%992016%E5%B9%B412%E6%9C%8821%E6%97%A5/"/>
    <id>http://yoursite.com/2016/12/21/29. sqlite-for-iOS犯的错2016年12月21日/</id>
    <published>2016-12-21T01:21:18.000Z</published>
    <updated>2016-12-21T01:28:12.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>Sql语句里的<code>values</code>少了<code>s</code></p>
<p>使用了<code>NSLog(@&quot;%s&quot;, sqlite3_errmsg(_db));</code>才发现错误,</p>
<p> 原因是<code>NSLog(@&quot;%s&quot;, sqlite3_errmsg(_db));</code></p>
</li>
<li><p><code>sqlite3_column_text</code>写成<code>sqlite3_column_int64</code></p>
</li>
</ol>
<ol>
<li>NSMutableArray延迟加载写的不对</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _students = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这样是老师写的, 但是它是纯代码做的, 所以控制器有alloc和init 但我使用storyboard, 所以就跳过了这一步, 通过debugging 发现数组是nil, 就说明没有成功alloc和init</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sql语句里的&lt;code&gt;values&lt;/code&gt;少了&lt;code&gt;s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用了&lt;code&gt;NSLog(@&amp;quot;%s&amp;quot;, sqlite3_errmsg(_db));&lt;/code&gt;才发现错误,&lt;/p&gt;
&lt;p&gt; 原因是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于 iPhone App 设计的几点看法和总结</title>
    <link href="http://yoursite.com/2016/12/20/28.%20%E5%85%B3%E4%BA%8E-iPhone-App-%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%87%A0%E7%82%B9%E7%9C%8B%E6%B3%95%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/12/20/28. 关于-iPhone-App-设计的几点看法和总结/</id>
    <published>2016-12-20T06:51:25.000Z</published>
    <updated>2016-12-20T07:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-iPhone-App-设计的几点看法和总结"><a href="#关于-iPhone-App-设计的几点看法和总结" class="headerlink" title="关于 iPhone App 设计的几点看法和总结"></a>关于 iPhone App 设计的几点看法和总结</h1><p>有几个原则</p>
<ol>
<li><p>比如不要使用高优先级的东西,</p>
<p>比如提示用户时, 用一个HUD显示就比Alert强制用户观看的体验要好, 同理, 你在微信朋友圈点击那个评论图标时, 不是使用的弹窗, 而是在原来区域做的改变, 这点影响就有了良好的用户体验, 不警示用户, 优秀的设计就是这样, 粗略的设计就是将信息粗暴的反馈给用户, 而不管合不合理, 我们应当将反馈分级别的呈现, 而不是一以贯之.</p>
</li>
<li><p>一贯性的图标</p>
<p>图标是用户每天接触App最多的东西, 极大的影响和吸引用户, 正因为如此, 有不少App愿意把活动呈现在此, 比如阿里系的App, 这很明显是为了运营, 但这影响到了用户体验, 就不应该去做, 如果阿里真的把用户放在第一位, 就不应该干这样的事</p>
</li>
<li><p>遵循官方推荐的设计</p>
<p>一个平台有着自己的设计理念,在这个平台中的产品最好能做到一致, 这样用户在使用就能够方便的上手, 让用户方便上手, 自然也能够留住用户</p>
</li>
<li><p>不要大的改变, 只需要增增补补</p>
<p>一款产品忌讳频繁的改变, 我举个支付宝的例子, 最早只是一款钱包App, 后来越来越重, 沉重的同时也频繁改版, 直到现在你也不知道他会改到哪里去, 但有一点是肯定的, 就是需求是不断变化的, 呵呵. 不断改版的同时也意味着, 没想清楚. </p>
<p>每一次改版都加大了老用户的上手程度和管理的混乱, 导致用户对升级新的版本没有兴趣</p>
</li>
<li><p>多用原生</p>
<p>现在有跨平台开发解决方案, 但还不够成熟, 关键是体验不太好, 建议多用原生</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于-iPhone-App-设计的几点看法和总结&quot;&gt;&lt;a href=&quot;#关于-iPhone-App-设计的几点看法和总结&quot; class=&quot;headerlink&quot; title=&quot;关于 iPhone App 设计的几点看法和总结&quot;&gt;&lt;/a&gt;关于 iPhone App 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS面试题总结</title>
    <link href="http://yoursite.com/2016/12/15/27.%20iOS%E9%9D%A2%E8%AF%95/"/>
    <id>http://yoursite.com/2016/12/15/27. iOS面试/</id>
    <published>2016-12-15T05:56:27.000Z</published>
    <updated>2016-12-20T12:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="copy关键字的作用"><a href="#copy关键字的作用" class="headerlink" title="copy关键字的作用"></a>copy关键字的作用</h3><p>常用于NSString、NSArray、NSDictionary，防止用可变类型来作为子类，如果子类是一个可变类型，则会返回一个不可变类型给他，保护了</p>
<h3 id="循环引用的场景"><a href="#循环引用的场景" class="headerlink" title="循环引用的场景"></a>循环引用的场景</h3><p>父子关系时</p>
<h3 id="事件的传递"><a href="#事件的传递" class="headerlink" title="事件的传递"></a>事件的传递</h3><p>UIApplication</p>
<p>UIWindow</p>
<p>遍历</p>
<ul>
<li>事件的响应</li>
</ul>
<h4 id="图片切圆角"><a href="#图片切圆角" class="headerlink" title="图片切圆角"></a>图片切圆角</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;copy关键字的作用&quot;&gt;&lt;a href=&quot;#copy关键字的作用&quot; class=&quot;headerlink&quot; title=&quot;copy关键字的作用&quot;&gt;&lt;/a&gt;copy关键字的作用&lt;/h3&gt;&lt;p&gt;常用于NSString、NSArray、NSDictionary，防止用可变
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>data转NSString的Encoding问题</title>
    <link href="http://yoursite.com/2016/12/14/26.%20data%E8%BD%ACNSString%E7%9A%84Encoding%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/12/14/26. data转NSString的Encoding问题/</id>
    <published>2016-12-14T10:52:36.000Z</published>
    <updated>2016-12-14T11:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="data转NSString的Encoding问题"><a href="#data转NSString的Encoding问题" class="headerlink" title="data转NSString的Encoding问题"></a>data转NSString的Encoding问题</h1><p>在做安工助手这款App的时候需要抓取网页HTML，我想把抓取放到后台来进行，于是使用<code>NSURLSessionDataTask</code>，却发现了一个BUG，死活获取不到数据，不知道为什么。今天一步步排查，终于找到原因了，因为<code>Encoding</code>的问题</p>
<p>不完整代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSURLSessionDataTask</span> *task = [_session dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"task = %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">     <span class="built_in">NSString</span> *str = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">     </div><div class="line">     <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line"></div><div class="line">         _dataTextView.text = str;</div><div class="line">         </div><div class="line">         <span class="built_in">NSLog</span>(<span class="string">@"_dataTextView %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">     &#125;);</div><div class="line"> &#125;];</div></pre></td></tr></table></figure>
<p>设置断点后的结果是，data是有数据的，但<code>str</code>是没数据的，这我就很纳闷了，不可能啊，试了其他代码之后，终于想到，难道是<code>encoding</code>的问题？我果断把请求的URL换成百度，成功了…这真是个坑，我们在将网页的NSData转换为NSString，一定要看好网页原来是什么格式的</p>
<p>例如我这个网页的编码是GB2312</p>
<p><img src="../images/dataNStringencoding.png" alt=""></p>
<p>那么就应该需要响应的编码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSStringEncoding</span> enc = <span class="built_in">CFStringConvertEncodingToNSStringEncoding</span>(kCFStringEncodingGB_18030_2000);</div><div class="line"></div><div class="line"><span class="built_in">NSString</span> *str = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:enc];</div></pre></td></tr></table></figure>
<p>运行以后，正常。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;data转NSString的Encoding问题&quot;&gt;&lt;a href=&quot;#data转NSString的Encoding问题&quot; class=&quot;headerlink&quot; title=&quot;data转NSString的Encoding问题&quot;&gt;&lt;/a&gt;data转NSString的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ruby on rails学习</title>
    <link href="http://yoursite.com/2016/12/09/25.%20ruby%20on%20rails%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/12/09/25. ruby on rails学习/</id>
    <published>2016-12-09T01:47:05.000Z</published>
    <updated>2016-12-12T12:03:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ruby-on-rails学习"><a href="#ruby-on-rails学习" class="headerlink" title="ruby on rails学习"></a>ruby on rails学习</h1><p>（<strong>档案／资料夹 ：</strong>用途 ）</p>
<p><strong>app/ ：</strong> 包含你应用程式的 controllers、models、views。你要改的东西大多是这些。</p>
<p><strong>config/ ：</strong> 设定应用程式的执行阶段规则、路由设定（routes）、资料库等等。</p>
<p><strong>db/ ：</strong>显示你目前资料库的 schema（结构定义），以及资料库的 migrations。</p>
<p><strong>public/ ：</strong>这是唯一一个资料夹会是放什么就出现什么的。如果你把档案放里面，server 会直接回传，不会经过 Rails 的处理。</p>
<p><strong>app/assets/ ：</strong>你会要把图片、JavaScript、stylesheets (CSS) 还有其他静态档案放在里面。现代的 Rails 应用程式使用一种叫做 Assets Pipeline 的东西，把在这资料夹里面的所有 JavaScript 和 CSS 档合并成一个档案来加速。</p>
<p><code>rails new</code> 还建立了其他很多东西。大概可以写一本书来讲，所以我们现在先无视它们。</p>
<h3 id="new-topics"><a href="#new-topics" class="headerlink" title="new topics"></a>new topics</h3><p>这些网页到底怎么建出来，又是如何连在一起的呢？Rails 的 scaffold 帮你处理好了。</p>
<p>我们来仔细瞧瞧 rails 帮我们建立的档案：</p>
<ul>
<li><code>app/models/topic.rb</code></li>
<li>这个档案里面有我们的 topic model 的程式码。如果你仔细看，他其实几乎是空白的。 对资料的新增、读取、更新、删除操作在 Rails 是内建的。</li>
<li><code>app/views/topics</code></li>
<li>这个资料夹里面有我们的 topics model 的 view 的程式码。 你刚刚使用的表单的程式码就放在这里面。Rails 会帮你建好这些档案作为 scaffold 的一部分。</li>
<li>如果你以前写过 HTML，这些程式你应该不陌生。 Rails 的 view 只是 HTML 加上一些用来显示资料库来的资料的程式。</li>
<li><code>app/views/topics/index.html.erb</code><ul>
<li>这个程式是用在列出所有 topics 的页面。</li>
<li>index 是用来表示一个网站或网站的一部分的“预设”页面。当你打开 <a href="http://localhost:3000/topics" target="_blank" rel="external">http://localhost:3000/topics</a> 的时候，topics 的 index 页面会传送到你的电脑上。 </li>
</ul>
</li>
<li><code>app/views/topics/show.html.erb</code><ul>
<li>是当你在 <code>Listing topics</code> 按一下 <code>show</code> 时会看到的页面。 </li>
</ul>
</li>
<li><code>app/views/topics/new.html.erb</code><ul>
<li>是当你按一下 <code>New Topic</code> 时会看到的页面。</li>
<li><code>app/views/topics/edit.html.erb</code></li>
<li>是当你按一下 <code>Edit</code> 时会看到的页面。 </li>
</ul>
</li>
<li><code>app/views/topics/_form.html.erb</code><ul>
<li>你或许注意到了，新增 topic 和编辑 topics 的页面长得很像。这是因为他们都使用了这个档案来显示表单。 这种档案称作 <code>partial</code>，因为他只有网页里面一部分的内容。Partial 的档名一定是底线开头的。 </li>
<li>挑战题：你可以找到 partial 是在 new.html.erb 和 edit.html.erb 的哪一行程式被引用的吗？ </li>
</ul>
</li>
<li><code>app/controllers/topics_controller.rb</code><ul>
<li>这称为 controller 档，Rails 自动透过 scaffold 产生的。</li>
<li>如果你打开来看，你会看到每一个 view ，除了 _form.html.erb 之外都对应到一个 method（开头是 def）。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ruby-on-rails学习&quot;&gt;&lt;a href=&quot;#ruby-on-rails学习&quot; class=&quot;headerlink&quot; title=&quot;ruby on rails学习&quot;&gt;&lt;/a&gt;ruby on rails学习&lt;/h1&gt;&lt;p&gt;（&lt;strong&gt;档案／资料夹 ：&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mongod 使用</title>
    <link href="http://yoursite.com/2016/12/08/24.%20mongod-%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/12/08/24. mongod-使用/</id>
    <published>2016-12-08T11:12:32.000Z</published>
    <updated>2016-12-08T11:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mongod-使用"><a href="#mongod-使用" class="headerlink" title="mongod 使用"></a>mongod 使用</h1><p>进入Shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mongo</div></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mongod</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mongod-使用&quot;&gt;&lt;a href=&quot;#mongod-使用&quot; class=&quot;headerlink&quot; title=&quot;mongod 使用&quot;&gt;&lt;/a&gt;mongod 使用&lt;/h1&gt;&lt;p&gt;进入Shell&lt;/p&gt;
&lt;figure class=&quot;highlight plain
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>autoLayout</title>
    <link href="http://yoursite.com/2016/12/07/23.%20autoLayoutAndFrame/"/>
    <id>http://yoursite.com/2016/12/07/23. autoLayoutAndFrame/</id>
    <published>2016-12-07T14:10:20.000Z</published>
    <updated>2017-01-02T04:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="autoLayout"><a href="#autoLayout" class="headerlink" title="autoLayout"></a>autoLayout</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">(<span class="keyword">void</span>)setNeedsUpdateConstraints</div><div class="line">- (<span class="keyword">void</span>)updateConstraintsIfNeeded</div></pre></td></tr></table></figure>
<h2 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setNeedsLayout</div><div class="line">- (<span class="keyword">void</span>)layoutIfNeeded</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)layoutSubviews</div><div class="line">  <span class="comment">// 更改子view的布局</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;autoLayout&quot;&gt;&lt;a href=&quot;#autoLayout&quot; class=&quot;headerlink&quot; title=&quot;autoLayout&quot;&gt;&lt;/a&gt;autoLayout&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>retainCount并不能返回正确的数值</title>
    <link href="http://yoursite.com/2016/12/07/22.%20retainCount%E5%B9%B6%E4%B8%8D%E8%83%BD%E8%BF%94%E5%9B%9E%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%95%B0%E5%80%BC/"/>
    <id>http://yoursite.com/2016/12/07/22. retainCount并不能返回正确的数值/</id>
    <published>2016-12-07T10:15:23.000Z</published>
    <updated>2016-12-07T10:24:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="retainCount并不能返回正确的数值"><a href="#retainCount并不能返回正确的数值" class="headerlink" title="retainCount并不能返回正确的数值"></a>retainCount并不能返回正确的数值</h1><p>我想通过<code>retainCount</code>来理解引用计数，在网上搜了搜，看到了这个方法</p>
<p>相同意思的两行代码，却返回了不同的结果</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSDate</span> *now = [<span class="built_in">NSDate</span> date];</div><div class="line">        <span class="built_in">NSDate</span> *nowinit = [[<span class="built_in">NSDate</span> alloc] init];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"now = %@, retain count = %ld"</span>, now,</div><div class="line">              <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)(now)));</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"nowinit = %@, retain count = %ld"</span>, nowinit,</div><div class="line">              <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)(nowinit)));</div></pre></td></tr></table></figure>
<p>retainCount的值</p>
<p><code>[NSDate date]</code>输出的结果是2</p>
<p><code>[[NSDate alloc] init]</code>输出的结果是1</p>
<p>这让我大为不解，从结果来看，他们是完全相同的，不应该会是这样，如果不同的话，其他人也应该会指出的，但我没发现有人说出来。</p>
<p>我尝试Google了一下，Google上第一个就是 <a href="http://blog.csdn.net/wzzvictory/article/details/9626017" target="_blank" rel="external">Cocoa中retainCount返回值不准的原因</a>这个，看了之后我才发现，Apple也说了，这个东西不准，我干，既然不准，这个方法还存在干嘛。我有看到<a href="http://stackoverflow.com/questions/4636146/when-to-use-retaincount" target="_blank" rel="external">StackOverFlow</a>上面的回答，他劝我们使用 Instruments 中的 Leaks 和 Zombies 来检测泄露的内存和僵尸对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;retainCount并不能返回正确的数值&quot;&gt;&lt;a href=&quot;#retainCount并不能返回正确的数值&quot; class=&quot;headerlink&quot; title=&quot;retainCount并不能返回正确的数值&quot;&gt;&lt;/a&gt;retainCount并不能返回正确的数值&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Genymotion Android模拟器</title>
    <link href="http://yoursite.com/2016/11/28/21.%20Genymotion%20Android%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    <id>http://yoursite.com/2016/11/28/21. Genymotion Android模拟器/</id>
    <published>2016-11-28T08:19:40.000Z</published>
    <updated>2016-12-08T11:00:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Genymotion-Android模拟器"><a href="#Genymotion-Android模拟器" class="headerlink" title="Genymotion Android模拟器"></a>Genymotion Android模拟器</h1><p>想试试用Charles对AndroidApp 抓包，谁知道模拟器这么难调试</p>
<p>记录一下</p>
<p>Genymotion网络为(NAT) </p>
<p>用模拟器访问本机地址为 10.0.3.2</p>
<p>我的Charles代理端口为7777，所以就设置上了</p>
<p>Mac 上启用 Surge 后，虚拟机的「网络设置-代理」里填上对应的 IP 地址就可以让虚拟机也能走代理，如下图所示假定 Mac 里的代理设置是 127.0.0.1:6152，通过查看虚拟机的 IP 可以推断出 Mac 作为主机的 IP 是 10.211.55.2，代理设置里填写 10.211.55.2:6152 即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Genymotion-Android模拟器&quot;&gt;&lt;a href=&quot;#Genymotion-Android模拟器&quot; class=&quot;headerlink&quot; title=&quot;Genymotion Android模拟器&quot;&gt;&lt;/a&gt;Genymotion Android模拟器&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法学习第一节</title>
    <link href="http://yoursite.com/2016/11/26/20.%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>http://yoursite.com/2016/11/26/20. 算法学习第一节/</id>
    <published>2016-11-26T11:14:22.000Z</published>
    <updated>2016-11-27T13:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dynamic-Connectivity-动态连通性"><a href="#Dynamic-Connectivity-动态连通性" class="headerlink" title="Dynamic Connectivity(动态连通性)"></a>Dynamic Connectivity(动态连通性)</h1><p>Question：</p>
<p>How many connected components result after performing the following sequence of <em>union</em> operations on a set of 10 items?</p>
<p>1-2 3-4 5-6 7-8 7-9 2-8 0-5 1-9</p>
<p>Answer:</p>
<p>3</p>
<p>个人见解：这个问题是说，有几个连通的集合，比如1-2，说明1和2之间是连接的，那么1-2 和 2-8 说明1到8之间是连通状态，那么他们三个是一个集合，由此计算，总共有3个集合</p>
<h3 id="Quick-Find（快速查找、贪心算法）"><a href="#Quick-Find（快速查找、贪心算法）" class="headerlink" title="Quick Find（快速查找、贪心算法）"></a>Quick Find（快速查找、贪心算法）</h3><p>code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindUF</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] id;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">QuickFindUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)  <span class="comment">// set id of each object to itself</span></div><div class="line">      id[i] = i;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;  <span class="comment">//check whether p and q are in the same component</span></div><div class="line">    <span class="keyword">return</span> id[p] == id[q];</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;  <span class="comment">// change all entries with id[p] to id[q]</span></div><div class="line">    <span class="keyword">int</span> pid = id[p];</div><div class="line">    <span class="keyword">int</span> qid = id[q];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) </div><div class="line">      <span class="keyword">if</span> (id[i] == pid) id[i] = qid;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>将连接到的数字更改为相同数字</li>
<li>相同的数组元素就意味着连通</li>
</ol>
<p>时间复杂度</p>
<p>缺点 时间复杂度太大</p>
<h1 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick Union"></a>Quick Union</h1><p>把数组看作一组树，数组中每一项是它在树中的父节点</p>
<p>Question:</p>
<p>Suppose that in a quick-union data structure on 10 elements that the id[] array is </p>
<p>0 9 6 5 4 2 61 0 5</p>
<p>What are the roots of 3 and 7, respectively?</p>
<p>Answer:</p>
<p>6 and 6</p>
<p>The root of 3 is 6: 3-&gt;5-&gt;2-&gt;6</p>
<p>The root of 7 is 6: 7-&gt;1-&gt;9-&gt;5-&gt;2-&gt;6</p>
<p><img src="/images/QuickUnion1.png" alt="QuickUnion1"> </p>
<p>和Quick Find的区别在于，是用相同根节点来表示数组中相同的元素，并且有利于合并。在合并树的时候，只需要改变一个值，比如把p这个树合并到q中，只需要更改<code>id[9]</code>的值为6即可，这就意味着9这个结点的根节点是6，这样其他值就无需更改，减少了操作</p>
<p>code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnionUF</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] id;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">QuickUnionUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">      id[i] = i;  <span class="comment">//set id of each to itself</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  <span class="comment">// chase parent pointers until reach root</span></div><div class="line">    <span class="keyword">while</span> (i != id[i]) </div><div class="line">      i = id[i];</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cinnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123; <span class="comment">//check if p and q have same root</span></div><div class="line">    <span class="keyword">return</span> root(p) == root(q);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;  <span class="comment">// change root of p to point to root of q</span></div><div class="line">    <span class="keyword">int</span> i = root(p);</div><div class="line">    <span class="keyword">int</span> j = root(q);</div><div class="line">    id[j] = j;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">algorithm</th>
<th style="text-align:center">initialize</th>
<th style="text-align:center">union</th>
<th style="text-align:center">find</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">quick-find</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">quick-union</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
</tbody>
</table>
<p>to slow</p>
<p>在查找一个高度很高的树时，每一次都需要回溯整棵树，浪费时间，每一次查找都是对数组的一次遍历</p>
<h1 id="Quick-Union-Improvements"><a href="#Quick-Union-Improvements" class="headerlink" title="Quick-Union Improvements"></a>Quick-Union Improvements</h1><p>在实现quick-union的时候执行一些操作避免得到很高的树，如果一个大树和小树合并，避免将大树放在下面，那将会导致更高的树</p>
<p>在带权算法中，总是将小的树放在下面</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dynamic-Connectivity-动态连通性&quot;&gt;&lt;a href=&quot;#Dynamic-Connectivity-动态连通性&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Connectivity(动态连通性)&quot;&gt;&lt;/a&gt;Dynamic
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为什么要把插座变量声明为弱引用？</title>
    <link href="http://yoursite.com/2016/11/25/19.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8A%8A%E6%8F%92%E5%BA%A7%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E4%B8%BA%E5%BC%B1%E5%BC%95%E7%94%A8%EF%BC%9F/"/>
    <id>http://yoursite.com/2016/11/25/19. 为什么要把插座变量声明为弱引用？/</id>
    <published>2016-11-25T02:33:07.000Z</published>
    <updated>2016-11-25T08:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS上强引用循环的几处场景"><a href="#iOS上强引用循环的几处场景" class="headerlink" title="iOS上强引用循环的几处场景"></a>iOS上强引用循环的几处场景</h1><h3 id="为什么要把插座变量声明为弱引用？"><a href="#为什么要把插座变量声明为弱引用？" class="headerlink" title="为什么要把插座变量声明为弱引用？"></a>为什么要把插座变量声明为弱引用？</h3><p>将插座变量声明为弱引用是一个编程约定，当系统的可用内存偏少时，视图控制器会自动释放其视图并在之后需要显示时再创建。因此，视图控制器应该使用弱引用特性的插座变量指向view的子视图，以便在释放view时同时释放view的所有子视图</p>
<p>来自《iOSProgramming》4th edition</p>
<h3 id="委托弱引用"><a href="#委托弱引用" class="headerlink" title="委托弱引用"></a>委托弱引用</h3><p>对象及其委托之间产生强引用循环。例如<code>BNRHypnosisViewController</code>是<code>UITextfield</code>对象的委托，而且<code>UITextfield</code>对象是<code>BNRHypnosisViewController</code>的强引用属性，如果<code>UITextfield</code>对象再对其委托保持强引用，就会在两者之间产生强引用循环，很容易造成内存泄露</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS上强引用循环的几处场景&quot;&gt;&lt;a href=&quot;#iOS上强引用循环的几处场景&quot; class=&quot;headerlink&quot; title=&quot;iOS上强引用循环的几处场景&quot;&gt;&lt;/a&gt;iOS上强引用循环的几处场景&lt;/h1&gt;&lt;h3 id=&quot;为什么要把插座变量声明为弱引用？&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Objective-C属性声明的关键字</title>
    <link href="http://yoursite.com/2016/11/23/18.%20%E5%B1%9E%E6%80%A7%E5%A3%B0%E6%98%8E%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2016/11/23/18. 属性声明的关键字/</id>
    <published>2016-11-23T10:44:11.000Z</published>
    <updated>2016-11-24T06:17:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Objective-C声明属性的关键字介绍"><a href="#Objective-C声明属性的关键字介绍" class="headerlink" title="Objective-C声明属性的关键字介绍"></a>Objective-C声明属性的关键字介绍</h1><h3 id="readonly和readwrite"><a href="#readonly和readwrite" class="headerlink" title="readonly和readwrite"></a><code>readonly</code>和<code>readwrite</code></h3><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>只有getter方法，没有setter方法，杜绝了从外部访问属性的可能，但是在本身也无法使用self调用方法</p>
<p>解决方法：把属性的声明写在.m文件中，可以避免外界的访问，也可以在本身使用self调用方法</p>
<p>默认是readwrite</p>
<h3 id="strong-vs-weak"><a href="#strong-vs-weak" class="headerlink" title="strong vs weak"></a>strong vs weak</h3><p>不同</p>
<ul>
<li>引用计数+1</li>
</ul>
<p>strong是强引用，属性声明时默认就是强引用</p>
<h4 id="注意：强引用循环-循环引用现象"><a href="#注意：强引用循环-循环引用现象" class="headerlink" title="注意：强引用循环/循环引用现象"></a>注意：强引用循环/循环引用现象</h4><p>说明：循环引用是指，两个对象之间相互强引用，导致无法被释放，造成内存泄露。一般是存在父子关系的时候容易发生这种现象，比如两个包类，其中背包里面拥有钱包。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 来自《iOS编程》第四版</span></div><div class="line"><span class="comment">// BNRItem.h</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BNRItem *containedItem;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BNRItem *container;</div><div class="line"></div><div class="line"><span class="comment">// BNRItem.m</span></div><div class="line">- (<span class="keyword">void</span>)setContainedItem:(BNRItem *)containedItem &#123;</div><div class="line">    _containedItem = containedItem;</div><div class="line">  <span class="comment">// 将item加入容纳它的BNRItem对象时，</span></div><div class="line">  <span class="comment">// 会将它的container实例变量指向容纳它的对象</span></div><div class="line">    <span class="keyword">self</span>.containedItem.container = <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Destroyed %@"</span>, <span class="keyword">self</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"BNRItem.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 创建一个NSMutableArray对象，并用items变量保存该对象的地址</span></div><div class="line">        <span class="built_in">NSMutableArray</span> *items = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">        BNRItem *backpack = [[BNRItem alloc] initWithItemName:<span class="string">@"Backpack"</span>];</div><div class="line">        [items addObject:backpack];</div><div class="line">        </div><div class="line">        BNRItem *calculator = [[BNRItem alloc] initWithItemName:<span class="string">@"Calculator"</span>];</div><div class="line">        [items addObject:calculator];</div><div class="line">        </div><div class="line">        backpack.containedItem = calculator;</div><div class="line">        </div><div class="line">        backpack = <span class="literal">nil</span>;</div><div class="line">        calculator = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">for</span> (BNRItem *item <span class="keyword">in</span> items) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, item);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Setting items to nil...."</span>);</div><div class="line">        items = <span class="literal">nil</span>; </div><div class="line">    &#125;</div><div class="line">  <span class="comment">//此时输出结果是</span></div><div class="line">  <span class="comment">/*</span></div><div class="line">  2016-11-24 13:50:44.023481 RandomItems[36837:2040846] Backpack () :Worth $0, recorded on 2016-11-24 05:50:44 +0000</div><div class="line">2016-11-24 13:50:44.023586 RandomItems[36837:2040846] Calculator () :Worth $0, recorded on 2016-11-24 05:50:44 +0000</div><div class="line">2016-11-24 13:50:44.023605 RandomItems[36837:2040846] Setting items to nil....</div><div class="line">Program ended with exit code: 0</div><div class="line">  </div><div class="line">  */</div></pre></td></tr></table></figure>
<p>由于我们重写了dealloc方法，在对象即将被释放时，应该调用dealloc方法，这里并没有调用，说明这两个对象并没有正常释放。</p>
<p>首先确定父子关系，确定之后，让父对象拥有子对象，子对象不能拥有父对象，比如backpack是父对象，calculator是子对象，根据这个规则名，将backpack指向<code>calculator(_containedItem)</code>的指针保留为强引用，将calculator指向<code>backpack(_container)</code>的指针保留为弱引用。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) BNRItem *container;</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="comment">/* </span></div><div class="line">2016-11-24 14:10:18.675480 RandomItems[37054:2053319] Backpack () :Worth $0, recorded on 2016-11-24 06:10:18 +0000</div><div class="line">2016-11-24 14:10:18.675578 RandomItems[37054:2053319] Calculator () :Worth $0, recorded on 2016-11-24 06:10:18 +0000</div><div class="line">2016-11-24 14:10:18.675595 RandomItems[37054:2053319] Setting items to nil....</div><div class="line">2016-11-24 14:10:18.675635 RandomItems[37054:2053319] Destroyed Backpack () :Worth $0, recorded on 2016-11-24 06:10:18 +0000</div><div class="line">2016-11-24 14:10:18.675929 RandomItems[37054:2053319] Destroyed Calculator () :Worth $0, recorded on </div><div class="line"></div><div class="line">*/</div></pre></td></tr></table></figure>
<p>比如背包和钱包是同一品牌的产品，我们用一个类来代替，类中有两个属性，(containedItem)一个是里面放了什么东西，(container)一个是被什么东西包含了，在把钱包放入背包后，背包的containedItem指向了钱包，而钱包的container指向了背包，就造成了循环引用，解决方法是，把钱包的指向改为弱引用。</p>
<h3 id="strong-vs-assign"><a href="#strong-vs-assign" class="headerlink" title="strong vs assign"></a>strong vs assign</h3><p>不同</p>
<ul>
<li>strong修饰OC对象</li>
<li>strong强引用，引用计数+1</li>
</ul>
<ul>
<li>assign修饰非OC对象</li>
<li>assign拷贝值，不做引用计数</li>
</ul>
<p>assign可以用在非OC对象上吗？</p>
<p>可以，但不会做引用计数+1</p>
<h3 id="weak-vs-assign"><a href="#weak-vs-assign" class="headerlink" title="weak vs assign"></a>weak vs assign</h3><p>相同</p>
<ul>
<li>可以修饰OC对象</li>
<li>不做强引用，引用计数不加1</li>
</ul>
<p>不同</p>
<ul>
<li>weak在对象释放时自动置为nil</li>
<li>assign保留原始值，释放对象时不会置为nil（不安全）(unsafe_unretained)</li>
</ul>
<p>场景：在对象被释放之后，weak会将对象置为nil，准确的说是对象的地址置为nil，而assign则不会，所以就有可能发生一种现象，如果对象被释放了，而assign修饰的对象的指针还在指向着那块内存地址，当其他对象使用了这块内存地址时，就容易发生冲突，基础类型不会发生这种情况，所以我们应该使用weak来修饰对象，用assign来修饰基础类型。</p>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>使用copy关键字声明属性，在使用过程中，内部会调用copyWithZone方法，重新生成一个新的不可变的类型并赋值返回，这样做的好处是，当拥有一个可变类型的子类来使用时，就可以避免可变类型的子类对象进行的反复修改，避免导致不可控现象。</p>
<p>举例说明</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="comment">// insert code here...</span></div><div class="line">        </div><div class="line">        <span class="built_in">NSMutableString</span> *mutableString = [[<span class="built_in">NSMutableString</span> alloc] init];</div><div class="line">        mutableString = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"1234"</span>];</div><div class="line">        Person *p1 = [[Person alloc] init];</div><div class="line">        </div><div class="line">        p1.name = mutableString;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p1.name = %@ --&gt; %p"</span>, p1.name, p1.name);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"mutableString = %@ --&gt; %p"</span>, mutableString, mutableString);</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"appendString之后"</span>);</div><div class="line">        [mutableString appendString:<span class="string">@"5"</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p1.name = %@"</span>, p1.name);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"mutableString = %@"</span>, mutableString);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用copy关键字声明的name</span></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">2016-11-24 13:25:12.320037 copy[36455:2025654] p1.name = 1234 --&gt; 0x3433323145</div><div class="line">2016-11-24 13:25:12.321110 copy[36455:2025654] mutableString = 1234 --&gt; 0x1003065a0</div><div class="line">2016-11-24 13:25:12.321189 copy[36455:2025654] appendString之后</div><div class="line">2016-11-24 13:25:12.321433 copy[36455:2025654] p1.name = 1234</div><div class="line">2016-11-24 13:25:12.321475 copy[36455:2025654] mutableString = 12345</div><div class="line"></div><div class="line">*/</div></pre></td></tr></table></figure>
<p>可以看到，在执行完毕<code>p1.name = mutableString;</code>之后，两个指针的地址就不同了，这就是因为重新生成了一个地址来指向<code>p1.name</code>，并且是不可变类型的。而<code>mutableString</code>还在那里。</p>
<p>缺点：频繁使用会造成内存的浪费，所以我们只在必要时使用</p>
<h3 id="nonatomic-vs-atomic"><a href="#nonatomic-vs-atomic" class="headerlink" title="nonatomic vs atomic"></a>nonatomic vs atomic</h3><p>在iOS上我们用nonatomic，默认时atomic，所以我们要将其声明</p>
<p>说明，两者的区别是使用时保证线程安全，在多线程中调用属性可能会发生线程锁的问题，不过苹果声明，在iOS上不必考虑这个问题，缺点是会影响性能。</p>
<h3 id="getter-vs-setter"><a href="#getter-vs-setter" class="headerlink" title="getter vs setter"></a>getter vs setter</h3><p>可以用来指定getter和setter的方法名，常用于BOOL中</p>
<p>如有错误，欢迎指正</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Objective-C声明属性的关键字介绍&quot;&gt;&lt;a href=&quot;#Objective-C声明属性的关键字介绍&quot; class=&quot;headerlink&quot; title=&quot;Objective-C声明属性的关键字介绍&quot;&gt;&lt;/a&gt;Objective-C声明属性的关键字介绍&lt;/
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>指针变量的写法</title>
    <link href="http://yoursite.com/2016/11/23/17.%20%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/23/17. 指针变量的写法/</id>
    <published>2016-11-23T04:56:24.000Z</published>
    <updated>2016-11-23T05:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针变量的写法"><a href="#指针变量的写法" class="headerlink" title="指针变量的写法"></a>指针变量的写法</h1><p>在刚学习C语言的时候，我对于指针很畏惧，很大程度上是因为它那个恶心的<code>*</code>，后来接触到了以后，发现确实挺恶心的</p>
<p>关于指针变量的写法不外乎这几种</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> *foo;</div><div class="line"><span class="keyword">int</span> * foo;</div><div class="line"><span class="keyword">int</span>* foo;</div></pre></td></tr></table></figure>
<p>第一种最流行，它写在了变量名前面，能够很清晰的表明这是个指针变量，但我觉得也有问题，为什么？先举个例子</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">foo = &amp;a;</div><div class="line">*foo = <span class="number">100</span>;</div></pre></td></tr></table></figure>
<p>注意到了吗？</p>
<p>在使用指针变量的时候，我们不会把那个<code>*</code>再写出来了，反而，如果你写出来的话，代表的意思就不是指针变量了，而是指针变量所指向变量。</p>
<p>如果我写了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> *foo;</div><div class="line">foo = &amp;a;</div></pre></td></tr></table></figure>
<p>我会感觉到这样的代码，让我有一点歧义，明明上面的foo变量在声明时带上了*表明它是一个指针变量，而下面的带上了就成了另外一种意思，所以我有点讨厌这样的写法。</p>
<p>第二种写法，很清晰，但也很分散，这样的代码估计很少有人写，另外也有一点歧义，太像乘<code>*</code>了</p>
<p>第三种写法，直接写在类型的后面，写的人比第二种多一些，我觉得不错，避免了第一种的歧义。</p>
<p>不管你怎么写，在实际当中肯定还是要遵守团队的规范</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;指针变量的写法&quot;&gt;&lt;a href=&quot;#指针变量的写法&quot; class=&quot;headerlink&quot; title=&quot;指针变量的写法&quot;&gt;&lt;/a&gt;指针变量的写法&lt;/h1&gt;&lt;p&gt;在刚学习C语言的时候，我对于指针很畏惧，很大程度上是因为它那个恶心的&lt;code&gt;*&lt;/code&gt;，后
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS界面开发（基础篇）主观题考试</title>
    <link href="http://yoursite.com/2016/11/21/16.%20iOS%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89%E4%B8%BB%E8%A7%82%E9%A2%98%E8%80%83%E8%AF%95/"/>
    <id>http://yoursite.com/2016/11/21/16. iOS界面开发（基础篇）主观题考试/</id>
    <published>2016-11-21T06:15:00.000Z</published>
    <updated>2016-11-21T06:16:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS界面开发（基础篇）主观题考试"><a href="#iOS界面开发（基础篇）主观题考试" class="headerlink" title="iOS界面开发（基础篇）主观题考试"></a>iOS界面开发（基础篇）主观题考试</h1><p><img src="http://nos.netease.com/edu-image/534CA7839EC540CB7C946BCEB1DEE313.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="img"></p>
<p>要求：</p>
<ol>
<li><p>使用导航栏和UITableViewController构造一个和上面截图基本类似界面</p>
<p><strong>界面只要求布局方位一致即可，不要求位置间距完全一致。每个商品Cell的 粉色字体 部分（限时购、特价、限购X件），不需要实现，也不用占位置</strong></p>
<p>​</p>
</li>
<li><p>导航栏中间Title为 购物车（商品种类数量），例如上图是三类商品，那就是 购物车(3)，如果删除了一个商品，需要同步变成 购物车(2)</p>
</li>
<li><p>导航栏右侧的编辑和图标，可以不响应动作，但是需要显示出来</p>
</li>
<li><p>购物车里面的所有商品按照仓库分组，也就是说数据结构是：</p>
<p>[ 仓库1 : [商品1, 商品2, …], 仓库2 : [商品1, 商品2, 商品3, …] ]</p>
</li>
<li><p>每个仓库的Section由：仓库名称、商品列表、仓库结算信息组成</p>
</li>
<li><p>仓库名称左侧选择按钮：</p>
<p>a. 点击选中，该Section下的所有商品列表需要选中</p>
<p>b. 取消选中，该Section下的所有商品列表需要取消选中</p>
<p>c. 如果该Section下的所有商品列表只有部分选中，其应该为未选中：</p>
<p><img src="http://nos.netease.com/edu-image/A4094EF2F9391856EBDD73D450D61203.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="img"></p>
</li>
<li><p>仓库结算信息，只需要包括 <strong>本仓总计（不含税）**</strong> **这一项，该项的数值是：该Section下的被选中的商品列表价格之和；其他结算信息项不用实现。</p>
</li>
<li><p>仓库和仓库Section间需要有大约10dp的灰色间隔</p>
</li>
<li><p>每个商品Cell需要支持右侧的滑动删除：</p>
<p><img src="http://nos.netease.com/edu-image/68A76D49B9F8B79C60D81A420AFFEA51.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="img"></p>
<p>当点击删除时，该商品需要被删除，导航栏的数目、仓库的左侧选中状态、仓库结算信息需要更新。</p>
<p>税费点击展开，其中点击展开需要有高度变化动画（效果参考考拉海购APP）：</p>
<p><img src="http://nos.netease.com/edu-image/81F06AA9BF87B6FE32B46C6930D7CDC2.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="img"></p>
</li>
<li><p>每个商品的文字描述最多为两行，超过显示… 。</p>
<p>这里要求实现：a. 一行商品标题显示效果 b. 商品标题过长导致两行并跟随… 的显示效果。</p>
</li>
<li><p>每个商品Cell需要执行左侧的选择框的选中和取消选中，选中状态改变时，仓库的左侧选中状态、仓库结算信息需要更新。</p>
</li>
<li><p>整个页面底部的全部结算界面，其展示信息不需要变化，固定写死即可，也不用响应动作；只需要固定悬浮在屏幕的底部，不随滚动条滚动。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS界面开发（基础篇）主观题考试&quot;&gt;&lt;a href=&quot;#iOS界面开发（基础篇）主观题考试&quot; class=&quot;headerlink&quot; title=&quot;iOS界面开发（基础篇）主观题考试&quot;&gt;&lt;/a&gt;iOS界面开发（基础篇）主观题考试&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫四周课程</title>
    <link href="http://yoursite.com/2016/11/21/15.%20Python%E7%88%AC%E8%99%AB%E5%9B%9B%E5%91%A8%E8%AF%BE%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/11/21/15. Python爬虫四周课程/</id>
    <published>2016-11-21T01:32:00.000Z</published>
    <updated>2016-11-21T01:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python爬虫四周课程"><a href="#Python爬虫四周课程" class="headerlink" title="Python爬虫四周课程"></a>Python爬虫四周课程</h1><ol>
<li><p>课程相关</p>
<ol>
<li>答疑时间: 14:00 - 17:00</li>
<li>直播时间: 另行通知</li>
<li>其他</li>
</ol>
</li>
<li><p>课程简介:</p>
<p>爬、存、查、现</p>
</li>
<li><p>爬虫</p>
<p>分为定向和非定向(Google、Baidu)</p>
<ol>
<li>我们爬取的是指定网站的爬虫，</li>
<li>我们只需要使用一个数据库存储，百度是分层集群存储</li>
<li>哈希表存储线性结构</li>
</ol>
<p>爬虫 = 数据请求(HTTP) + 数据解析(html/json)</p>
<p>Debug: </p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python爬虫四周课程&quot;&gt;&lt;a href=&quot;#Python爬虫四周课程&quot; class=&quot;headerlink&quot; title=&quot;Python爬虫四周课程&quot;&gt;&lt;/a&gt;Python爬虫四周课程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;课程相关&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;答疑时
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>让你的 alfred 支持拼音搜索</title>
    <link href="http://yoursite.com/2016/11/13/14.%20%E8%AE%A9%E4%BD%A0%E7%9A%84alfred%E6%94%AF%E6%8C%81%E6%8B%BC%E9%9F%B3%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2016/11/13/14. 让你的alfred支持拼音搜索/</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-11-13T10:19:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="让你的-Alfred-支持拼音搜索"><a href="#让你的-Alfred-支持拼音搜索" class="headerlink" title="让你的 Alfred 支持拼音搜索"></a>让你的 Alfred 支持拼音搜索</h1><p>来源：<a href="https://gist.github.com/tiann/35fb758c18036d7f8640" target="_blank" rel="external">https://gist.github.com/tiann/35fb758c18036d7f8640</a> | <a href="https://www.v2ex.com/t/248284" target="_blank" rel="external">https://www.v2ex.com/t/248284</a></p>
<ol>
<li><p>安装 <a href="https://github.com/mozillazg/python-pinyin" target="_blank" rel="external">pypinyin</a> 这个库（可能需要sudo）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install pypinyin</div></pre></td></tr></table></figure>
</li>
<li><p>执行<strong>alfred-pinyin.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">python Path/filename.py</div><div class="line"><span class="comment">#python为命令名称，这里是python2， 后面的是文件的路径和名称</span></div></pre></td></tr></table></figure>
<p>下载地址 <a href="https://gist.github.com/tiann/35fb758c18036d7f8640" target="_blank" rel="external">https://gist.github.com/tiann/35fb758c18036d7f8640</a> </p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;让你的-Alfred-支持拼音搜索&quot;&gt;&lt;a href=&quot;#让你的-Alfred-支持拼音搜索&quot; class=&quot;headerlink&quot; title=&quot;让你的 Alfred 支持拼音搜索&quot;&gt;&lt;/a&gt;让你的 Alfred 支持拼音搜索&lt;/h1&gt;&lt;p&gt;来源：&lt;a href
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>西单大悦城Apple Store体验</title>
    <link href="http://yoursite.com/2016/11/12/13.%20%E8%A5%BF%E5%8D%95%E5%A4%A7%E6%82%A6%E5%9F%8EApple%20Store%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2016/11/12/13. 西单大悦城Apple Store体验/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-11-13T09:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="西单大悦城Apple-Store体验"><a href="#西单大悦城Apple-Store体验" class="headerlink" title="西单大悦城Apple Store体验"></a>西单大悦城Apple Store体验</h1><p>昨天去了北京的西单，路过Apple Store，焉能不进去看看？</p>
<p>懒得去周边的商场，就一直呆了很久，对几个东西有点感触：</p>
<ul>
<li>iPhone7</li>
<li>Bose降噪耳机</li>
<li>全新的MacBook Pro</li>
</ul>
<h2 id="iPhone7"><a href="#iPhone7" class="headerlink" title="iPhone7"></a>iPhone7</h2><p>玩了玩iPhone7 和 iPhone7 Plus，发现大屏的体验还是不错的，改变了我对大屏手机的看法，也看了景深人像的功能，不过觉得没那么重要，Plus的作用还是大，这样的话可以接收更多的信息。</p>
<p>把玩了许久iPhone7，又去体验体验iPhone6s，因为有不同，才能够更深刻的体验到变化。iPhone7的震动反馈做的更好，代替了原来单一的震动模式，增加了很多新的种类，结合着全新的Home Button，有了一个全新的反馈体验。</p>
<p>对于新的Home Button，总结来说，已经不是实体按键了，看来Apple也放弃了实体键，最终转向了虚拟按键，本来还不是很适应，但当我把玩了一段时间的iPhone7之后，我再去用iPhone6s时，顿时感受手更累了，想回到iPhone7上面去。</p>
<h2 id="Bose降噪耳机"><a href="#Bose降噪耳机" class="headerlink" title="Bose降噪耳机"></a>Bose降噪耳机</h2><p>以前就听过降噪耳机的用武之地，以前不觉得有什么，果然有些东西你不体会、不体验是不会知道的，当我戴上耳机的那一刹那，真是觉得置身事外，摘下耳机又回到了这个世界。倘若戴上这个耳机，走入地铁早高峰的洪流之中，至少耳朵是干净的。</p>
<h2 id="全新的Macbook-Pro"><a href="#全新的Macbook-Pro" class="headerlink" title="全新的Macbook Pro"></a>全新的Macbook Pro</h2><p>没有带TouchBar的13寸的Macbook Pro，机身轻盈了不少，但13寸的好像只有2个USB-C接口，背面的ＬＯＧＯ也不亮了，这些都可以，唯一不能让人接受的就是键盘了，键盘为了配合机身，变得更薄了，但失去了触感，按下去好像没有按一样，官方声称这是第二代蝶式键盘，可我觉得和第一代没有什么改进，真是让人悲伤，或许以后会改变罢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;西单大悦城Apple-Store体验&quot;&gt;&lt;a href=&quot;#西单大悦城Apple-Store体验&quot; class=&quot;headerlink&quot; title=&quot;西单大悦城Apple Store体验&quot;&gt;&lt;/a&gt;西单大悦城Apple Store体验&lt;/h1&gt;&lt;p&gt;昨天去了北京
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>导航控制器的按钮设置(Storyboard)</title>
    <link href="http://yoursite.com/2016/11/11/12.%20%E5%AF%BC%E8%88%AA%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E6%8C%89%E9%92%AE%E8%AE%BE%E7%BD%AE(Storyboard)/"/>
    <id>http://yoursite.com/2016/11/11/12. 导航控制器的按钮设置(Storyboard)/</id>
    <published>2016-11-11T07:56:53.000Z</published>
    <updated>2016-11-11T08:16:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导航控制器的按钮设置-Storyboard"><a href="#导航控制器的按钮设置-Storyboard" class="headerlink" title="导航控制器的按钮设置(Storyboard)"></a>导航控制器的按钮设置(Storyboard)</h1><p>效果图:</p>

<ol>
<li><p>新建UIView, 放入 ViewController 中 </p>
</li>
<li><p>设置 UIView 的布局上左右都为0, 高度为44</p>

</li>
<li><p>更新Frame</p>
 
</li>
<li><p>放入3个 Button 到 UIView 中</p>
</li>
<li><p>设置第一个 Button 的布局, 上下左右都为0</p>

</li>
<li><p>设置第二个 Button 的布局, 右和下为0</p>

</li>
<li><p>在上一步的基础上, 设置第二个 Button 和第一个 Button 相同宽度和高度, </p>
<ol>
<li>按住 Control 键, 拖拽第二个 Button 到第一个 Button 松手</li>
<li>按住 Shift 键, 选中 Equal Widths 和 Equal Heights</li>
<li>最后点击 Add Constraints </li>
</ol>

</li>
<li><p>设置第三个 Button 的布局, 右和下为0 (同第6步)</p>
</li>
<li><p>在上一步的基础上, 设置第三个 Button 和第二个 Button 相同宽度和高度 (同第7步)</p>
</li>
<li><p>选中三个 Button 同时按下<code>option</code> + <code>Command</code> + <code>=</code> 更新 Frame</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导航控制器的按钮设置-Storyboard&quot;&gt;&lt;a href=&quot;#导航控制器的按钮设置-Storyboard&quot; class=&quot;headerlink&quot; title=&quot;导航控制器的按钮设置(Storyboard)&quot;&gt;&lt;/a&gt;导航控制器的按钮设置(Storyboard)
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Storyboard" scheme="http://yoursite.com/tags/Storyboard/"/>
    
  </entry>
  
  <entry>
    <title>饿了么网上订餐流程</title>
    <link href="http://yoursite.com/2016/11/09/10.%20%E9%A5%BF%E4%BA%86%E4%B9%88%E7%BD%91%E4%B8%8A%E8%AE%A2%E9%A4%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/11/09/10. 饿了么网上订餐流程/</id>
    <published>2016-11-08T16:00:00.000Z</published>
    <updated>2016-11-11T00:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="饿了么网上订餐流程"><a href="#饿了么网上订餐流程" class="headerlink" title="饿了么网上订餐流程"></a>饿了么网上订餐流程</h1><h2 id="毕业设计——网上订餐系统技术调研"><a href="#毕业设计——网上订餐系统技术调研" class="headerlink" title="毕业设计——网上订餐系统技术调研"></a>毕业设计——网上订餐系统技术调研</h2><ol>
<li><p>检测地理位置（可以省略或简化，比如直接选择地点，因为后边会填写详细地点，所以这里无需深究）</p>
</li>
<li><p>选择商家（可以按照位置分类）</p>
</li>
<li><p>选择商品（每个商家的商品）</p>
</li>
<li><p>结算（计算）</p>
</li>
<li><p>选择收获地址和支付方式，填写详细信息（）</p>
</li>
<li><p>确定下单</p>
</li>
<li><p>如果在线支付转到支付页面</p>
</li>
<li><p>判断支付是否成功</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;饿了么网上订餐流程&quot;&gt;&lt;a href=&quot;#饿了么网上订餐流程&quot; class=&quot;headerlink&quot; title=&quot;饿了么网上订餐流程&quot;&gt;&lt;/a&gt;饿了么网上订餐流程&lt;/h1&gt;&lt;h2 id=&quot;毕业设计——网上订餐系统技术调研&quot;&gt;&lt;a href=&quot;#毕业设计——网上订
    
    </summary>
    
    
  </entry>
  
</feed>
