<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-03T00:55:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mamian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>macOS 下的Appium安装与配置</title>
    <link href="http://yoursite.com/2017/03/22/39.%20Appium%20Installation%20&amp;%20Setup%20With%20macOS/"/>
    <id>http://yoursite.com/2017/03/22/39. Appium Installation &amp; Setup With macOS/</id>
    <published>2017-03-22T15:03:05.000Z</published>
    <updated>2017-05-03T00:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="macOS-下的Appium安装与配置-Appium-Installation-amp-Setup-With-macOS"><a href="#macOS-下的Appium安装与配置-Appium-Installation-amp-Setup-With-macOS" class="headerlink" title="macOS 下的Appium安装与配置 Appium Installation &amp; Setup With macOS"></a>macOS 下的Appium安装与配置 Appium Installation &amp; Setup With macOS</h1><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>系统要求及说明：</p>
<ul>
<li>macOS 10.11 或更高</li>
<li><code>brew</code>需要最新版本的 <code>Xcode</code> 或<code>Xcode Command Line</code></li>
</ul>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>iOS9.3及以下使用 Automation 作为底层技术，在iOS9.3出现了XCUITest，并且在iOS10时抛弃了 Automation ，所以Appium在iOS9.3及以下和iOS10的配置方法不同。</p>
<h3 id="安装Appium"><a href="#安装Appium" class="headerlink" title="安装Appium"></a>安装Appium</h3><p>如果已安装过部分依赖，可直接跳过</p>
<h4 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h4><p>强烈推荐所有macOS上的软件使用Homebrew进行安装，使用brew安装过的软件，<strong>不再需要sudo命令</strong>。</p>
<p>打开终端，运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>brew的使用非常简单，安装一个软件使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install #&lt;package name&gt;</div></pre></td></tr></table></figure>
<p>如果brew提示Xcode版本过低，需要安装新版本的Xcode（安装时保存两个版本即可）</p>
<p>下载地址：<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">https://developer.apple.com/download/more/</a></p>
<h4 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure>
<p>检查是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">node -v</div><div class="line"># v6.9.1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm -v</div><div class="line"># 3.10.8</div></pre></td></tr></table></figure>
<h5 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h5><p>由于npm源在国外，我们使用npm安装库时会比较慢，可以使用taobao的镜像源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>检查安装是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cnpm -v</div><div class="line"># 4.4.0</div></pre></td></tr></table></figure>
<p>以后均使用<code>cnpm</code> 命令代替<code>npm</code></p>
<h4 id="安装appium"><a href="#安装appium" class="headerlink" title="安装appium"></a>安装appium</h4><h5 id="使用Node-js"><a href="#使用Node-js" class="headerlink" title="使用Node.js"></a>使用Node.js</h5><p>appium本质上就是一个Nodejs应用，我们可以使用npm对其进行安装，安装完毕后就可以使用命令行启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cnpm install -g appium</div></pre></td></tr></table></figure>
<p>可以使用appium-doctor来确认安装环境是否完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cnpm install -g appium-doctor</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">appium-doctor</div></pre></td></tr></table></figure>
<h5 id="下载App"><a href="#下载App" class="headerlink" title="下载App"></a>下载App</h5><p>使用软件比较简单，拥有图形化界面，并且有Inspector工具，帮助检测界面元素</p>
<p>下载地址：<a href="https://github.com/appium/appium-desktop/releases" target="_blank" rel="external">https://github.com/appium/appium-desktop/releases</a></p>
<h3 id="设置Appium"><a href="#设置Appium" class="headerlink" title="设置Appium"></a>设置Appium</h3><h4 id="安装Carthage"><a href="#安装Carthage" class="headerlink" title="安装Carthage"></a>安装Carthage</h4><p>Carthage 是一个管理 iOS 开发库依赖的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install carthage</div></pre></td></tr></table></figure>
<h4 id="安装语言依赖"><a href="#安装语言依赖" class="headerlink" title="安装语言依赖"></a>安装语言依赖</h4><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><h5 id="安装Python3（使用Python2跳过）"><a href="#安装Python3（使用Python2跳过）" class="headerlink" title="安装Python3（使用Python2跳过）"></a>安装Python3（使用Python2跳过）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install python3</div></pre></td></tr></table></figure>
<p>检测安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python3 -V</div><div class="line"># Python 3.6.0</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip3 -V</div><div class="line"># pip 9.0.1 from /usr/local/lib/python3.6/site-packages (python 3.6)</div></pre></td></tr></table></figure>
<p>出现相应代码即成功</p>
<p>macOS自带有Python2版本，默认情况下输入<code>python</code>调用的就是系统的python2和<code>pip</code></p>
<p>此外，如果系统版本之前安装过python3导致安装后输入python3没有找到命令，可以尝试<code>brew link --overwrite python3</code>重新链接</p>
<h5 id="使用-pip-安装"><a href="#使用-pip-安装" class="headerlink" title="使用 pip 安装"></a>使用 <code>pip</code> 安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip3 install Appium-Python-Client</div><div class="line"># python3 -&gt; pip3</div><div class="line"># python -&gt; pip</div></pre></td></tr></table></figure>
<p>详细信息：<a href="https://github.com/appium/python-client" target="_blank" rel="external">https://github.com/appium/python-client</a></p>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>安装JDK</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew update</div><div class="line">brew cask install java</div></pre></td></tr></table></figure>
<p>使用Maven进行依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.appium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0-BETA7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>详细信息：<a href="https://github.com/appium/java-client" target="_blank" rel="external">https://github.com/appium/java-client</a></p>
<h4 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h4><p>包含了记录日志的<code>idevicesyslog</code>和端口转发的<code>iProxy</code>、<code>usbmuxd</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install libimobiledevice --HEAD   #和iOS手机通讯使用</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install ideviceinstaller   # 安装app使用</div></pre></td></tr></table></figure>
<p>在iOS10需要使用 <code>ios-deploy</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cnpm install -g ios-deploy</div></pre></td></tr></table></figure>
<p>对真机需要<code>xcpretty</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gem install xcpretty</div></pre></td></tr></table></figure>
<p><code>gem</code> 安装速度慢可以更换镜像源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div></pre></td></tr></table></figure>
<h4 id="第一次运行配置"><a href="#第一次运行配置" class="headerlink" title="第一次运行配置"></a>第一次运行配置</h4><p>不配置会出现<code>xcodebuild exited with code &#39;65&#39; and signal &#39;null&#39;</code>错误</p>
<h5 id="开发者账号："><a href="#开发者账号：" class="headerlink" title="开发者账号："></a>开发者账号：</h5><p>AppiumDesktop中加入 xcodeOrgId 和 xcodeSigningId 字段</p>
<p><img src="https://testerhome.com/uploads/photo/2017/0ca50d72c936d28e0d8300400b574433.png" alt=""></p>
<p>TeamID 在 <a href="https://developer.apple.com/account/" target="_blank" rel="external">https://developer.apple.com/account/</a> 里左侧的 Member ship 中找到</p>
<p>需要 <code>xcodeOrgId</code> 和 <code>xcodeSigningId</code> 写在desired capabilities 中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">      &quot;xcodeOrgId&quot;: &quot;&lt;Team ID&gt;&quot;,</div><div class="line">      &quot;xcodeSigningId&quot;: &quot;iPhone Developer&quot;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>Team ID 在 <a href="https://github.com/developer.apple.com/account" target="_blank" rel="external">https://github.com/developer.apple.com/account</a> 中的Membership</p>
<h5 id="免费AppleID帐号"><a href="#免费AppleID帐号" class="headerlink" title="免费AppleID帐号"></a>免费AppleID帐号</h5><ol>
<li><p>在appium的出错日志中找到WebDriverAgent的位置，打开进行签名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[XCUITest] Using WDA path: &apos;/usr/local/lib/node_modules/appium/node_modules/.2.23.1@appium-xcuitest-driver/WebDriverAgent&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>更改 <code>WebDriverAgent</code> 的<code>BundleID</code> ，原来是<code>com.facebook.WebDriverAgentLib</code>，我建议把<code>facebook</code>改为你的名字或公司的名字，这里还有个坑，改完这个之后发现还是提示有错误，最后在<code>Build Settings</code>里的<code>Product Bundle Identifier</code>里再修改一下。</p>
<p><a href="https://testerhome.com/uploads/photo/2017/6a43214ff31663f386e34e19e6f7c8d7.png!large" target="_blank" rel="external"><img src="https://testerhome.com/uploads/photo/2017/6a43214ff31663f386e34e19e6f7c8d7.png!large" alt="img"></a></p>
<p>​</p>
</li>
<li><p>点击上面菜单栏的Product -&gt; Test 运行<br>第一次运行会提示没有权限，打开真机上的设置App，通用 -&gt; 描述文件与设备管理，找到你的邮箱，选择信任，再继续执行test，成功启动后就说明可以了，执行完毕后点击停止。</p>
</li>
<li><p>没有了，打开appium测试吧</p>
</li>
</ol>
<h4 id="查看界面元素"><a href="#查看界面元素" class="headerlink" title="查看界面元素"></a>查看界面元素</h4><ul>
<li><p>使用WebDriverAgent</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">从 https://github.com/facebook/WebDriverAgent 克隆, 执行 ./Scripts/bootstrap.sh 命令, 然后打开项目进行签名, </div><div class="line">执行方式</div><div class="line">1. 接着点击上面菜单栏的Product --&gt; test</div><div class="line">2. xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination id=&apos;udid&apos; test</div><div class="line"># udid 可以使用命令 idevice_id -l</div></pre></td></tr></table></figure>
</li>
<li><p>使用AppiumDesktop</p>
</li>
<li><p>app-inspector</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># macaca-cli</div><div class="line">npm install macaca-cli -g</div><div class="line"># macaca doctor</div><div class="line">macaca doctor</div><div class="line"># app-inspector</div><div class="line">npm install app-inspector -g</div><div class="line"># 使用</div><div class="line">app-inspector -u &apos;udid&apos;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h4 id="253错误"><a href="#253错误" class="headerlink" title="253错误"></a>253错误</h4><p>如果你运行官方的TestApp示例，可能会爆出253错误，这时需要对测试App重新build（需要源代码）</p>
<h5 id="xcodebuild-命令"><a href="#xcodebuild-命令" class="headerlink" title="xcodebuild 命令"></a>xcodebuild 命令</h5><p>project</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">xcodebuild [-project projectname] [-target targetname ...] [-configuration configurationname]</div><div class="line">            [-sdk [sdkfullpath | sdkname]] [buildaction ...] [setting=value ...]</div><div class="line">            [-userdefault=value ...]</div></pre></td></tr></table></figure>
<p>workspace</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">xcodebuild -workspace workspacename -scheme schemename [-destination destinationspecifier]</div><div class="line">            [-destination-timeout value] [-configuration configurationname]</div><div class="line">            [-sdk [sdkfullpath | sdkname]] [buildaction ...] [setting=value ...]</div><div class="line">            [-userdefault=value ...]</div></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># xcodebuild -project RobotCalibration.xcodeproj -target RobotCalibration -sdk iphoneos -configuration development</div></pre></td></tr></table></figure>
<h4 id="DesiredCapabilities-配置信息"><a href="#DesiredCapabilities-配置信息" class="headerlink" title="DesiredCapabilities 配置信息"></a>DesiredCapabilities 配置信息</h4><ul>
<li><strong>确定 <code>platformVersion</code></strong></li>
<li><strong>确定 <code>bundleId</code></strong></li>
<li>一台设备 <code>udid</code> 可以设置为 <code>auto</code></li>
<li>不提供 <code>app</code> 属性也可以调起 App，但需要设置 <code>bundleId</code></li>
<li>测试 iOS 9.3以下时，需要设置 <code>automationName</code> 为 <code>Automation</code> ，其它为 <code>XCUITest</code></li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>切换Xcode版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo xcode-select -s #path /Applications/Xcode.app/</div></pre></td></tr></table></figure>
<p>查看设备udid</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">idevice_id -l</div><div class="line"># 或者使用 ideviceinfo 可以在返回的数据中找到 udid</div></pre></td></tr></table></figure>
<h3 id="Automation-（iOS-10以下）"><a href="#Automation-（iOS-10以下）" class="headerlink" title="Automation （iOS 10以下）"></a>Automation （iOS 10以下）</h3><h5 id="推荐使用："><a href="#推荐使用：" class="headerlink" title="推荐使用："></a>推荐使用：</h5><p>Xcode7.3.1</p>
<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>iOS8 中需要确定设置中的开发者选项里的UIAutomation 为打开状态</p>
<h5 id="有开发者帐号-—-gt-打开Xcode-—-gt-对设备注册"><a href="#有开发者帐号-—-gt-打开Xcode-—-gt-对设备注册" class="headerlink" title="有开发者帐号 — &gt; 打开Xcode — &gt; 对设备注册"></a>有开发者帐号 — &gt; 打开Xcode — &gt; 对设备注册</h5><h5 id="免费帐号-─-gt-打开项目-—-gt-修改-bundleID-—-gt-登录帐号进行签名"><a href="#免费帐号-─-gt-打开项目-—-gt-修改-bundleID-—-gt-登录帐号进行签名" class="headerlink" title="免费帐号 ─&gt; 打开项目 — &gt; 修改 bundleID —&gt; 登录帐号进行签名"></a>免费帐号 ─&gt; 打开项目 — &gt; 修改 bundleID —&gt; 登录帐号进行签名</h5><p>测试前查看设定的App目录是否正确</p>
<p>接着就可以打开Appium，和测试用例了</p>
<p>如果不牵扯自动安装和卸载App，可以先手动安装App到目标设备，再进行测试</p>
<p>前提需要 <code>ideviceinstaller</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ideviceinstaller -u &lt;UDID of device&gt; -i &lt;path of .app/.ipa&gt;</div></pre></td></tr></table></figure>
<h5 id="Instruments-exited-with-code-253"><a href="#Instruments-exited-with-code-253" class="headerlink" title="Instruments exited with code: 253"></a>Instruments exited with code: 253</h5><p>[Instruments] Error launching instruments: Instruments crashed on startup</p>
<p>可能是App路径不正确</p>
<h4 id="授权iOS模拟器"><a href="#授权iOS模拟器" class="headerlink" title="授权iOS模拟器"></a>授权iOS模拟器</h4><p>需要测试模拟器进行此项，使用npm安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cnpm install -g authorize-ios</div></pre></td></tr></table></figure>
<p>安装完毕后运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo authorize-ios</div></pre></td></tr></table></figure>
<p>注意：需要在安装完新的 Xcode 后再次执行</p>
<h4 id="通过-Jenkins-运行-iOS-测试（未测试）"><a href="#通过-Jenkins-运行-iOS-测试（未测试）" class="headerlink" title="通过 Jenkins 运行 iOS 测试（未测试）"></a>通过 Jenkins 运行 iOS 测试（未测试）</h4><p>确认之前<code>authorize-ios</code>运行成功</p>
<p>下载 jenkins</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wget https://jenkins.ci.cloudbees.com/jnlpJars/jenkins-cli.jar</div></pre></td></tr></table></figure>
<p>接下来定义一个 Jenkins 的 LaunchAgent来自动登录，请确保其不包含<code>SessionCreate</code> 或 <code>User</code>key 防止测试运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">java -jar jenkins-cli.jar \</div><div class="line"> -s https://team-appium.ci.cloudbees.com \</div><div class="line"> -i ~/.ssh/id_rsa \</div><div class="line"> on-premise-executor \</div><div class="line"> -fsroot ~/jenkins \</div><div class="line"> -labels osx \</div><div class="line"> -name mac_appium</div></pre></td></tr></table></figure>
<p>最后设置并启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo nano /Library/LaunchAgents/com.jenkins.ci.plist</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class="line">&lt;plist version=&quot;1.0&quot;&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">    &lt;key&gt;Label&lt;/key&gt;</div><div class="line">    &lt;string&gt;com.jenkins.ci&lt;/string&gt;</div><div class="line">    &lt;key&gt;ProgramArguments&lt;/key&gt;</div><div class="line">    &lt;array&gt;</div><div class="line">        &lt;string&gt;java&lt;/string&gt;</div><div class="line">        &lt;string&gt;-Djava.awt.headless=true&lt;/string&gt;</div><div class="line">        &lt;string&gt;-jar&lt;/string&gt;</div><div class="line">        &lt;string&gt;/Users/appium/jenkins/jenkins-cli.jar&lt;/string&gt;</div><div class="line">        &lt;string&gt;-s&lt;/string&gt;</div><div class="line">        &lt;string&gt;https://instructure.ci.cloudbees.com&lt;/string&gt;</div><div class="line">        &lt;string&gt;on-premise-executor&lt;/string&gt;</div><div class="line">        &lt;string&gt;-fsroot&lt;/string&gt;</div><div class="line">        &lt;string&gt;/Users/appium/jenkins&lt;/string&gt;</div><div class="line">        &lt;string&gt;-executors&lt;/string&gt;</div><div class="line">        &lt;string&gt;1&lt;/string&gt;</div><div class="line">        &lt;string&gt;-labels&lt;/string&gt;</div><div class="line">        &lt;string&gt;mac&lt;/string&gt;</div><div class="line">        &lt;string&gt;-name&lt;/string&gt;</div><div class="line">        &lt;string&gt;mac_appium&lt;/string&gt;</div><div class="line">        &lt;string&gt;-persistent&lt;/string&gt;</div><div class="line">    &lt;/array&gt;</div><div class="line">    &lt;key&gt;KeepAlive&lt;/key&gt;</div><div class="line">    &lt;true/&gt;</div><div class="line">    &lt;key&gt;StandardOutPath&lt;/key&gt;</div><div class="line">    &lt;string&gt;/Users/appium/jenkins/stdout.log&lt;/string&gt;</div><div class="line">    &lt;key&gt;StandardErrorPath&lt;/key&gt;</div><div class="line">    &lt;string&gt;/Users/appium/jenkins/error.log&lt;/string&gt;</div><div class="line">&lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div></pre></td></tr></table></figure>
<p>Finally set the owner, permissions, and then start the agent.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo chown root:wheel /Library/LaunchAgents/com.jenkins.ci.plist</div><div class="line">sudo chmod 644 /Library/LaunchAgents/com.jenkins.ci.plist</div><div class="line"></div><div class="line">launchctl load /Library/LaunchAgents/com.jenkins.ci.plist</div><div class="line">launchctl start com.jenkins.ci</div></pre></td></tr></table></figure>
<h4 id="清理文件（可选）"><a href="#清理文件（可选）" class="headerlink" title="清理文件（可选）"></a>清理文件（可选）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$HOME/Library/Logs/CoreSimulator/</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/Library/Caches/com.apple.dt.instruments/</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$HOME/Library/Developer/Xcode/DerivedData/</div></pre></td></tr></table></figure>
<p>以上目录下的所有文件</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h4 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install maven</div></pre></td></tr></table></figure>
<h4 id="额外的设置"><a href="#额外的设置" class="headerlink" title="额外的设置"></a>额外的设置</h4><ol>
<li><p>下载 JDK </p>
</li>
<li><p>通过 Android Studio 下载 Android SDK，并设置目录</p>
<p>macOS 设置 JavaHome和 Android SDK 目录，将下列代码放置到用户目录下的 <code>.bashrc</code> 或 <code>.zshrc</code> 中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 使用Android Studio安装后的路径</div><div class="line"># android sdk</div><div class="line">export ANDROID_HOME=~/Library/Android/sdk</div><div class="line">export PATH=&quot;$HOME/.yarn/bin:$PATH&quot;</div><div class="line"># java_home</div><div class="line">export JAVA_HOME=$(/usr/libexec/java_home)</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div><div class="line">export CLASS_PATH=$JAVA_HOME/lib</div><div class="line"></div><div class="line"># adb等 </div><div class="line">export PATH=$&#123;PATH&#125;:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</div><div class="line">export PATH=$&#123;PATH&#125;:$ANDROID_HOME/tools/bin</div></pre></td></tr></table></figure>
</li>
<li><p>最后，可以使用 appium-doctor 来检查配置环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">appium-doctor</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>capabilities</code>写清楚</p>
<ul>
<li>确定 <code>platformVersion</code></li>
<li>确定 <code>appPackage</code></li>
<li>确定 <code>appActivity</code></li>
</ul>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;macOS-下的Appium安装与配置-Appium-Installation-amp-Setup-With-macOS&quot;&gt;&lt;a href=&quot;#macOS-下的Appium安装与配置-Appium-Installation-amp-Setup-With-macOS
    
    </summary>
    
    
      <category term="Tester" scheme="http://yoursite.com/tags/Tester/"/>
    
      <category term="Appium" scheme="http://yoursite.com/tags/Appium/"/>
    
  </entry>
  
  <entry>
    <title>软件测试工具</title>
    <link href="http://yoursite.com/2017/03/03/38.%20%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/03/38. 软件测试学习/</id>
    <published>2017-03-03T10:56:53.000Z</published>
    <updated>2017-05-03T00:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="推荐实际使用的工具"><a href="#推荐实际使用的工具" class="headerlink" title="推荐实际使用的工具"></a>推荐实际使用的工具</h4><ul>
<li>XMind </li>
<li>Selenium </li>
<li>JMeter</li>
</ul>
<h4 id="Web调试工具"><a href="#Web调试工具" class="headerlink" title="Web调试工具"></a>Web调试工具</h4><ul>
<li>Firefox Firebug</li>
<li>Chrome</li>
</ul>
<h4 id="移动自动化测试"><a href="#移动自动化测试" class="headerlink" title="移动自动化测试"></a>移动自动化测试</h4><p>UI自动化框架</p>
<p>Appium,Calabash,Espresso,uiautomator,Robotium</p>
<h4 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h4><ul>
<li>免费</li>
<li>开源</li>
<li>支持Android、iOS</li>
<li>无需修改被测应用</li>
<li>移动自动化接口统一</li>
<li>支持多个开发语言</li>
</ul>
<h4 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h4><p>Apache Jmeter , Gatling, Tsung, HP LoadRunner</p>
<h4 id="Apache-Jmeter"><a href="#Apache-Jmeter" class="headerlink" title="Apache Jmeter"></a>Apache Jmeter</h4><ul>
<li>免费</li>
<li>开源</li>
<li>跨平台</li>
<li>简单易用</li>
<li>多协议支持</li>
<li>​</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;推荐实际使用的工具&quot;&gt;&lt;a href=&quot;#推荐实际使用的工具&quot; class=&quot;headerlink&quot; title=&quot;推荐实际使用的工具&quot;&gt;&lt;/a&gt;推荐实际使用的工具&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;XMind &lt;/li&gt;
&lt;li&gt;Selenium &lt;/li&gt;
&lt;li&gt;J
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用学生身份申请价值50美元的Digitalocean服务器</title>
    <link href="http://yoursite.com/2017/02/27/37.%20%E7%94%A8%E5%AD%A6%E7%94%9F%E8%BA%AB%E4%BB%BD%E7%94%B3%E8%AF%B7%E4%BB%B7%E5%80%BC50%E7%BE%8E%E5%85%83%E7%9A%84Digitalocean%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2017/02/27/37. 用学生身份申请价值50美元的Digitalocean服务器/</id>
    <published>2017-02-27T07:58:40.000Z</published>
    <updated>2017-02-27T10:18:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，各大公司针对学生有很多的福利，国内的阿里云和腾讯云针对学生都有特价，而国外的公司更阔绰，比如Digitalocean和AWS都会直接送相关的金额，你可以自行去选择服务器，更加灵活、自由。这次我申请的是Digitalocean的服务器，下面是申请的步骤。</p>
<p>说明：</p>
<p>Digitalocean和GitHub有合作，学生资格的认证是由GitHub来完成的，Digitalocean其实被包含在GitHub Education当中的Student Developer Pack里面，所以我们首先申请GitHub的Student Developer Pack</p>
<p>要求：</p>
<ul>
<li>学生邮箱，没有学生邮箱需要提供学生证照片（需审核）</li>
<li>信用卡，没有信用卡需要PayPal帐号支付5美元（可以使用银联卡）</li>
</ul>
<ol>
<li><p>打开网址 <a href="https://education.github.com/pack" target="_blank" rel="external">https://education.github.com/pack</a> ，点击Get your pack</p>
<p><img src="/images/Learn_How_to_Code_Using_the_Student_Developer_Pack_-_GitHub_Education.png" alt=""></p>
</li>
<li><p>根据提示，登录/注册 你的GitHub帐号</p>
<p><img src="/images/Sign_in_to_GitHub_·_GitHub.png" alt=""></p>
</li>
<li><p>接下来会提示你输入详细信息， 根据提示进行选择，这里我选择的是学生和个人<br><img src="/images/Request_a_discount_-_GitHub_Education.png" alt=""></p>
</li>
<li><p>Tell us about you，接下来认定你的学生身份，需要提供你的姓名，学生邮箱，学校姓名，毕业年份，申请原因。</p>
<p>如果有学生邮箱，但是在Select your <strong>school-issued email address</strong>: 里面没有显示，需要你先去GitHub帐号里面将你学生邮箱添加上去。</p>
<p>如果没有学生邮箱，需要提供你的学生证明，比如，带学生证号的学生证，成绩单等，要求必须资质上必须有日期。</p>
<p>这是我写的范例（没有学生邮箱），仅供参考</p>
<p><img src="/images/Request a discount - GitHub Education.png" alt=""></p>
</li>
<li><p>接下来等待审核，通过或者拒绝后邮箱会收到响应的邮件</p>
</li>
<li><p>通过审核之后，在邮箱里打开链接，或者再次打开 <a href="https://education.github.com/pack" target="_blank" rel="external">https://education.github.com/pack</a> ，点击Get your Pack，这时已经可以看到许多服务都有相关的提示了。</p>
</li>
<li><p>找到DigitalOcean，复制你的Code，点击 <a href="https://www.digitalocean.com/github-students/?utm_medium=partnerships&amp;utm_source=github&amp;utm_campaign=studentdevpack" target="_blank" rel="external">DigitalOcean website</a> 进行跳转</p>
<p><img src="/images/GitHub_Student_Developer_Pack_-_GitHub_Education.png" alt=""></p>
</li>
<li><p>创建DigitalOcean帐号</p>
<p><img src="/images/DigitalOcean__Cloud_computing_designed_for_developers.png" alt=""></p>
</li>
<li><p>验证邮箱之后，需要输入信用卡对账户进行确认。在输入前，点击 <a href="undefined">Have a Promo Code?</a> 根据提示粘贴刚刚复制好的Code</p>
<p><img src="/images/DigitalOcean_-_Welcome.png" alt=""></p>
<p>输入Promo Code</p>
<p><img src="/images/DigitalOcean_-_Welcome2.png" alt="输入Promo Code"></p>
</li>
<li><p>如果没有信用卡，点击PayPal，最少需要支付5美元，点击继续跳转，就用银联卡支付5美元。</p>
<p><img src="/images/使用借记卡或信用卡付款_-_PayPal.png" alt=""></p>
</li>
<li><p>创建成功后，确认账户余额。点击digitalocean网页右上角的头像，选择Settings。再点击左边的Billing</p>
<p><img src="/images/DigitalOcean_-_Settings.png" alt=""></p>
</li>
<li><p>接下来点击右上角的按钮 Create Droplet 创建</p>
</li>
<li><p>选择服务器配置。另外据我测试，San Francisco的服务器大多数已经被封了，会导致连接不上</p>
<p><img src="/images/DigitalOcean - Create Droplets.png" alt=""></p>
</li>
<li><p>测试 IP </p>
<p>在终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ping 你的IP</div></pre></td></tr></table></figure>
<p>通的话会返回，time数值越少越好</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">64 bytes from 104.16.xx.x: icmp_seq=0 ttl=51 time=221.834 ms</div><div class="line">64 bytes from 104.16.xx.x: icmp_seq=1 ttl=51 time=221.976 ms</div><div class="line">64 bytes from 104.16.xx.x: icmp_seq=2 ttl=51 time=219.906 ms</div></pre></td></tr></table></figure>
<p>不通会返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Request timeout for icmp_seq 0</div><div class="line">Request timeout for icmp_seq 1</div><div class="line">Request timeout for icmp_seq 2</div></pre></td></tr></table></figure>
<p>如果不通则需要返回重新创建，记得把原来的关闭。</p>
</li>
<li><p>选择好之后点创建就可以了。如果对IP不满意，建议在 How many Droplets? 这里一次性多创建几个实例，创建好之后再进行选择。</p>
<p><img src="/images/DigitalOcean_-_Create_Droplets.png" alt=""></p>
</li>
<li><p>完毕</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，各大公司针对学生有很多的福利，国内的阿里云和腾讯云针对学生都有特价，而国外的公司更阔绰，比如Digitalocean和AWS都会直接送相关的金额，你可以自行去选择服务器，更加灵活、自由。这次我申请的是Digitalocean的服务器，下面是申请的步骤。&lt;/p&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS面试题</title>
    <link href="http://yoursite.com/2017/01/22/35.%20iOS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/01/22/35. iOS面试题/</id>
    <published>2017-01-22T14:33:05.000Z</published>
    <updated>2017-02-27T09:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="iOS面试题"><a href="#iOS面试题" class="headerlink" title="iOS面试题"></a>iOS面试题</h4><ol>
<li>强引用循环的场景</li>
<li>Block循环引用</li>
<li>列出几个主要的线程锁</li>
<li>解释runtime，和常用使用场景</li>
<li>解释Runloop</li>
<li>​</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;iOS面试题&quot;&gt;&lt;a href=&quot;#iOS面试题&quot; class=&quot;headerlink&quot; title=&quot;iOS面试题&quot;&gt;&lt;/a&gt;iOS面试题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;强引用循环的场景&lt;/li&gt;
&lt;li&gt;Block循环引用&lt;/li&gt;
&lt;li&gt;列出几个主要的线程锁&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>部署Django</title>
    <link href="http://yoursite.com/2017/01/21/34.%20%E9%83%A8%E7%BD%B2Django/"/>
    <id>http://yoursite.com/2017/01/21/34. 部署Django/</id>
    <published>2017-01-21T07:41:41.000Z</published>
    <updated>2017-02-27T09:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="账户不在-sudoers-文件中"><a href="#账户不在-sudoers-文件中" class="headerlink" title="账户不在 sudoers 文件中"></a>账户不在 sudoers 文件中</h4><p>   1、切换到root用户权限</p>
<p>[user@Compile ~]$ su root</p>
<p>密码：</p>
<pre><code>2、查看/etc/sudoers文件权限，如果只读权限，修改为可写权限
</code></pre><p>[root@Compile user]# ls -l /etc/sudoers</p>
<p>-r–r—–. 1 root root 4030 9月  25 00:57 /etc/sudoers</p>
<p>[root@Compile user]# chmod 777 /etc/sudoers</p>
<p>保存退出，并恢复/etc/sudoers的访问权限为440</p>
<p>[root@Compile user]# chmod 440 /etc/sudoers</p>
<h4 id="python升级带来的yum异常"><a href="#python升级带来的yum异常" class="headerlink" title="python升级带来的yum异常"></a>python升级带来的yum异常</h4><p>python升级后，发现yum无法使用了</p>
<p>原因：这是因为yum采用python作为命令解释器，这可以从/usr/bin/yum文件中第一行#!/usr/bin/python发现。而python版本之间兼容性不太好，使得2.X版本与3.0版本之间存在语法不一致问题。而CentOS 5自带的yum采用的是python2.4，当系统将python升级到2.6或3.0后，出现语法解释错误。</p>
<p>解决办法：</p>
<p>很简单，一是升级yum，一是修改yum的解释器为旧版本python2.4（如果你没有采用覆盖升级的话）</p>
<p>升级yum的作法就不详述了；</p>
<p>修改yum的解释器为旧版本python2.4：</p>
<p>vi /usr/bin/yum</p>
<p>将第一行”#!/usr/bin/python” 改为 “#!/usr/bin/python2.4”即可</p>
<p>####Loaded plugins: fastestmirror, langpacks问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">Loading mirror speeds <span class="keyword">from</span> cached hostfile</div><div class="line"> * epel: mirrors.neusoft.edu.cn</div><div class="line">  File <span class="string">"/usr/libexec/urlgrabber-ext-down"</span>, line <span class="number">28</span></div><div class="line">    <span class="keyword">except</span> OSError, e:</div><div class="line">                  ^</div><div class="line">SyntaxError: invalid syntax</div><div class="line">Exiting on user cancel</div></pre></td></tr></table></figure>
<p>查看发现这个文件也依赖Python版本，修改为相同即可。修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /usr/libexec/urlgrabber-ext-down</div><div class="line">#! /usr/bin/python2.7</div></pre></td></tr></table></figure>
<h4 id="Apache2服务器的默认Log路径"><a href="#Apache2服务器的默认Log路径" class="headerlink" title="Apache2服务器的默认Log路径"></a>Apache2服务器的默认Log路径</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/var/log/apache2/</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;账户不在-sudoers-文件中&quot;&gt;&lt;a href=&quot;#账户不在-sudoers-文件中&quot; class=&quot;headerlink&quot; title=&quot;账户不在 sudoers 文件中&quot;&gt;&lt;/a&gt;账户不在 sudoers 文件中&lt;/h4&gt;&lt;p&gt;   1、切换到root用户
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux安装Python3</title>
    <link href="http://yoursite.com/2017/01/18/33.%20Linux%E5%AE%89%E8%A3%85Python3/"/>
    <id>http://yoursite.com/2017/01/18/33. Linux安装Python3/</id>
    <published>2017-01-18T11:14:25.000Z</published>
    <updated>2017-02-27T09:49:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux安装Python3</p>
<p>安装依赖库和编译器：</p>
<p># yum install gcc -y</p>
<p># yum install openssl-devel</p>
<p><strong>如果没有安装openssl-devel，在安装过程中pip无法安装</strong></p>
<p><strong>Step 2</strong>:下载对应版本的Python</p>
<p># wget <a href="https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tar.xz" target="_blank" rel="external">https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tar.xz</a></p>
<p># xz -d Python-3.5.1.tar.xz </p>
<p># tar -xvf Python-3.5.1.tar</p>
<p><strong>Step 3</strong>:编译和安装Python3.5</p>
<p># cd Python-3.5.1</p>
<p># ./configure&amp;&amp; make &amp;&amp; make install</p>
<p>将 python3.5 链接到python3命令</p>
<p>大部分情况下到step3 后就大功告成了，如果你前面没有安装openssl-devel库，这时你就需要将python3.5链接到python3命令  1. 找到Python3.5安装的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># whereis python</div></pre></td></tr></table></figure>
<p>会输出所有Python的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python: /usr/bin/python  /usr/bin/python2.6  /usr/lib/python2.6  /usr/local/bin/python3.5m-config  /usr/local/bin/python3.5-config  /usr/local/bin/python3.5  /usr/local/bin/python3.5m  /usr/local/lib/python3.5  /usr/include/python2.6  /usr/share/man/man1/python.1.gz</div></pre></td></tr></table></figure>
<p>明显安装在了<strong>/usr/local/bin/python3.5</strong> 目录，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># sudo ln -s /usr/local/bin/python3.5 /usr/bin/python3</div></pre></td></tr></table></figure>
<p>Ubuntu Server 16.04</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">ubuntu@VM<span class="number">-82</span><span class="number">-221</span>-ubuntu:/etc$ pip3 install virtualenv</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"/usr/bin/pip3"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    sys.exit(main())</div><div class="line">  File <span class="string">"/usr/lib/python3/dist-packages/pip/__init__.py"</span>, line <span class="number">215</span>, <span class="keyword">in</span> main</div><div class="line">    locale.setlocale(locale.LC_ALL, <span class="string">''</span>)</div><div class="line">  File <span class="string">"/usr/lib/python3.5/locale.py"</span>, line <span class="number">594</span>, <span class="keyword">in</span> setlocale</div><div class="line">    <span class="keyword">return</span> _setlocale(category, locale)</div><div class="line">locale.Error: unsupported locale setting</div></pre></td></tr></table></figure>
<p>解决：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">export LANGUAGE=en_US.UTF<span class="number">-8</span></div><div class="line">export LANG=en_US.UTF<span class="number">-8</span></div><div class="line">export LC_ALL=en_US.UTF<span class="number">-8</span></div><div class="line">locale-gen en_US.UTF<span class="number">-8</span></div><div class="line">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure>
<p>创建虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># pip3 install virtualenv</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">virtualenv --python=`which python3` ~/.virtualenvs/djangodev</div><div class="line">$ source ~/.virtualenvs/djangodev/bin/activate</div></pre></td></tr></table></figure>
<p><strong>activate script</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">$ source bin/activate</div></pre></td></tr></table></figure>
<p>安装Django</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># pip3 install Django</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux安装Python3&lt;/p&gt;
&lt;p&gt;安装依赖库和编译器：&lt;/p&gt;
&lt;p&gt;# yum install gcc -y&lt;/p&gt;
&lt;p&gt;# yum install openssl-devel&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果没有安装openssl-devel，在安装过程中
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TableView和CollectionView整体上移64pt问题</title>
    <link href="http://yoursite.com/2017/01/16/32.%20TableView%E5%92%8CCollectionView%E6%95%B4%E4%BD%93%E4%B8%8A%E7%A7%BB64pt%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/01/16/32. TableView和CollectionView整体上移64pt问题/</id>
    <published>2017-01-16T09:36:24.000Z</published>
    <updated>2017-01-18T01:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>两个解决方案</p>
<ol>
<li>self.automaticallyAdjustsScrollViewInsets = NO  这个是有效的，但是会影响其他页面</li>
<li>在切换视图的ViewController中，切换完视图就更改响应ViewController的frame</li>
</ol>
<p>最后的解决方法是修改了所有子View的Y值</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两个解决方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;self.automaticallyAdjustsScrollViewInsets = NO  这个是有效的，但是会影响其他页面&lt;/li&gt;
&lt;li&gt;在切换视图的ViewController中，切换完视图就更改响应ViewControl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS－当遇到tableView整体上移时的解决方案</title>
    <link href="http://yoursite.com/2017/01/15/31.%20iOS%EF%BC%8D%E5%BD%93%E9%81%87%E5%88%B0tableView%E6%95%B4%E4%BD%93%E4%B8%8A%E7%A7%BB%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/01/15/31. iOS－当遇到tableView整体上移时的解决方案/</id>
    <published>2017-01-15T05:14:18.000Z</published>
    <updated>2017-01-15T05:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS－当遇到tableView整体上移时的解决方案"><a href="#iOS－当遇到tableView整体上移时的解决方案" class="headerlink" title="iOS－当遇到tableView整体上移时的解决方案"></a>iOS－当遇到tableView整体上移时的解决方案</h1><p>方案一</p>
<p>在使用了navigationController后，当界面进行跳转往返后，时而会出现tableView或collectionView上移的情况，通常会自动上移64个像素，那么这种情况，我们可以关闭tableView的自动适配布局。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;<span class="comment">// 默认是YES</span></div></pre></td></tr></table></figure>
<p>方案二：</p>
<p>当出现tableView整体上移时，你当然可以在 Xcode 中修改每个 View,将他们下移20个像素（状态栏高度）或者64个像素（状态栏+导航栏高度）。</p>
<p>但是苹果显然已经考虑到这个问题，他们早在 iOS 7 SDK 中为 ViewController 提供了一个 edgesForExtendedLayout 新属性。如果你将这个属性设置为UIRectEdgeNone，则 viewController 的所有子视图都会自动调整。</p>
<p>目前暂时也适用于不同系统版本代码更迭出现状况时使用。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeNone</span>;<span class="comment">// 推荐使用</span></div></pre></td></tr></table></figure>
<p>方案三</p>
<p>我曾经遇到过当我点击图片放大时，然后再返回，就会出现tableView整体上移20像素， 后来我发现是 MJPhotoBrowser 第三方框架的问题，然后我请教了我们组长，他后来在 MJPhotoBrowser.m  的控制器里添加了几句话</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS－当遇到tableView整体上移时的解决方案&quot;&gt;&lt;a href=&quot;#iOS－当遇到tableView整体上移时的解决方案&quot; class=&quot;headerlink&quot; title=&quot;iOS－当遇到tableView整体上移时的解决方案&quot;&gt;&lt;/a&gt;iOS－当遇到t
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>使用TFHpple处理数据的请求遇到的坑</title>
    <link href="http://yoursite.com/2017/01/02/30.%20%E4%BD%BF%E7%94%A8TFHpple%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2017/01/02/30. 使用TFHpple处理数据的请求/</id>
    <published>2017-01-02T04:07:17.000Z</published>
    <updated>2017-01-03T02:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用TFHpple处理数据的请求遇到的坑"><a href="#使用TFHpple处理数据的请求遇到的坑" class="headerlink" title="使用TFHpple处理数据的请求遇到的坑"></a>使用TFHpple处理数据的请求遇到的坑</h1><p>由于App中需要抓取网页数据，也没有做后台，就在iOS App里手动检索HTML信息进行抓取，这个过程中使用到了TFHpple框架，不过我看了一些范例都是直接使用NSData来直接获取网页的Data，这样做肯定会阻塞主线程，我一直在尝试使用其他方法，但都没有成功，困扰了我很久，直到昨天看到一篇网易公开课的文章提到了（<a href="http://www.itgo.me/a/2968793659999962488/TFHpple-XPath）。" target="_blank" rel="external">http://www.itgo.me/a/2968793659999962488/TFHpple-XPath）。</a></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)wangyi &#123;</div><div class="line"><span class="comment">// 网易公开课地址</span></div><div class="line"><span class="built_in">NSString</span> *str=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://open.163.com/"</span>];</div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:[str stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</div><div class="line"><span class="comment">// UTF－8</span></div><div class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</div><div class="line">AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc]initWithRequest:request];</div><div class="line"><span class="comment">// 请求数据，设置成功与失败的回调函数</span></div><div class="line">[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, <span class="keyword">id</span> responseObject) &#123;</div><div class="line"><span class="comment">// 请求下来的整个网页数据</span></div><div class="line"><span class="built_in">NSString</span> *html = operation.responseString;</div><div class="line"><span class="comment">// 网页有gbk编码有utf8编码，全部换成utf8</span></div><div class="line"><span class="built_in">NSString</span> *utf8HtmlStr = [html stringByReplacingOccurrencesOfString:<span class="string">@"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=GBK\"&gt;"</span> withString:<span class="string">@"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;"</span>];</div><div class="line"><span class="comment">// TFHpple解析的是data，转换成data</span></div><div class="line"><span class="built_in">NSData</span> *htmlDataUTF8 = [utf8HtmlStr dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"><span class="comment">// 开始解析</span></div><div class="line">TFHpple *xpathParser = [[TFHpple alloc] initWithHTMLData:htmlDataUTF8];</div><div class="line"><span class="comment">// 查找所有的 &lt;div class="g-cell1"</span></div><div class="line"><span class="comment">// 因为首页的“小编推荐”是使用该class标示的，所以主要获取的是该种形式的小课程节目</span></div><div class="line"><span class="built_in">NSArray</span> *elements</div><div class="line">= [xpathParser searchWithXPathQuery:<span class="string">@"//div[@class='g-cell1']"</span>];</div><div class="line"><span class="comment">// 不存在则不继续执行</span></div><div class="line"><span class="keyword">if</span> ([elements count] &lt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 以下只是示例解析第一个课程，循环即可全部解析</span></div><div class="line">TFHppleElement *first = [elements firstObject];</div><div class="line"><span class="comment">// 完整写法</span></div><div class="line"><span class="built_in">NSArray</span> *arr = [first searchWithXPathQuery:<span class="string">@"//a[1]/@href"</span>];</div><div class="line">TFHppleElement *ele = [arr firstObject];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"网址链接：%@"</span>,[ele text]);</div><div class="line"><span class="comment">// 合并的写法</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"图片链接：%@"</span>,[[[first searchWithXPathQuery:<span class="string">@"//img/@src"</span>] firstObject] text]);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"标题：%@"</span>,[[[first searchWithXPathQuery:<span class="string">@"//h5"</span>] firstObject] text]);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"副标题：%@"</span>,[[[first searchWithXPathQuery:<span class="string">@"//p"</span>] firstObject] text]);</div><div class="line">&#125;failure:^(AFHTTPRequestOperation *operation, <span class="built_in">NSError</span> *error) &#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"发生错误！%@"</span>,error);</div><div class="line">&#125;];</div><div class="line"><span class="comment">// 加入队列 开始执行</span></div><div class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">[queue addOperation:operation];&#125;</div></pre></td></tr></table></figure>
<p>这个代码使用的是AFNetworking 2x的版本，不过网页已经更改了，所以这个解析已经失效了。</p>
<p>我把代码使用了之后，可以使用</p>
<p>接着我尝试把TFHpple处理HTML的这部份放到子线程去执行，参考代码<a href="http://www.jianshu.com/p/943dcb9ad632" target="_blank" rel="external">http://www.jianshu.com/p/943dcb9ad632</a></p>
<p>然后分别计算时间对比一下这三种方式。</p>
<p>我预想的结果是把处理HTML的这部份放到子线程这样处理会更快，但结果是并没有。</p>
<p><img src="/images/NSData_TFHpple_AFNetwoking对比.png" alt=""></p>
<p>结果是，直接使用AFNetwoking，并且在里面对数据进行处理是最快的，当然，我只用真机测试了5次，可能会有偏差</p>
<p>设备: iPhone5c , iOS10.2</p>
<p>代码地址: <a href="https://github.com/magaofei/iOS_Apprentice/tree/master/NSURLSessionBackgroundData" target="_blank" rel="external">https://github.com/magaofei/iOS_Apprentice/tree/master/NSURLSessionBackgroundData</a></p>
<p>后续：</p>
<p>然而事情还远没有结束。当我把代码改动了之后，发现还有其他问题在等着我。</p>
<p>如果使用AFNetworking请求数据，在GET方法中，我在收到了Data之后用TFHpple解析HTML，将处理后的数据保存到一个NSMutableArray中并返回，但并没有成功返回。我尝试使用<code>__block</code>修饰也不行，无奈放弃了这个方案。</p>
<p>接着我换了另外一个方案使用<code>dispatch_semaphore</code>和<code>dispatch_group</code> 来做，但也遇到了挫折，的代码处理逻辑是</p>
<ol>
<li>从网络抓取，进入<code>loadTutorialsWithUrlString</code>方法</li>
<li>在这个方法中创建group，异步执行group，创建信号量，在里面发起GET</li>
<li>收到GET回来的数据后，在notifiy里对数据进行处理，然后返回</li>
</ol>
<p>但问题是，我在进入<code>loadTutorialsWithUrlString</code>之后就是异步的方法，其实我的网络请求处理数据这些会慢于其他动作，所以这个逻辑是失败的。</p>
<p>我尝试更改它</p>
<ol>
<li>创建group，异步执行<code>loadTutorialsWithUrlString</code></li>
<li>在方法中，先创建信号量，接着发起GET，方法最后发起等待信号量</li>
<li>在方法执行完毕后，在notify里写入文件</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">&#123;       _group = dispatch_group_create();</div><div class="line">        </div><div class="line">        dispatch_group_async(_group, dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">            </div><div class="line">            [<span class="keyword">self</span> loadTutorialsWithUrlString:urlString];</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        </div><div class="line">        dispatch_group_notify(_group, dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">            </div><div class="line">            <span class="comment">//放到缓存中</span></div><div class="line">            <span class="comment">//Cache目录</span></div><div class="line">            <span class="built_in">NSString</span> *path = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line">            <span class="comment">//根据传入的文件名调用相关的文件，默认为安工要闻</span></div><div class="line">            <span class="built_in">NSString</span> *filePath = [path stringByAppendingPathComponent:plistName];</div><div class="line"><span class="comment">//            ayitNewsArray = _news;</span></div><div class="line">            </div><div class="line">            <span class="built_in">BOOL</span> WriteToFileBOOL = [<span class="built_in">NSKeyedArchiver</span> archiveRootObject:_ayitNewsArray toFile:filePath];</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (WriteToFileBOOL) &#123; <span class="comment">//写入成功</span></div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"写入成功"</span>);</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, filePath);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;   <span class="comment">//写入失败</span></div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"写入失败"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line">	<span class="keyword">return</span> _ayitNewsArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - 格式化数据</span></div><div class="line">- (<span class="keyword">void</span>)loadTutorialsWithUrlString:(<span class="built_in">NSString</span> *)urlString&#123;</div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    <span class="built_in">NSLock</span> *lock = [[<span class="built_in">NSLock</span> alloc] init];</div><div class="line">    [lock lock];</div><div class="line">    <span class="comment">// 怀疑这里因为全局并发所以产生资源共享，所以这里lock</span></div><div class="line">    _semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line">    </div><div class="line">    [lock unlock];</div><div class="line">    </div><div class="line">    AFAppDotNetAPIClient *manager = [AFAppDotNetAPIClient manager];</div><div class="line">    </div><div class="line">    </div><div class="line">    manager.requestSerializer = [AFHTTPRequestSerializer serializer];</div><div class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">    </div><div class="line">    </div><div class="line">    [manager GET:urlString parameters:<span class="literal">nil</span> progress:^(<span class="built_in">NSProgress</span> * _Nonnull downloadProgress) &#123;</div><div class="line">        </div><div class="line">    &#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</div><div class="line">        _data = responseObject;</div><div class="line">        <span class="built_in">NSMutableArray</span> *newsGroup = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">        </div><div class="line">        TFHpple *hpple = [[TFHpple alloc] initWithHTMLData:_data];</div><div class="line">        <span class="built_in">NSString</span> *pathQueryString = <span class="string">@"//div[@class='newslist l']/ul/li/a"</span>; <span class="comment">//</span></div><div class="line">        <span class="built_in">NSArray</span> *Nodes = [hpple searchWithXPathQuery:pathQueryString];</div><div class="line">        <span class="keyword">for</span> (TFHppleElement *element <span class="keyword">in</span> Nodes) &#123;</div><div class="line">            </div><div class="line">            <span class="built_in">MKNewsItem</span> *newsItem = [[<span class="built_in">MKNewsItem</span> alloc] init];</div><div class="line">            </div><div class="line">            [newsGroup addObject:newsItem];</div><div class="line">            </div><div class="line">            <span class="comment">// 6</span></div><div class="line">            <span class="comment">//                tutorial.title = [[element firstChild] content];</span></div><div class="line">            newsItem.title = [element text];</div><div class="line">            newsItem.time = [[element firstChildWithTagName:<span class="string">@"span"</span>] content];</div><div class="line">            <span class="built_in">NSMutableString</span> *tempTime = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"%@"</span>, newsItem.time];</div><div class="line">            </div><div class="line">            <span class="comment">//删除时间前后的[]字符</span></div><div class="line">            [tempTime replaceCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">1</span>) withString:<span class="string">@""</span>];</div><div class="line">            [tempTime replaceCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">10</span>, <span class="number">1</span>) withString:<span class="string">@""</span>];</div><div class="line">            newsItem.time = tempTime;</div><div class="line"></div><div class="line">            newsItem.url = [<span class="built_in">NSURL</span> URLWithString:[element objectForKey:<span class="string">@"href"</span>]];</div><div class="line">            </div><div class="line"></div><div class="line">            <span class="built_in">NSMutableString</span> *tempUrl = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"http://www.ayit.edu.cn%@"</span>,newsItem.url.absoluteString];</div><div class="line">            [tempUrl deleteCharactersInRange:<span class="built_in">NSMakeRange</span>(<span class="number">22</span>, <span class="number">2</span>)];  <span class="comment">//删除那两个..</span></div><div class="line">            newsItem.url = [<span class="built_in">NSURL</span> URLWithString:tempUrl];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//        NSLog(@"%@", newsGroup);</span></div><div class="line">        _ayitNewsArray = newsGroup;</div><div class="line">        dispatch_semaphore_signal(_semaphore);</div><div class="line">        newsGroup = <span class="literal">nil</span>;</div><div class="line">        [manager invalidateSessionCancelingTasks:<span class="literal">YES</span>];</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"thread = %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"发生错误！%@"</span>,error);</div><div class="line">        dispatch_semaphore_signal(_semaphore);</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">    <span class="comment">// 在网络请求成功之前 信号量等待中</span></div><div class="line">    dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但又发生了两个问题，我打开Leaks测试的时候，发现了内存泄露，排查了一下，发现居然是AFNetworking，想着这不可能啊，这么多人使用的框架怎么会有这种问题呢？接着我GOOGLE和很多次，最终在作者的提示下 <a href="https://github.com/AFNetworking/AFNetworking/issues/2149" target="_blank" rel="external">https://github.com/AFNetworking/AFNetworking/issues/2149</a></p>
<p>在数据处理完毕后，调用<code>[manager invalidateSessionCancelingTasks:YES];</code>结束Session的请求，不然的话，我每一次发出请求之后，之前的请求还一直在，这就是为什么产生内存泄露的原因。然后依照网上的说话，继承了AFHTTPSessionManager，将其设置为单例，这样每次请求的manager只有一个。</p>
<p>接着还有个多线程的问题，我在创建信号量的时候有小概率会出现 EXC_BAD_INSTRUCTION 错误。我怀疑是因为异步并发执行导致的资源共享，所以我用NSLock给它上锁，目前看来是解决了问题。</p>
<p>才疏学浅，目前只能写到这里了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用TFHpple处理数据的请求遇到的坑&quot;&gt;&lt;a href=&quot;#使用TFHpple处理数据的请求遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;使用TFHpple处理数据的请求遇到的坑&quot;&gt;&lt;/a&gt;使用TFHpple处理数据的请求遇到的坑&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>sqlite for iOS犯的错2016年12月21日</title>
    <link href="http://yoursite.com/2016/12/21/29.%20sqlite-for-iOS%E7%8A%AF%E7%9A%84%E9%94%992016%E5%B9%B412%E6%9C%8821%E6%97%A5/"/>
    <id>http://yoursite.com/2016/12/21/29. sqlite-for-iOS犯的错2016年12月21日/</id>
    <published>2016-12-21T01:21:18.000Z</published>
    <updated>2016-12-21T01:28:12.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>Sql语句里的<code>values</code>少了<code>s</code></p>
<p>使用了<code>NSLog(@&quot;%s&quot;, sqlite3_errmsg(_db));</code>才发现错误,</p>
<p> 原因是<code>NSLog(@&quot;%s&quot;, sqlite3_errmsg(_db));</code></p>
</li>
<li><p><code>sqlite3_column_text</code>写成<code>sqlite3_column_int64</code></p>
</li>
</ol>
<ol>
<li>NSMutableArray延迟加载写的不对</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _students = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这样是老师写的, 但是它是纯代码做的, 所以控制器有alloc和init 但我使用storyboard, 所以就跳过了这一步, 通过debugging 发现数组是nil, 就说明没有成功alloc和init</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sql语句里的&lt;code&gt;values&lt;/code&gt;少了&lt;code&gt;s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用了&lt;code&gt;NSLog(@&amp;quot;%s&amp;quot;, sqlite3_errmsg(_db));&lt;/code&gt;才发现错误,&lt;/p&gt;
&lt;p&gt; 原因是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于 iPhone App 设计的几点看法和总结</title>
    <link href="http://yoursite.com/2016/12/20/28.%20%E5%85%B3%E4%BA%8E-iPhone-App-%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%87%A0%E7%82%B9%E7%9C%8B%E6%B3%95%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/12/20/28. 关于-iPhone-App-设计的几点看法和总结/</id>
    <published>2016-12-20T06:51:25.000Z</published>
    <updated>2016-12-20T07:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-iPhone-App-设计的几点看法和总结"><a href="#关于-iPhone-App-设计的几点看法和总结" class="headerlink" title="关于 iPhone App 设计的几点看法和总结"></a>关于 iPhone App 设计的几点看法和总结</h1><p>有几个原则</p>
<ol>
<li><p>比如不要使用高优先级的东西,</p>
<p>比如提示用户时, 用一个HUD显示就比Alert强制用户观看的体验要好, 同理, 你在微信朋友圈点击那个评论图标时, 不是使用的弹窗, 而是在原来区域做的改变, 这点影响就有了良好的用户体验, 不警示用户, 优秀的设计就是这样, 粗略的设计就是将信息粗暴的反馈给用户, 而不管合不合理, 我们应当将反馈分级别的呈现, 而不是一以贯之.</p>
</li>
<li><p>一贯性的图标</p>
<p>图标是用户每天接触App最多的东西, 极大的影响和吸引用户, 正因为如此, 有不少App愿意把活动呈现在此, 比如阿里系的App, 这很明显是为了运营, 但这影响到了用户体验, 就不应该去做, 如果阿里真的把用户放在第一位, 就不应该干这样的事</p>
</li>
<li><p>遵循官方推荐的设计</p>
<p>一个平台有着自己的设计理念,在这个平台中的产品最好能做到一致, 这样用户在使用就能够方便的上手, 让用户方便上手, 自然也能够留住用户</p>
</li>
<li><p>不要大的改变, 只需要增增补补</p>
<p>一款产品忌讳频繁的改变, 我举个支付宝的例子, 最早只是一款钱包App, 后来越来越重, 沉重的同时也频繁改版, 直到现在你也不知道他会改到哪里去, 但有一点是肯定的, 就是需求是不断变化的, 呵呵. 不断改版的同时也意味着, 没想清楚. </p>
<p>每一次改版都加大了老用户的上手程度和管理的混乱, 导致用户对升级新的版本没有兴趣</p>
</li>
<li><p>多用原生</p>
<p>现在有跨平台开发解决方案, 但还不够成熟, 关键是体验不太好, 建议多用原生</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于-iPhone-App-设计的几点看法和总结&quot;&gt;&lt;a href=&quot;#关于-iPhone-App-设计的几点看法和总结&quot; class=&quot;headerlink&quot; title=&quot;关于 iPhone App 设计的几点看法和总结&quot;&gt;&lt;/a&gt;关于 iPhone App 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS面试题总结</title>
    <link href="http://yoursite.com/2016/12/15/27.%20iOS%E9%9D%A2%E8%AF%95/"/>
    <id>http://yoursite.com/2016/12/15/27. iOS面试/</id>
    <published>2016-12-15T05:56:27.000Z</published>
    <updated>2016-12-20T12:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="copy关键字的作用"><a href="#copy关键字的作用" class="headerlink" title="copy关键字的作用"></a>copy关键字的作用</h3><p>常用于NSString、NSArray、NSDictionary，防止用可变类型来作为子类，如果子类是一个可变类型，则会返回一个不可变类型给他，保护了</p>
<h3 id="循环引用的场景"><a href="#循环引用的场景" class="headerlink" title="循环引用的场景"></a>循环引用的场景</h3><p>父子关系时</p>
<h3 id="事件的传递"><a href="#事件的传递" class="headerlink" title="事件的传递"></a>事件的传递</h3><p>UIApplication</p>
<p>UIWindow</p>
<p>遍历</p>
<ul>
<li>事件的响应</li>
</ul>
<h4 id="图片切圆角"><a href="#图片切圆角" class="headerlink" title="图片切圆角"></a>图片切圆角</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;copy关键字的作用&quot;&gt;&lt;a href=&quot;#copy关键字的作用&quot; class=&quot;headerlink&quot; title=&quot;copy关键字的作用&quot;&gt;&lt;/a&gt;copy关键字的作用&lt;/h3&gt;&lt;p&gt;常用于NSString、NSArray、NSDictionary，防止用可变
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>data转NSString的Encoding问题</title>
    <link href="http://yoursite.com/2016/12/14/26.%20data%E8%BD%ACNSString%E7%9A%84Encoding%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/12/14/26. data转NSString的Encoding问题/</id>
    <published>2016-12-14T10:52:36.000Z</published>
    <updated>2016-12-14T11:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="data转NSString的Encoding问题"><a href="#data转NSString的Encoding问题" class="headerlink" title="data转NSString的Encoding问题"></a>data转NSString的Encoding问题</h1><p>在做安工助手这款App的时候需要抓取网页HTML，我想把抓取放到后台来进行，于是使用<code>NSURLSessionDataTask</code>，却发现了一个BUG，死活获取不到数据，不知道为什么。今天一步步排查，终于找到原因了，因为<code>Encoding</code>的问题</p>
<p>不完整代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSURLSessionDataTask</span> *task = [_session dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"task = %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">     <span class="built_in">NSString</span> *str = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</div><div class="line">     </div><div class="line">     <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line"></div><div class="line">         _dataTextView.text = str;</div><div class="line">         </div><div class="line">         <span class="built_in">NSLog</span>(<span class="string">@"_dataTextView %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">     &#125;);</div><div class="line"> &#125;];</div></pre></td></tr></table></figure>
<p>设置断点后的结果是，data是有数据的，但<code>str</code>是没数据的，这我就很纳闷了，不可能啊，试了其他代码之后，终于想到，难道是<code>encoding</code>的问题？我果断把请求的URL换成百度，成功了…这真是个坑，我们在将网页的NSData转换为NSString，一定要看好网页原来是什么格式的</p>
<p>例如我这个网页的编码是GB2312</p>
<p><img src="../images/dataNStringencoding.png" alt=""></p>
<p>那么就应该需要响应的编码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSStringEncoding</span> enc = <span class="built_in">CFStringConvertEncodingToNSStringEncoding</span>(kCFStringEncodingGB_18030_2000);</div><div class="line"></div><div class="line"><span class="built_in">NSString</span> *str = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:enc];</div></pre></td></tr></table></figure>
<p>运行以后，正常。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;data转NSString的Encoding问题&quot;&gt;&lt;a href=&quot;#data转NSString的Encoding问题&quot; class=&quot;headerlink&quot; title=&quot;data转NSString的Encoding问题&quot;&gt;&lt;/a&gt;data转NSString的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ruby on rails学习</title>
    <link href="http://yoursite.com/2016/12/09/25.%20ruby%20on%20rails%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/12/09/25. ruby on rails学习/</id>
    <published>2016-12-09T01:47:05.000Z</published>
    <updated>2016-12-12T12:03:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ruby-on-rails学习"><a href="#ruby-on-rails学习" class="headerlink" title="ruby on rails学习"></a>ruby on rails学习</h1><p>（<strong>档案／资料夹 ：</strong>用途 ）</p>
<p><strong>app/ ：</strong> 包含你应用程式的 controllers、models、views。你要改的东西大多是这些。</p>
<p><strong>config/ ：</strong> 设定应用程式的执行阶段规则、路由设定（routes）、资料库等等。</p>
<p><strong>db/ ：</strong>显示你目前资料库的 schema（结构定义），以及资料库的 migrations。</p>
<p><strong>public/ ：</strong>这是唯一一个资料夹会是放什么就出现什么的。如果你把档案放里面，server 会直接回传，不会经过 Rails 的处理。</p>
<p><strong>app/assets/ ：</strong>你会要把图片、JavaScript、stylesheets (CSS) 还有其他静态档案放在里面。现代的 Rails 应用程式使用一种叫做 Assets Pipeline 的东西，把在这资料夹里面的所有 JavaScript 和 CSS 档合并成一个档案来加速。</p>
<p><code>rails new</code> 还建立了其他很多东西。大概可以写一本书来讲，所以我们现在先无视它们。</p>
<h3 id="new-topics"><a href="#new-topics" class="headerlink" title="new topics"></a>new topics</h3><p>这些网页到底怎么建出来，又是如何连在一起的呢？Rails 的 scaffold 帮你处理好了。</p>
<p>我们来仔细瞧瞧 rails 帮我们建立的档案：</p>
<ul>
<li><code>app/models/topic.rb</code></li>
<li>这个档案里面有我们的 topic model 的程式码。如果你仔细看，他其实几乎是空白的。 对资料的新增、读取、更新、删除操作在 Rails 是内建的。</li>
<li><code>app/views/topics</code></li>
<li>这个资料夹里面有我们的 topics model 的 view 的程式码。 你刚刚使用的表单的程式码就放在这里面。Rails 会帮你建好这些档案作为 scaffold 的一部分。</li>
<li>如果你以前写过 HTML，这些程式你应该不陌生。 Rails 的 view 只是 HTML 加上一些用来显示资料库来的资料的程式。</li>
<li><code>app/views/topics/index.html.erb</code><ul>
<li>这个程式是用在列出所有 topics 的页面。</li>
<li>index 是用来表示一个网站或网站的一部分的“预设”页面。当你打开 <a href="http://localhost:3000/topics" target="_blank" rel="external">http://localhost:3000/topics</a> 的时候，topics 的 index 页面会传送到你的电脑上。 </li>
</ul>
</li>
<li><code>app/views/topics/show.html.erb</code><ul>
<li>是当你在 <code>Listing topics</code> 按一下 <code>show</code> 时会看到的页面。 </li>
</ul>
</li>
<li><code>app/views/topics/new.html.erb</code><ul>
<li>是当你按一下 <code>New Topic</code> 时会看到的页面。</li>
<li><code>app/views/topics/edit.html.erb</code></li>
<li>是当你按一下 <code>Edit</code> 时会看到的页面。 </li>
</ul>
</li>
<li><code>app/views/topics/_form.html.erb</code><ul>
<li>你或许注意到了，新增 topic 和编辑 topics 的页面长得很像。这是因为他们都使用了这个档案来显示表单。 这种档案称作 <code>partial</code>，因为他只有网页里面一部分的内容。Partial 的档名一定是底线开头的。 </li>
<li>挑战题：你可以找到 partial 是在 new.html.erb 和 edit.html.erb 的哪一行程式被引用的吗？ </li>
</ul>
</li>
<li><code>app/controllers/topics_controller.rb</code><ul>
<li>这称为 controller 档，Rails 自动透过 scaffold 产生的。</li>
<li>如果你打开来看，你会看到每一个 view ，除了 _form.html.erb 之外都对应到一个 method（开头是 def）。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ruby-on-rails学习&quot;&gt;&lt;a href=&quot;#ruby-on-rails学习&quot; class=&quot;headerlink&quot; title=&quot;ruby on rails学习&quot;&gt;&lt;/a&gt;ruby on rails学习&lt;/h1&gt;&lt;p&gt;（&lt;strong&gt;档案／资料夹 ：&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mongod 使用</title>
    <link href="http://yoursite.com/2016/12/08/24.%20mongod-%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/12/08/24. mongod-使用/</id>
    <published>2016-12-08T11:12:32.000Z</published>
    <updated>2016-12-08T11:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mongod-使用"><a href="#mongod-使用" class="headerlink" title="mongod 使用"></a>mongod 使用</h1><p>进入Shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mongo</div></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mongod</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mongod-使用&quot;&gt;&lt;a href=&quot;#mongod-使用&quot; class=&quot;headerlink&quot; title=&quot;mongod 使用&quot;&gt;&lt;/a&gt;mongod 使用&lt;/h1&gt;&lt;p&gt;进入Shell&lt;/p&gt;
&lt;figure class=&quot;highlight plain
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>autoLayout</title>
    <link href="http://yoursite.com/2016/12/07/23.%20autoLayoutAndFrame/"/>
    <id>http://yoursite.com/2016/12/07/23. autoLayoutAndFrame/</id>
    <published>2016-12-07T14:10:20.000Z</published>
    <updated>2017-01-02T04:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="autoLayout"><a href="#autoLayout" class="headerlink" title="autoLayout"></a>autoLayout</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">(<span class="keyword">void</span>)setNeedsUpdateConstraints</div><div class="line">- (<span class="keyword">void</span>)updateConstraintsIfNeeded</div></pre></td></tr></table></figure>
<h2 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setNeedsLayout</div><div class="line">- (<span class="keyword">void</span>)layoutIfNeeded</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)layoutSubviews</div><div class="line">  <span class="comment">// 更改子view的布局</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;autoLayout&quot;&gt;&lt;a href=&quot;#autoLayout&quot; class=&quot;headerlink&quot; title=&quot;autoLayout&quot;&gt;&lt;/a&gt;autoLayout&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>retainCount并不能返回正确的数值</title>
    <link href="http://yoursite.com/2016/12/07/22.%20retainCount%E5%B9%B6%E4%B8%8D%E8%83%BD%E8%BF%94%E5%9B%9E%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%95%B0%E5%80%BC/"/>
    <id>http://yoursite.com/2016/12/07/22. retainCount并不能返回正确的数值/</id>
    <published>2016-12-07T10:15:23.000Z</published>
    <updated>2016-12-07T10:24:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="retainCount并不能返回正确的数值"><a href="#retainCount并不能返回正确的数值" class="headerlink" title="retainCount并不能返回正确的数值"></a>retainCount并不能返回正确的数值</h1><p>我想通过<code>retainCount</code>来理解引用计数，在网上搜了搜，看到了这个方法</p>
<p>相同意思的两行代码，却返回了不同的结果</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSDate</span> *now = [<span class="built_in">NSDate</span> date];</div><div class="line">        <span class="built_in">NSDate</span> *nowinit = [[<span class="built_in">NSDate</span> alloc] init];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"now = %@, retain count = %ld"</span>, now,</div><div class="line">              <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)(now)));</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"nowinit = %@, retain count = %ld"</span>, nowinit,</div><div class="line">              <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)(nowinit)));</div></pre></td></tr></table></figure>
<p>retainCount的值</p>
<p><code>[NSDate date]</code>输出的结果是2</p>
<p><code>[[NSDate alloc] init]</code>输出的结果是1</p>
<p>这让我大为不解，从结果来看，他们是完全相同的，不应该会是这样，如果不同的话，其他人也应该会指出的，但我没发现有人说出来。</p>
<p>我尝试Google了一下，Google上第一个就是 <a href="http://blog.csdn.net/wzzvictory/article/details/9626017" target="_blank" rel="external">Cocoa中retainCount返回值不准的原因</a>这个，看了之后我才发现，Apple也说了，这个东西不准，我干，既然不准，这个方法还存在干嘛。我有看到<a href="http://stackoverflow.com/questions/4636146/when-to-use-retaincount" target="_blank" rel="external">StackOverFlow</a>上面的回答，他劝我们使用 Instruments 中的 Leaks 和 Zombies 来检测泄露的内存和僵尸对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;retainCount并不能返回正确的数值&quot;&gt;&lt;a href=&quot;#retainCount并不能返回正确的数值&quot; class=&quot;headerlink&quot; title=&quot;retainCount并不能返回正确的数值&quot;&gt;&lt;/a&gt;retainCount并不能返回正确的数值&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Genymotion Android模拟器</title>
    <link href="http://yoursite.com/2016/11/28/21.%20Genymotion%20Android%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    <id>http://yoursite.com/2016/11/28/21. Genymotion Android模拟器/</id>
    <published>2016-11-28T08:19:40.000Z</published>
    <updated>2016-12-08T11:00:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Genymotion-Android模拟器"><a href="#Genymotion-Android模拟器" class="headerlink" title="Genymotion Android模拟器"></a>Genymotion Android模拟器</h1><p>想试试用Charles对AndroidApp 抓包，谁知道模拟器这么难调试</p>
<p>记录一下</p>
<p>Genymotion网络为(NAT) </p>
<p>用模拟器访问本机地址为 10.0.3.2</p>
<p>我的Charles代理端口为7777，所以就设置上了</p>
<p>Mac 上启用 Surge 后，虚拟机的「网络设置-代理」里填上对应的 IP 地址就可以让虚拟机也能走代理，如下图所示假定 Mac 里的代理设置是 127.0.0.1:6152，通过查看虚拟机的 IP 可以推断出 Mac 作为主机的 IP 是 10.211.55.2，代理设置里填写 10.211.55.2:6152 即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Genymotion-Android模拟器&quot;&gt;&lt;a href=&quot;#Genymotion-Android模拟器&quot; class=&quot;headerlink&quot; title=&quot;Genymotion Android模拟器&quot;&gt;&lt;/a&gt;Genymotion Android模拟器&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法学习第一节</title>
    <link href="http://yoursite.com/2016/11/26/20.%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>http://yoursite.com/2016/11/26/20. 算法学习第一节/</id>
    <published>2016-11-26T11:14:22.000Z</published>
    <updated>2016-11-27T13:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dynamic-Connectivity-动态连通性"><a href="#Dynamic-Connectivity-动态连通性" class="headerlink" title="Dynamic Connectivity(动态连通性)"></a>Dynamic Connectivity(动态连通性)</h1><p>Question：</p>
<p>How many connected components result after performing the following sequence of <em>union</em> operations on a set of 10 items?</p>
<p>1-2 3-4 5-6 7-8 7-9 2-8 0-5 1-9</p>
<p>Answer:</p>
<p>3</p>
<p>个人见解：这个问题是说，有几个连通的集合，比如1-2，说明1和2之间是连接的，那么1-2 和 2-8 说明1到8之间是连通状态，那么他们三个是一个集合，由此计算，总共有3个集合</p>
<h3 id="Quick-Find（快速查找、贪心算法）"><a href="#Quick-Find（快速查找、贪心算法）" class="headerlink" title="Quick Find（快速查找、贪心算法）"></a>Quick Find（快速查找、贪心算法）</h3><p>code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindUF</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] id;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">QuickFindUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)  <span class="comment">// set id of each object to itself</span></div><div class="line">      id[i] = i;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;  <span class="comment">//check whether p and q are in the same component</span></div><div class="line">    <span class="keyword">return</span> id[p] == id[q];</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;  <span class="comment">// change all entries with id[p] to id[q]</span></div><div class="line">    <span class="keyword">int</span> pid = id[p];</div><div class="line">    <span class="keyword">int</span> qid = id[q];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) </div><div class="line">      <span class="keyword">if</span> (id[i] == pid) id[i] = qid;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>将连接到的数字更改为相同数字</li>
<li>相同的数组元素就意味着连通</li>
</ol>
<p>时间复杂度</p>
<p>缺点 时间复杂度太大</p>
<h1 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick Union"></a>Quick Union</h1><p>把数组看作一组树，数组中每一项是它在树中的父节点</p>
<p>Question:</p>
<p>Suppose that in a quick-union data structure on 10 elements that the id[] array is </p>
<p>0 9 6 5 4 2 61 0 5</p>
<p>What are the roots of 3 and 7, respectively?</p>
<p>Answer:</p>
<p>6 and 6</p>
<p>The root of 3 is 6: 3-&gt;5-&gt;2-&gt;6</p>
<p>The root of 7 is 6: 7-&gt;1-&gt;9-&gt;5-&gt;2-&gt;6</p>
<p><img src="/images/QuickUnion1.png" alt="QuickUnion1"> </p>
<p>和Quick Find的区别在于，是用相同根节点来表示数组中相同的元素，并且有利于合并。在合并树的时候，只需要改变一个值，比如把p这个树合并到q中，只需要更改<code>id[9]</code>的值为6即可，这就意味着9这个结点的根节点是6，这样其他值就无需更改，减少了操作</p>
<p>code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnionUF</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] id;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">QuickUnionUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">      id[i] = i;  <span class="comment">//set id of each to itself</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  <span class="comment">// chase parent pointers until reach root</span></div><div class="line">    <span class="keyword">while</span> (i != id[i]) </div><div class="line">      i = id[i];</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cinnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123; <span class="comment">//check if p and q have same root</span></div><div class="line">    <span class="keyword">return</span> root(p) == root(q);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;  <span class="comment">// change root of p to point to root of q</span></div><div class="line">    <span class="keyword">int</span> i = root(p);</div><div class="line">    <span class="keyword">int</span> j = root(q);</div><div class="line">    id[j] = j;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">algorithm</th>
<th style="text-align:center">initialize</th>
<th style="text-align:center">union</th>
<th style="text-align:center">find</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">quick-find</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">quick-union</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
</tbody>
</table>
<p>to slow</p>
<p>在查找一个高度很高的树时，每一次都需要回溯整棵树，浪费时间，每一次查找都是对数组的一次遍历</p>
<h1 id="Quick-Union-Improvements"><a href="#Quick-Union-Improvements" class="headerlink" title="Quick-Union Improvements"></a>Quick-Union Improvements</h1><p>在实现quick-union的时候执行一些操作避免得到很高的树，如果一个大树和小树合并，避免将大树放在下面，那将会导致更高的树</p>
<p>在带权算法中，总是将小的树放在下面</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dynamic-Connectivity-动态连通性&quot;&gt;&lt;a href=&quot;#Dynamic-Connectivity-动态连通性&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Connectivity(动态连通性)&quot;&gt;&lt;/a&gt;Dynamic
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为什么要把插座变量声明为弱引用？</title>
    <link href="http://yoursite.com/2016/11/25/19.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8A%8A%E6%8F%92%E5%BA%A7%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E4%B8%BA%E5%BC%B1%E5%BC%95%E7%94%A8%EF%BC%9F/"/>
    <id>http://yoursite.com/2016/11/25/19. 为什么要把插座变量声明为弱引用？/</id>
    <published>2016-11-25T02:33:07.000Z</published>
    <updated>2016-11-25T08:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS上强引用循环的几处场景"><a href="#iOS上强引用循环的几处场景" class="headerlink" title="iOS上强引用循环的几处场景"></a>iOS上强引用循环的几处场景</h1><h3 id="为什么要把插座变量声明为弱引用？"><a href="#为什么要把插座变量声明为弱引用？" class="headerlink" title="为什么要把插座变量声明为弱引用？"></a>为什么要把插座变量声明为弱引用？</h3><p>将插座变量声明为弱引用是一个编程约定，当系统的可用内存偏少时，视图控制器会自动释放其视图并在之后需要显示时再创建。因此，视图控制器应该使用弱引用特性的插座变量指向view的子视图，以便在释放view时同时释放view的所有子视图</p>
<p>来自《iOSProgramming》4th edition</p>
<h3 id="委托弱引用"><a href="#委托弱引用" class="headerlink" title="委托弱引用"></a>委托弱引用</h3><p>对象及其委托之间产生强引用循环。例如<code>BNRHypnosisViewController</code>是<code>UITextfield</code>对象的委托，而且<code>UITextfield</code>对象是<code>BNRHypnosisViewController</code>的强引用属性，如果<code>UITextfield</code>对象再对其委托保持强引用，就会在两者之间产生强引用循环，很容易造成内存泄露</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS上强引用循环的几处场景&quot;&gt;&lt;a href=&quot;#iOS上强引用循环的几处场景&quot; class=&quot;headerlink&quot; title=&quot;iOS上强引用循环的几处场景&quot;&gt;&lt;/a&gt;iOS上强引用循环的几处场景&lt;/h1&gt;&lt;h3 id=&quot;为什么要把插座变量声明为弱引用？&quot;
    
    </summary>
    
    
  </entry>
  
</feed>
