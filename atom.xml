<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-27T10:31:57.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mamian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法学习第一节</title>
    <link href="http://yoursite.com/2016/11/26/20.%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>http://yoursite.com/2016/11/26/20. 算法学习第一节/</id>
    <published>2016-11-26T11:14:22.000Z</published>
    <updated>2016-11-27T10:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dynamic-Connectivity-动态连通性"><a href="#Dynamic-Connectivity-动态连通性" class="headerlink" title="Dynamic Connectivity(动态连通性)"></a>Dynamic Connectivity(动态连通性)</h1><p>Question：</p>
<p>How many connected components result after performing the following sequence of <em>union</em> operations on a set of 10 items?</p>
<p>1-2 3-4 5-6 7-8 7-9 2-8 0-5 1-9</p>
<p>Answer:</p>
<p>3</p>
<p>个人见解：这个问题是说，有几个连通的集合，比如1-2，说明1和2之间是连接的，那么1-2 和 2-8 说明1到8之间是连通状态，那么他们三个是一个集合，由此计算，总共有3个集合</p>
<h3 id="Quick-Find（快速查找、贪心算法）"><a href="#Quick-Find（快速查找、贪心算法）" class="headerlink" title="Quick Find（快速查找、贪心算法）"></a>Quick Find（快速查找、贪心算法）</h3><p>code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindUF</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] id;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">QuickFindUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">    id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)  <span class="comment">// set id of each object to itself</span></div><div class="line">      id[i] = i;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;  <span class="comment">//check whether p and q are in the same component</span></div><div class="line">    <span class="keyword">return</span> id[p] == id[q];</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;  <span class="comment">// change all entries with id[p] to id[q]</span></div><div class="line">    <span class="keyword">int</span> pid = id[p];</div><div class="line">    <span class="keyword">int</span> qid = id[q];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) </div><div class="line">      <span class="keyword">if</span> (id[i] == pid) id[i] = qid;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>将连接到的数字更改为相同数字</li>
<li>相同的数组元素就意味着连通</li>
</ol>
<p>时间复杂度</p>
<p>缺点 时间复杂度太大</p>
<h1 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick Union"></a>Quick Union</h1><p>把数组看作一组树，数组中每一项是它在树中的父节点</p>
<p>Question:</p>
<p>Suppose that in a quick-union data structure on 10 elements that the id[] array is </p>
<p>0 9 6 5 4 2 61 0 5</p>
<p><img src="/images/QuickUnion1.png" alt="QuickUnion1"> </p>
<p>What are the roots of 3 and 7, respectively?</p>
<p>Answer:</p>
<p>6 and 6</p>
<p>The root of 3 is 6: 3-&gt;5-&gt;2-&gt;6</p>
<p>The root of 7 is 6: 7-&gt;1-&gt;9-&gt;5-&gt;2-&gt;6</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dynamic-Connectivity-动态连通性&quot;&gt;&lt;a href=&quot;#Dynamic-Connectivity-动态连通性&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Connectivity(动态连通性)&quot;&gt;&lt;/a&gt;Dynamic
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为什么要把插座变量声明为弱引用？</title>
    <link href="http://yoursite.com/2016/11/25/19.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8A%8A%E6%8F%92%E5%BA%A7%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E4%B8%BA%E5%BC%B1%E5%BC%95%E7%94%A8%EF%BC%9F/"/>
    <id>http://yoursite.com/2016/11/25/19. 为什么要把插座变量声明为弱引用？/</id>
    <published>2016-11-25T02:33:07.000Z</published>
    <updated>2016-11-25T08:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS上强引用循环的几处场景"><a href="#iOS上强引用循环的几处场景" class="headerlink" title="iOS上强引用循环的几处场景"></a>iOS上强引用循环的几处场景</h1><h3 id="为什么要把插座变量声明为弱引用？"><a href="#为什么要把插座变量声明为弱引用？" class="headerlink" title="为什么要把插座变量声明为弱引用？"></a>为什么要把插座变量声明为弱引用？</h3><p>将插座变量声明为弱引用是一个编程约定，当系统的可用内存偏少时，视图控制器会自动释放其视图并在之后需要显示时再创建。因此，视图控制器应该使用弱引用特性的插座变量指向view的子视图，以便在释放view时同时释放view的所有子视图</p>
<p>来自《iOSProgramming》4th edition</p>
<h3 id="委托弱引用"><a href="#委托弱引用" class="headerlink" title="委托弱引用"></a>委托弱引用</h3><p>对象及其委托之间产生强引用循环。例如<code>BNRHypnosisViewController</code>是<code>UITextfield</code>对象的委托，而且<code>UITextfield</code>对象是<code>BNRHypnosisViewController</code>的强引用属性，如果<code>UITextfield</code>对象再对其委托保持强引用，就会在两者之间产生强引用循环，很容易造成内存泄露</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS上强引用循环的几处场景&quot;&gt;&lt;a href=&quot;#iOS上强引用循环的几处场景&quot; class=&quot;headerlink&quot; title=&quot;iOS上强引用循环的几处场景&quot;&gt;&lt;/a&gt;iOS上强引用循环的几处场景&lt;/h1&gt;&lt;h3 id=&quot;为什么要把插座变量声明为弱引用？&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Objective-C属性声明的关键字</title>
    <link href="http://yoursite.com/2016/11/23/18.%20%E5%B1%9E%E6%80%A7%E5%A3%B0%E6%98%8E%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2016/11/23/18. 属性声明的关键字/</id>
    <published>2016-11-23T10:44:11.000Z</published>
    <updated>2016-11-24T06:17:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Objective-C声明属性的关键字介绍"><a href="#Objective-C声明属性的关键字介绍" class="headerlink" title="Objective-C声明属性的关键字介绍"></a>Objective-C声明属性的关键字介绍</h1><h3 id="readonly和readwrite"><a href="#readonly和readwrite" class="headerlink" title="readonly和readwrite"></a><code>readonly</code>和<code>readwrite</code></h3><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>只有getter方法，没有setter方法，杜绝了从外部访问属性的可能，但是在本身也无法使用self调用方法</p>
<p>解决方法：把属性的声明写在.m文件中，可以避免外界的访问，也可以在本身使用self调用方法</p>
<p>默认是readwrite</p>
<h3 id="strong-vs-weak"><a href="#strong-vs-weak" class="headerlink" title="strong vs weak"></a>strong vs weak</h3><p>不同</p>
<ul>
<li>引用计数+1</li>
</ul>
<p>strong是强引用，属性声明时默认就是强引用</p>
<h4 id="注意：强引用循环-循环引用现象"><a href="#注意：强引用循环-循环引用现象" class="headerlink" title="注意：强引用循环/循环引用现象"></a>注意：强引用循环/循环引用现象</h4><p>说明：循环引用是指，两个对象之间相互强引用，导致无法被释放，造成内存泄露。一般是存在父子关系的时候容易发生这种现象，比如两个包类，其中背包里面拥有钱包。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 来自《iOS编程》第四版</span></div><div class="line"><span class="comment">// BNRItem.h</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BNRItem *containedItem;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BNRItem *container;</div><div class="line"></div><div class="line"><span class="comment">// BNRItem.m</span></div><div class="line">- (<span class="keyword">void</span>)setContainedItem:(BNRItem *)containedItem &#123;</div><div class="line">    _containedItem = containedItem;</div><div class="line">  <span class="comment">// 将item加入容纳它的BNRItem对象时，</span></div><div class="line">  <span class="comment">// 会将它的container实例变量指向容纳它的对象</span></div><div class="line">    <span class="keyword">self</span>.containedItem.container = <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Destroyed %@"</span>, <span class="keyword">self</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"BNRItem.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 创建一个NSMutableArray对象，并用items变量保存该对象的地址</span></div><div class="line">        <span class="built_in">NSMutableArray</span> *items = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">        BNRItem *backpack = [[BNRItem alloc] initWithItemName:<span class="string">@"Backpack"</span>];</div><div class="line">        [items addObject:backpack];</div><div class="line">        </div><div class="line">        BNRItem *calculator = [[BNRItem alloc] initWithItemName:<span class="string">@"Calculator"</span>];</div><div class="line">        [items addObject:calculator];</div><div class="line">        </div><div class="line">        backpack.containedItem = calculator;</div><div class="line">        </div><div class="line">        backpack = <span class="literal">nil</span>;</div><div class="line">        calculator = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">for</span> (BNRItem *item <span class="keyword">in</span> items) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, item);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Setting items to nil...."</span>);</div><div class="line">        items = <span class="literal">nil</span>; </div><div class="line">    &#125;</div><div class="line">  <span class="comment">//此时输出结果是</span></div><div class="line">  <span class="comment">/*</span></div><div class="line">  2016-11-24 13:50:44.023481 RandomItems[36837:2040846] Backpack () :Worth $0, recorded on 2016-11-24 05:50:44 +0000</div><div class="line">2016-11-24 13:50:44.023586 RandomItems[36837:2040846] Calculator () :Worth $0, recorded on 2016-11-24 05:50:44 +0000</div><div class="line">2016-11-24 13:50:44.023605 RandomItems[36837:2040846] Setting items to nil....</div><div class="line">Program ended with exit code: 0</div><div class="line">  </div><div class="line">  */</div></pre></td></tr></table></figure>
<p>由于我们重写了dealloc方法，在对象即将被释放时，应该调用dealloc方法，这里并没有调用，说明这两个对象并没有正常释放。</p>
<p>首先确定父子关系，确定之后，让父对象拥有子对象，子对象不能拥有父对象，比如backpack是父对象，calculator是子对象，根据这个规则名，将backpack指向<code>calculator(_containedItem)</code>的指针保留为强引用，将calculator指向<code>backpack(_container)</code>的指针保留为弱引用。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) BNRItem *container;</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="comment">/* </span></div><div class="line">2016-11-24 14:10:18.675480 RandomItems[37054:2053319] Backpack () :Worth $0, recorded on 2016-11-24 06:10:18 +0000</div><div class="line">2016-11-24 14:10:18.675578 RandomItems[37054:2053319] Calculator () :Worth $0, recorded on 2016-11-24 06:10:18 +0000</div><div class="line">2016-11-24 14:10:18.675595 RandomItems[37054:2053319] Setting items to nil....</div><div class="line">2016-11-24 14:10:18.675635 RandomItems[37054:2053319] Destroyed Backpack () :Worth $0, recorded on 2016-11-24 06:10:18 +0000</div><div class="line">2016-11-24 14:10:18.675929 RandomItems[37054:2053319] Destroyed Calculator () :Worth $0, recorded on </div><div class="line"></div><div class="line">*/</div></pre></td></tr></table></figure>
<p>比如背包和钱包是同一品牌的产品，我们用一个类来代替，类中有两个属性，(containedItem)一个是里面放了什么东西，(container)一个是被什么东西包含了，在把钱包放入背包后，背包的containedItem指向了钱包，而钱包的container指向了背包，就造成了循环引用，解决方法是，把钱包的指向改为弱引用。</p>
<h3 id="strong-vs-assign"><a href="#strong-vs-assign" class="headerlink" title="strong vs assign"></a>strong vs assign</h3><p>不同</p>
<ul>
<li>strong修饰OC对象</li>
<li>strong强引用，引用计数+1</li>
</ul>
<ul>
<li>assign修饰非OC对象</li>
<li>assign拷贝值，不做引用计数</li>
</ul>
<p>assign可以用在非OC对象上吗？</p>
<p>可以，但不会做引用计数+1</p>
<h3 id="weak-vs-assign"><a href="#weak-vs-assign" class="headerlink" title="weak vs assign"></a>weak vs assign</h3><p>相同</p>
<ul>
<li>可以修饰OC对象</li>
<li>不做强引用，引用计数不加1</li>
</ul>
<p>不同</p>
<ul>
<li>weak在对象释放时自动置为nil</li>
<li>assign保留原始值，释放对象时不会置为nil（不安全）(unsafe_unretained)</li>
</ul>
<p>场景：在对象被释放之后，weak会将对象置为nil，准确的说是对象的地址置为nil，而assign则不会，所以就有可能发生一种现象，如果对象被释放了，而assign修饰的对象的指针还在指向着那块内存地址，当其他对象使用了这块内存地址时，就容易发生冲突，基础类型不会发生这种情况，所以我们应该使用weak来修饰对象，用assign来修饰基础类型。</p>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>使用copy关键字声明属性，在使用过程中，内部会调用copyWithZone方法，重新生成一个新的不可变的类型并赋值返回，这样做的好处是，当拥有一个可变类型的子类来使用时，就可以避免可变类型的子类对象进行的反复修改，避免导致不可控现象。</p>
<p>举例说明</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="comment">// insert code here...</span></div><div class="line">        </div><div class="line">        <span class="built_in">NSMutableString</span> *mutableString = [[<span class="built_in">NSMutableString</span> alloc] init];</div><div class="line">        mutableString = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"1234"</span>];</div><div class="line">        Person *p1 = [[Person alloc] init];</div><div class="line">        </div><div class="line">        p1.name = mutableString;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p1.name = %@ --&gt; %p"</span>, p1.name, p1.name);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"mutableString = %@ --&gt; %p"</span>, mutableString, mutableString);</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"appendString之后"</span>);</div><div class="line">        [mutableString appendString:<span class="string">@"5"</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p1.name = %@"</span>, p1.name);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"mutableString = %@"</span>, mutableString);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用copy关键字声明的name</span></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">2016-11-24 13:25:12.320037 copy[36455:2025654] p1.name = 1234 --&gt; 0x3433323145</div><div class="line">2016-11-24 13:25:12.321110 copy[36455:2025654] mutableString = 1234 --&gt; 0x1003065a0</div><div class="line">2016-11-24 13:25:12.321189 copy[36455:2025654] appendString之后</div><div class="line">2016-11-24 13:25:12.321433 copy[36455:2025654] p1.name = 1234</div><div class="line">2016-11-24 13:25:12.321475 copy[36455:2025654] mutableString = 12345</div><div class="line"></div><div class="line">*/</div></pre></td></tr></table></figure>
<p>可以看到，在执行完毕<code>p1.name = mutableString;</code>之后，两个指针的地址就不同了，这就是因为重新生成了一个地址来指向<code>p1.name</code>，并且是不可变类型的。而<code>mutableString</code>还在那里。</p>
<p>缺点：频繁使用会造成内存的浪费，所以我们只在必要时使用</p>
<h3 id="nonatomic-vs-atomic"><a href="#nonatomic-vs-atomic" class="headerlink" title="nonatomic vs atomic"></a>nonatomic vs atomic</h3><p>在iOS上我们用nonatomic，默认时atomic，所以我们要将其声明</p>
<p>说明，两者的区别是使用时保证线程安全，在多线程中调用属性可能会发生线程锁的问题，不过苹果声明，在iOS上不必考虑这个问题，缺点是会影响性能。</p>
<h3 id="getter-vs-setter"><a href="#getter-vs-setter" class="headerlink" title="getter vs setter"></a>getter vs setter</h3><p>可以用来指定getter和setter的方法名，常用于BOOL中</p>
<p>如有错误，欢迎指正</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Objective-C声明属性的关键字介绍&quot;&gt;&lt;a href=&quot;#Objective-C声明属性的关键字介绍&quot; class=&quot;headerlink&quot; title=&quot;Objective-C声明属性的关键字介绍&quot;&gt;&lt;/a&gt;Objective-C声明属性的关键字介绍&lt;/
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>指针变量的写法</title>
    <link href="http://yoursite.com/2016/11/23/17.%20%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/23/17. 指针变量的写法/</id>
    <published>2016-11-23T04:56:24.000Z</published>
    <updated>2016-11-23T05:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针变量的写法"><a href="#指针变量的写法" class="headerlink" title="指针变量的写法"></a>指针变量的写法</h1><p>在刚学习C语言的时候，我对于指针很畏惧，很大程度上是因为它那个恶心的<code>*</code>，后来接触到了以后，发现确实挺恶心的</p>
<p>关于指针变量的写法不外乎这几种</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> *foo;</div><div class="line"><span class="keyword">int</span> * foo;</div><div class="line"><span class="keyword">int</span>* foo;</div></pre></td></tr></table></figure>
<p>第一种最流行，它写在了变量名前面，能够很清晰的表明这是个指针变量，但我觉得也有问题，为什么？先举个例子</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">foo = &amp;a;</div><div class="line">*foo = <span class="number">100</span>;</div></pre></td></tr></table></figure>
<p>注意到了吗？</p>
<p>在使用指针变量的时候，我们不会把那个<code>*</code>再写出来了，反而，如果你写出来的话，代表的意思就不是指针变量了，而是指针变量所指向变量。</p>
<p>如果我写了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> *foo;</div><div class="line">foo = &amp;a;</div></pre></td></tr></table></figure>
<p>我会感觉到这样的代码，让我有一点歧义，明明上面的foo变量在声明时带上了*表明它是一个指针变量，而下面的带上了就成了另外一种意思，所以我有点讨厌这样的写法。</p>
<p>第二种写法，很清晰，但也很分散，这样的代码估计很少有人写，另外也有一点歧义，太像乘<code>*</code>了</p>
<p>第三种写法，直接写在类型的后面，写的人比第二种多一些，我觉得不错，避免了第一种的歧义。</p>
<p>不管你怎么写，在实际当中肯定还是要遵守团队的规范</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;指针变量的写法&quot;&gt;&lt;a href=&quot;#指针变量的写法&quot; class=&quot;headerlink&quot; title=&quot;指针变量的写法&quot;&gt;&lt;/a&gt;指针变量的写法&lt;/h1&gt;&lt;p&gt;在刚学习C语言的时候，我对于指针很畏惧，很大程度上是因为它那个恶心的&lt;code&gt;*&lt;/code&gt;，后
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS界面开发（基础篇）主观题考试</title>
    <link href="http://yoursite.com/2016/11/21/16.%20iOS%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89%E4%B8%BB%E8%A7%82%E9%A2%98%E8%80%83%E8%AF%95/"/>
    <id>http://yoursite.com/2016/11/21/16. iOS界面开发（基础篇）主观题考试/</id>
    <published>2016-11-21T06:15:00.000Z</published>
    <updated>2016-11-21T06:16:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS界面开发（基础篇）主观题考试"><a href="#iOS界面开发（基础篇）主观题考试" class="headerlink" title="iOS界面开发（基础篇）主观题考试"></a>iOS界面开发（基础篇）主观题考试</h1><p><img src="http://nos.netease.com/edu-image/534CA7839EC540CB7C946BCEB1DEE313.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="img"></p>
<p>要求：</p>
<ol>
<li><p>使用导航栏和UITableViewController构造一个和上面截图基本类似界面</p>
<p><strong>界面只要求布局方位一致即可，不要求位置间距完全一致。每个商品Cell的 粉色字体 部分（限时购、特价、限购X件），不需要实现，也不用占位置</strong></p>
<p>​</p>
</li>
<li><p>导航栏中间Title为 购物车（商品种类数量），例如上图是三类商品，那就是 购物车(3)，如果删除了一个商品，需要同步变成 购物车(2)</p>
</li>
<li><p>导航栏右侧的编辑和图标，可以不响应动作，但是需要显示出来</p>
</li>
<li><p>购物车里面的所有商品按照仓库分组，也就是说数据结构是：</p>
<p>[ 仓库1 : [商品1, 商品2, …], 仓库2 : [商品1, 商品2, 商品3, …] ]</p>
</li>
<li><p>每个仓库的Section由：仓库名称、商品列表、仓库结算信息组成</p>
</li>
<li><p>仓库名称左侧选择按钮：</p>
<p>a. 点击选中，该Section下的所有商品列表需要选中</p>
<p>b. 取消选中，该Section下的所有商品列表需要取消选中</p>
<p>c. 如果该Section下的所有商品列表只有部分选中，其应该为未选中：</p>
<p><img src="http://nos.netease.com/edu-image/A4094EF2F9391856EBDD73D450D61203.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="img"></p>
</li>
<li><p>仓库结算信息，只需要包括 <strong>本仓总计（不含税）**</strong> **这一项，该项的数值是：该Section下的被选中的商品列表价格之和；其他结算信息项不用实现。</p>
</li>
<li><p>仓库和仓库Section间需要有大约10dp的灰色间隔</p>
</li>
<li><p>每个商品Cell需要支持右侧的滑动删除：</p>
<p><img src="http://nos.netease.com/edu-image/68A76D49B9F8B79C60D81A420AFFEA51.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="img"></p>
<p>当点击删除时，该商品需要被删除，导航栏的数目、仓库的左侧选中状态、仓库结算信息需要更新。</p>
<p>税费点击展开，其中点击展开需要有高度变化动画（效果参考考拉海购APP）：</p>
<p><img src="http://nos.netease.com/edu-image/81F06AA9BF87B6FE32B46C6930D7CDC2.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="img"></p>
</li>
<li><p>每个商品的文字描述最多为两行，超过显示… 。</p>
<p>这里要求实现：a. 一行商品标题显示效果 b. 商品标题过长导致两行并跟随… 的显示效果。</p>
</li>
<li><p>每个商品Cell需要执行左侧的选择框的选中和取消选中，选中状态改变时，仓库的左侧选中状态、仓库结算信息需要更新。</p>
</li>
<li><p>整个页面底部的全部结算界面，其展示信息不需要变化，固定写死即可，也不用响应动作；只需要固定悬浮在屏幕的底部，不随滚动条滚动。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS界面开发（基础篇）主观题考试&quot;&gt;&lt;a href=&quot;#iOS界面开发（基础篇）主观题考试&quot; class=&quot;headerlink&quot; title=&quot;iOS界面开发（基础篇）主观题考试&quot;&gt;&lt;/a&gt;iOS界面开发（基础篇）主观题考试&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫四周课程</title>
    <link href="http://yoursite.com/2016/11/21/15.%20Python%E7%88%AC%E8%99%AB%E5%9B%9B%E5%91%A8%E8%AF%BE%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/11/21/15. Python爬虫四周课程/</id>
    <published>2016-11-21T01:32:00.000Z</published>
    <updated>2016-11-21T01:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python爬虫四周课程"><a href="#Python爬虫四周课程" class="headerlink" title="Python爬虫四周课程"></a>Python爬虫四周课程</h1><ol>
<li><p>课程相关</p>
<ol>
<li>答疑时间: 14:00 - 17:00</li>
<li>直播时间: 另行通知</li>
<li>其他</li>
</ol>
</li>
<li><p>课程简介:</p>
<p>爬、存、查、现</p>
</li>
<li><p>爬虫</p>
<p>分为定向和非定向(Google、Baidu)</p>
<ol>
<li>我们爬取的是指定网站的爬虫，</li>
<li>我们只需要使用一个数据库存储，百度是分层集群存储</li>
<li>哈希表存储线性结构</li>
</ol>
<p>爬虫 = 数据请求(HTTP) + 数据解析(html/json)</p>
<p>Debug: </p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python爬虫四周课程&quot;&gt;&lt;a href=&quot;#Python爬虫四周课程&quot; class=&quot;headerlink&quot; title=&quot;Python爬虫四周课程&quot;&gt;&lt;/a&gt;Python爬虫四周课程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;课程相关&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;答疑时
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>让你的 alfred 支持拼音搜索</title>
    <link href="http://yoursite.com/2016/11/13/14.%20%E8%AE%A9%E4%BD%A0%E7%9A%84alfred%E6%94%AF%E6%8C%81%E6%8B%BC%E9%9F%B3%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2016/11/13/14. 让你的alfred支持拼音搜索/</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-11-13T10:19:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="让你的-Alfred-支持拼音搜索"><a href="#让你的-Alfred-支持拼音搜索" class="headerlink" title="让你的 Alfred 支持拼音搜索"></a>让你的 Alfred 支持拼音搜索</h1><p>来源：<a href="https://gist.github.com/tiann/35fb758c18036d7f8640" target="_blank" rel="external">https://gist.github.com/tiann/35fb758c18036d7f8640</a> | <a href="https://www.v2ex.com/t/248284" target="_blank" rel="external">https://www.v2ex.com/t/248284</a></p>
<ol>
<li><p>安装 <a href="https://github.com/mozillazg/python-pinyin" target="_blank" rel="external">pypinyin</a> 这个库（可能需要sudo）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install pypinyin</div></pre></td></tr></table></figure>
</li>
<li><p>执行<strong>alfred-pinyin.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">python Path/filename.py</div><div class="line"><span class="comment">#python为命令名称，这里是python2， 后面的是文件的路径和名称</span></div></pre></td></tr></table></figure>
<p>下载地址 <a href="https://gist.github.com/tiann/35fb758c18036d7f8640" target="_blank" rel="external">https://gist.github.com/tiann/35fb758c18036d7f8640</a> </p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;让你的-Alfred-支持拼音搜索&quot;&gt;&lt;a href=&quot;#让你的-Alfred-支持拼音搜索&quot; class=&quot;headerlink&quot; title=&quot;让你的 Alfred 支持拼音搜索&quot;&gt;&lt;/a&gt;让你的 Alfred 支持拼音搜索&lt;/h1&gt;&lt;p&gt;来源：&lt;a href
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>西单大悦城Apple Store体验</title>
    <link href="http://yoursite.com/2016/11/12/13.%20%E8%A5%BF%E5%8D%95%E5%A4%A7%E6%82%A6%E5%9F%8EApple%20Store%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2016/11/12/13. 西单大悦城Apple Store体验/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-11-13T09:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="西单大悦城Apple-Store体验"><a href="#西单大悦城Apple-Store体验" class="headerlink" title="西单大悦城Apple Store体验"></a>西单大悦城Apple Store体验</h1><p>昨天去了北京的西单，路过Apple Store，焉能不进去看看？</p>
<p>懒得去周边的商场，就一直呆了很久，对几个东西有点感触：</p>
<ul>
<li>iPhone7</li>
<li>Bose降噪耳机</li>
<li>全新的MacBook Pro</li>
</ul>
<h2 id="iPhone7"><a href="#iPhone7" class="headerlink" title="iPhone7"></a>iPhone7</h2><p>玩了玩iPhone7 和 iPhone7 Plus，发现大屏的体验还是不错的，改变了我对大屏手机的看法，也看了景深人像的功能，不过觉得没那么重要，Plus的作用还是大，这样的话可以接收更多的信息。</p>
<p>把玩了许久iPhone7，又去体验体验iPhone6s，因为有不同，才能够更深刻的体验到变化。iPhone7的震动反馈做的更好，代替了原来单一的震动模式，增加了很多新的种类，结合着全新的Home Button，有了一个全新的反馈体验。</p>
<p>对于新的Home Button，总结来说，已经不是实体按键了，看来Apple也放弃了实体键，最终转向了虚拟按键，本来还不是很适应，但当我把玩了一段时间的iPhone7之后，我再去用iPhone6s时，顿时感受手更累了，想回到iPhone7上面去。</p>
<h2 id="Bose降噪耳机"><a href="#Bose降噪耳机" class="headerlink" title="Bose降噪耳机"></a>Bose降噪耳机</h2><p>以前就听过降噪耳机的用武之地，以前不觉得有什么，果然有些东西你不体会、不体验是不会知道的，当我戴上耳机的那一刹那，真是觉得置身事外，摘下耳机又回到了这个世界。倘若戴上这个耳机，走入地铁早高峰的洪流之中，至少耳朵是干净的。</p>
<h2 id="全新的Macbook-Pro"><a href="#全新的Macbook-Pro" class="headerlink" title="全新的Macbook Pro"></a>全新的Macbook Pro</h2><p>没有带TouchBar的13寸的Macbook Pro，机身轻盈了不少，但13寸的好像只有2个USB-C接口，背面的ＬＯＧＯ也不亮了，这些都可以，唯一不能让人接受的就是键盘了，键盘为了配合机身，变得更薄了，但失去了触感，按下去好像没有按一样，官方声称这是第二代蝶式键盘，可我觉得和第一代没有什么改进，真是让人悲伤，或许以后会改变罢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;西单大悦城Apple-Store体验&quot;&gt;&lt;a href=&quot;#西单大悦城Apple-Store体验&quot; class=&quot;headerlink&quot; title=&quot;西单大悦城Apple Store体验&quot;&gt;&lt;/a&gt;西单大悦城Apple Store体验&lt;/h1&gt;&lt;p&gt;昨天去了北京
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>导航控制器的按钮设置(Storyboard)</title>
    <link href="http://yoursite.com/2016/11/11/12.%20%E5%AF%BC%E8%88%AA%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E6%8C%89%E9%92%AE%E8%AE%BE%E7%BD%AE(Storyboard)/"/>
    <id>http://yoursite.com/2016/11/11/12. 导航控制器的按钮设置(Storyboard)/</id>
    <published>2016-11-11T07:56:53.000Z</published>
    <updated>2016-11-11T08:16:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导航控制器的按钮设置-Storyboard"><a href="#导航控制器的按钮设置-Storyboard" class="headerlink" title="导航控制器的按钮设置(Storyboard)"></a>导航控制器的按钮设置(Storyboard)</h1><p>效果图:</p>

<ol>
<li><p>新建UIView, 放入 ViewController 中 </p>
</li>
<li><p>设置 UIView 的布局上左右都为0, 高度为44</p>

</li>
<li><p>更新Frame</p>
 
</li>
<li><p>放入3个 Button 到 UIView 中</p>
</li>
<li><p>设置第一个 Button 的布局, 上下左右都为0</p>

</li>
<li><p>设置第二个 Button 的布局, 右和下为0</p>

</li>
<li><p>在上一步的基础上, 设置第二个 Button 和第一个 Button 相同宽度和高度, </p>
<ol>
<li>按住 Control 键, 拖拽第二个 Button 到第一个 Button 松手</li>
<li>按住 Shift 键, 选中 Equal Widths 和 Equal Heights</li>
<li>最后点击 Add Constraints </li>
</ol>

</li>
<li><p>设置第三个 Button 的布局, 右和下为0 (同第6步)</p>
</li>
<li><p>在上一步的基础上, 设置第三个 Button 和第二个 Button 相同宽度和高度 (同第7步)</p>
</li>
<li><p>选中三个 Button 同时按下<code>option</code> + <code>Command</code> + <code>=</code> 更新 Frame</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导航控制器的按钮设置-Storyboard&quot;&gt;&lt;a href=&quot;#导航控制器的按钮设置-Storyboard&quot; class=&quot;headerlink&quot; title=&quot;导航控制器的按钮设置(Storyboard)&quot;&gt;&lt;/a&gt;导航控制器的按钮设置(Storyboard)
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Storyboard" scheme="http://yoursite.com/tags/Storyboard/"/>
    
  </entry>
  
  <entry>
    <title>饿了么网上订餐流程</title>
    <link href="http://yoursite.com/2016/11/09/10.%20%E9%A5%BF%E4%BA%86%E4%B9%88%E7%BD%91%E4%B8%8A%E8%AE%A2%E9%A4%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/11/09/10. 饿了么网上订餐流程/</id>
    <published>2016-11-08T16:00:00.000Z</published>
    <updated>2016-11-11T00:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="饿了么网上订餐流程"><a href="#饿了么网上订餐流程" class="headerlink" title="饿了么网上订餐流程"></a>饿了么网上订餐流程</h1><h2 id="毕业设计——网上订餐系统技术调研"><a href="#毕业设计——网上订餐系统技术调研" class="headerlink" title="毕业设计——网上订餐系统技术调研"></a>毕业设计——网上订餐系统技术调研</h2><ol>
<li><p>检测地理位置（可以省略或简化，比如直接选择地点，因为后边会填写详细地点，所以这里无需深究）</p>
</li>
<li><p>选择商家（可以按照位置分类）</p>
</li>
<li><p>选择商品（每个商家的商品）</p>
</li>
<li><p>结算（计算）</p>
</li>
<li><p>选择收获地址和支付方式，填写详细信息（）</p>
</li>
<li><p>确定下单</p>
</li>
<li><p>如果在线支付转到支付页面</p>
</li>
<li><p>判断支付是否成功</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;饿了么网上订餐流程&quot;&gt;&lt;a href=&quot;#饿了么网上订餐流程&quot; class=&quot;headerlink&quot; title=&quot;饿了么网上订餐流程&quot;&gt;&lt;/a&gt;饿了么网上订餐流程&lt;/h1&gt;&lt;h2 id=&quot;毕业设计——网上订餐系统技术调研&quot;&gt;&lt;a href=&quot;#毕业设计——网上订
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>熟悉Django的模板语言——Python第四周第二节</title>
    <link href="http://yoursite.com/2016/11/09/11.%20%E7%86%9F%E6%82%89Django%E7%9A%84%E6%A8%A1%E6%9D%BF%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94Python%E7%AC%AC%E5%9B%9B%E5%91%A8%E7%AC%AC%E4%BA%8C%E8%8A%82/"/>
    <id>http://yoursite.com/2016/11/09/11. 熟悉Django的模板语言——Python第四周第二节/</id>
    <published>2016-11-08T16:00:00.000Z</published>
    <updated>2016-11-11T00:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="熟悉Django的模板语言——Python第四周第二节"><a href="#熟悉Django的模板语言——Python第四周第二节" class="headerlink" title="熟悉Django的模板语言——Python第四周第二节"></a>熟悉Django的模板语言——Python第四周第二节</h1><h4 id="render-：渲染"><a href="#render-：渲染" class="headerlink" title="render()：渲染"></a>render()：渲染</h4><p>接收三个函数</p>
<ul>
<li>request 用户点击的request</li>
<li>x.html 我们指定模板的名称</li>
<li>context 上下文</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;熟悉Django的模板语言——Python第四周第二节&quot;&gt;&lt;a href=&quot;#熟悉Django的模板语言——Python第四周第二节&quot; class=&quot;headerlink&quot; title=&quot;熟悉Django的模板语言——Python第四周第二节&quot;&gt;&lt;/a&gt;熟悉Dja
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Node环境介绍</title>
    <link href="http://yoursite.com/2016/11/08/8.%20Node%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2016/11/08/8. Node环境介绍/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-11T00:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node环境介绍"><a href="#Node环境介绍" class="headerlink" title="Node环境介绍"></a>Node环境介绍</h1><h2 id="普通的node项目环境"><a href="#普通的node项目环境" class="headerlink" title="普通的node项目环境"></a>普通的node项目环境</h2><p>主文件 app.js：相关的设置，包含路由的配置和一些其他重要的逻辑。这是我们开启服务后运行的。</p>
<p>路由：所有与页面相关的逻辑和从app.js中抽离出来的它所依赖的基础函数，比如从数据库中获取数据并将其写入HTML中</p>
<p>Node.js项目文件package.json：包依赖和其他元数据</p>
<p>node_modules中的依赖：通过package.json安装的第三方模块</p>
<p>数据库：一个MongoDB和元数据的实例</p>
<p>模板：以.jade结尾的文件</p>
<p>配置文件config.json：与应用安全性无关的设置，比如应用的标题</p>
<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>node_modules：Express.js和第三方模块的依赖都在这个目录下</p>
<p>views：Jade或者其他模版引擎文件</p>
<p>routes：包含请求处理程序的Node.js模块</p>
<p>db：MongoDB的种子数据和脚本</p>
<p>public：所有前端的静态文件，包括HTML、CSS、浏览器端的Javascript和Stylus或者其他CSS框架文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node环境介绍&quot;&gt;&lt;a href=&quot;#Node环境介绍&quot; class=&quot;headerlink&quot; title=&quot;Node环境介绍&quot;&gt;&lt;/a&gt;Node环境介绍&lt;/h1&gt;&lt;h2 id=&quot;普通的node项目环境&quot;&gt;&lt;a href=&quot;#普通的node项目环境&quot; class
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Python库安装</title>
    <link href="http://yoursite.com/2016/11/08/9.%20Python%E5%BA%93%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2016/11/08/9. Python库安装/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-11T00:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python库安装"><a href="#Python库安装" class="headerlink" title="Python库安装"></a>Python库安装</h1><p>pip 一键安装库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">pip3 install requests bs4 pymongo mongoengine jupy</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python库安装&quot;&gt;&lt;a href=&quot;#Python库安装&quot; class=&quot;headerlink&quot; title=&quot;Python库安装&quot;&gt;&lt;/a&gt;Python库安装&lt;/h1&gt;&lt;p&gt;pip 一键安装库&lt;/p&gt;
&lt;figure class=&quot;highlight pyt
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>博学谷直播介绍Vue</title>
    <link href="http://yoursite.com/2016/11/03/7.%20%E5%8D%9A%E5%AD%A6%E8%B0%B7%E7%9B%B4%E6%92%AD%E4%BB%8B%E7%BB%8DVue.js/"/>
    <id>http://yoursite.com/2016/11/03/7. 博学谷直播介绍Vue.js/</id>
    <published>2016-11-03T12:17:00.000Z</published>
    <updated>2016-11-03T12:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><ul>
<li>客户端Javascript框架</li>
<li>用于数据驱动的现代web开发</li>
<li>实现了MVVM思想</li>
</ul>
<h4 id="比如设计一个注册页面"><a href="#比如设计一个注册页面" class="headerlink" title="比如设计一个注册页面"></a>比如设计一个注册页面</h4><p>传统方式：</p>
<p>找到用户名的文本框，捕捉鼠标偏离的事件，判断文本框的内容进行是否存在的校验</p>
<p>问题：</p>
<ul>
<li>界面代码重复使用率低</li>
</ul>
<ul>
<li>需要的变化大部分是在界面上，而</li>
</ul>
<p>应用程序的基本逻辑：把数据放到界面上显示</p>
<p>理想状态，界面和数据独立</p>
<p>结论：用数据驱动界面，把界面放置到最后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var app = new Vue(&#123;</div><div class="line">  //业务逻辑抽象</div><div class="line">	data: &#123;</div><div class="line">    username: &apos;&apos;,</div><div class="line">	email: &apos;&apos;,</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="如何使用Vue-js"><a href="#如何使用Vue-js" class="headerlink" title="如何使用Vue.js"></a>如何使用Vue.js</h4><p>Sublime</p>
<h4 id="Vue作者建议学习顺序"><a href="#Vue作者建议学习顺序" class="headerlink" title="Vue作者建议学习顺序"></a>Vue作者建议学习顺序</h4><p>从基础着手</p>
<p>通读javascript基础</p>
<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li>找出来页面最核心组成，用数据的方式描述<ol>
<li>​</li>
</ol>
</li>
<li>根据设计的结构完成ViewModel的编写</li>
<li>​</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;intput <span class="class"><span class="keyword">class</span> </span>= <span class="string">""</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-js&quot;&gt;&lt;a href=&quot;#Vue-js&quot; class=&quot;headerlink&quot; title=&quot;Vue.js&quot;&gt;&lt;/a&gt;Vue.js&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;客户端Javascript框架&lt;/li&gt;
&lt;li&gt;用于数据驱动的现代web开发&lt;/li&gt;
&lt;li
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu开启root——以腾讯云为例</title>
    <link href="http://yoursite.com/2016/11/03/6.%20Ubuntu%E5%BC%80%E5%90%AFroot%E2%80%94%E2%80%94%E4%BB%A5%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%BA%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/11/03/6. Ubuntu开启root——以腾讯云为例/</id>
    <published>2016-11-03T05:33:49.000Z</published>
    <updated>2016-11-03T05:40:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu默认没有启用root账户，这有利于安全，但在实际操作中，我们常常需要访问一些需要root权限才可以访问的目录，需要启动root账户</p>
<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p>登陆服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh ubuntu@yoursiteIP</div></pre></td></tr></table></figure>
</li>
<li><p>修改root密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo passwd root</div></pre></td></tr></table></figure>
</li>
<li><p>修改ssh配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo vi /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<p>找到  <code>PermitRootLogin</code> 这项 将其改为 <code>yes</code></p>

</li>
<li><p>退出并重启ssh服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo service ssh restart</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu默认没有启用root账户，这有利于安全，但在实际操作中，我们常常需要访问一些需要root权限才可以访问的目录，需要启动root账户&lt;/p&gt;
&lt;h4 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>npm install速度慢的解决方法</title>
    <link href="http://yoursite.com/2016/11/02/5.%20npm%20install%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/02/5. npm install速度慢的解决方法/</id>
    <published>2016-11-02T09:33:35.000Z</published>
    <updated>2016-11-02T12:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用npm安装的时候经常遇到npm install速度慢的情况，这是因为我们的网络和npm的服务器相隔较远，延迟很大造成的，怎么解决呢？</p>
<h2 id="使用taobao镜像"><a href="#使用taobao镜像" class="headerlink" title="使用taobao镜像"></a><a href="https://npm.taobao.org" target="_blank" rel="external">使用taobao镜像</a></h2><p>有两种方式，本文中的所有代码都需要在终端中输入</p>
<h3 id="一、在命令后面加参数"><a href="#一、在命令后面加参数" class="headerlink" title="一、在命令后面加参数"></a>一、在命令后面加参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>这代表了我们可以从taobao的服务器中来获取，就解决了速度慢的问题。</p>
<h3 id="二、使用cnpm"><a href="#二、使用cnpm" class="headerlink" title="二、使用cnpm"></a>二、使用<code>cnpm</code></h3><p>使用<code>cnpm</code>的目的是可以一劳永逸的代替<code>npm</code>命令，这样的话就方便多了</p>
<h5 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装<code>cnpm</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><p>当发现输入命令之后，后面的网址是taobao的时候就说明已经成功了</p>

<h3 id="使用taobao镜像的缺点："><a href="#使用taobao镜像的缺点：" class="headerlink" title="使用taobao镜像的缺点："></a>使用taobao镜像的缺点：</h3><ul>
<li>不能使用<code>publish</code>命令</li>
<li>和<code>npm</code>官方镜像源有10分钟的延迟</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用npm安装的时候经常遇到npm install速度慢的情况，这是因为我们的网络和npm的服务器相隔较远，延迟很大造成的，怎么解决呢？&lt;/p&gt;
&lt;h2 id=&quot;使用taobao镜像&quot;&gt;&lt;a href=&quot;#使用taobao镜像&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>将购买的域名配置到github pages中</title>
    <link href="http://yoursite.com/2016/11/01/4.%20%E5%B0%86%E8%B4%AD%E4%B9%B0%E7%9A%84%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE%E5%88%B0github%20pages%E4%B8%AD/"/>
    <id>http://yoursite.com/2016/11/01/4. 将购买的域名配置到github pages中/</id>
    <published>2016-11-01T12:28:40.000Z</published>
    <updated>2016-11-02T12:48:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考 : <a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="external">https://help.github.com/articles/setting-up-an-apex-domain/</a></p>
<ol>
<li><p>在yourname.github.io的Setting中添加你的自定义域名</p>
</li>
<li><p>在域名解析中添加相应的DNS</p>
<blockquote>
<p>103.245.222.133</p>
</blockquote>
</li>
</ol>

<h2 id="Github-pages设置301重定向"><a href="#Github-pages设置301重定向" class="headerlink" title="Github pages设置301重定向"></a>Github pages设置301重定向</h2><p>购买了域名之后，我们想要让不带www的网址重定向到带www前缀的网址上面</p>
<ol>
<li>在<code>yourname.github.io</code>目录下新建CNAME文件，内容是你的自定义域名比如www.magaofei.com</li>
<li>在域名解析那里，添加CNAME类型的记录，值为<code>yourname.github.io</code></li>
</ol>
<h4 id="macOS下查看端口和杀掉端口"><a href="#macOS下查看端口和杀掉端口" class="headerlink" title="macOS下查看端口和杀掉端口"></a><a href="http://stackoverflow.com/questions/12397175/how-do-i-close-an-open-port-from-the-terminal-on-the-mac" target="_blank" rel="external">macOS下查看端口和杀掉端口</a></h4><ol>
<li><p>Find out the process ID (PID) which is occupying the port number (e.g., 5955) you would like to free</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo lsof -i :5955</div></pre></td></tr></table></figure>
</li>
<li><p>Kill the process which is currently using the port using its PID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo kill -9 PID</div></pre></td></tr></table></figure>
</li>
</ol>
<p>## </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考 : &lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://help.github.com/article
    
    </summary>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>配置环境</title>
    <link href="http://yoursite.com/2016/11/01/3.%20%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2016/11/01/3. 配置环境/</id>
    <published>2016-11-01T08:24:33.000Z</published>
    <updated>2016-11-02T02:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p>使用<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a>搭建来自<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a>的主题</p>
<p>教程来自<a href="http://xiaolai.li/" target="_blank" rel="external">http://xiaolai.li/</a></p>
<h4 id="note："><a href="#note：" class="headerlink" title="note："></a>note：</h4><ul>
<li>命令出错可能是前面没有加上<code>sudo</code></li>
<li>每次只需要把.md文件丢到source目录下，再运行<code>hexo g</code>和<code>hexo d</code>就可以</li>
<li>主题配置网站<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">http://theme-next.iissnan.com/theme-settings.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h1&gt;&lt;p&gt;使用&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://yoursite.com/2016/11/01/2.%202.4%20%E4%B8%80%E6%97%A6%E5%8F%91%E7%8E%B0%E9%9C%80%E8%A6%81%E9%87%8D%E5%A4%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E2%80%A6%E2%80%A6/"/>
    <id>http://yoursite.com/2016/11/01/2. 2.4 一旦发现需要重复的工作……/</id>
    <published>2016-11-01T07:09:26.000Z</published>
    <updated>2016-11-01T13:04:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p>
<p>然后就可以在 Terminal 面板中用 <code>hexo generate</code>生成静态 html 文件，用 <code>hexo server</code>本地查看（在浏览器中用这个地址：localhost:4000），或用 <code>hexo deploy</code> 发布到 yourname.github.io 上去……</p>
<p>以后你想发表博客文章的时候，无非就是在 <code>source</code> 目录中创建新的 <code>.md</code> 文件，而后 <code>hexo generate</code>，之后再 <code>hexo deploy</code>.</p>
<h3 id="2-4-一旦发现需要重复的工作……"><a href="#2-4-一旦发现需要重复的工作……" class="headerlink" title="2.4 一旦发现需要重复的工作……"></a>2.4 一旦发现需要重复的工作……</h3><p>—— 就要马上想办法要么 1)<strong>自动化</strong>，要么 2) <strong>减少工作量</strong>。这是工程师的思考行动方式，在工程师的世界里，懒惰有另外一种用处，是积极的用处：它是用来刺激寻找提高效率的手段。普通人懒起来就什么都不干了；工程师懒起来就使劲琢磨：</p>
<blockquote>
<p>“怎么做才能将来不用做或者起码少做却可以实际上干更多呢？”</p>
</blockquote>
<p>注意：“<strong>实际上干更多</strong>”才是重点！</p>
<p>反复地敲 <code>hexo generate</code>、<code>hexo server</code>、<code>hexo deploy</code> 好累啊！怎么办？我们可以给命令行里反复输入的命令编制缩写……</p>
<p>命令行下输入，其实就是用 Atom 打开 <code>~/.aliases</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">atom ~/.aliases</div></pre></td></tr></table></figure>
<p>在该文件下输入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">alias hgs=&quot;hexo g&amp;&amp;hexo s&quot;</div><div class="line">alias hgd=&quot;hexo g&amp;&amp;hexo d&quot;</div></pre></td></tr></table></figure>
<p>重新启动 Terminal 之后，只要输入 <code>hgs</code> 就是生成内容之后在 <code>localhost:4000</code> 里预览，输入 <code>hgd</code> 就是部署到服务器上……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;然后就可以在 Terminal 面板中用 &lt;code&gt;hexo generate&lt;/code&gt;生成静态 html 文件，用 &lt;code&gt;hexo server&lt;/code&gt;本地查看（在浏览器中用这个地址：localhost:4000），或用 &lt;code&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/01/1.%20hello-world/"/>
    <id>http://yoursite.com/2016/11/01/1. hello-world/</id>
    <published>2016-11-01T03:24:16.000Z</published>
    <updated>2016-11-01T03:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
